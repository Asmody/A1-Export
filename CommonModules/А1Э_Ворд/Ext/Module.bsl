#Область ПрограммныйИнтерфейс

#Если Клиент Тогда
	// Осуществляет вывод в документ MS Word. Документ будет открыт в соседнем окне. В веб-клиенте сохраняет результат вывода в PDF и выводит его на отдельную форму.
	//
	// Параметры:
	//  Макет				 - Строка, ДвоичныеДанные - Если строка, то это полный путь к существующему файлу Ворд. 
	//  ЗаменяемыеЗначения	 - Структура - 
	//    Ключ - имена меток в макете. Ключу "Метка1" соответствует метка "%%Метка1%%".
	//    Значение - Строка. Соответствующие метки в документе Ворд будут заменены на эту строку.
	//  ДанныеТаблиц		 - Массив - содержит структуры класса ТаблицаПодстановкиВорд 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция Вывести(Макет, Знач ЗаменяемыеЗначения = Неопределено, Знач ДанныеТаблиц = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт  
		
		ДополнительныеПараметры = А1Э_Структуры.Структура(ДополнительныеПараметры);
		#Если ВебКлиент Тогда
			ДополнительныеПараметры.Вставить("Внутри1С", Истина);
		#КонецЕсли
		
		Если А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "Внутри1С") = Истина Тогда
			МассивПараметров = А1Э_Массивы.Создать(Макет, ЗаменяемыеЗначения, ДанныеТаблиц, ДополнительныеПараметры); 
			ДанныеВыводаКлиент = А1Э_ГлобальныйКонтекст.СервернаяФункция("А1Э_Ворд.ВывестиНаСервере", МассивПараметров);
			Если ДанныеВыводаКлиент <> Неопределено Тогда
				ИмяДокумента = А1Э_Структуры.ЗначениеСвойства(ЗаменяемыеЗначения, "ИмяДокумента");
				Если ИмяДокумента = Неопределено Тогда
					ИмяДокумента = "Ваш файл";
				КонецЕсли;
				ПолучитьФайл(ДанныеВыводаКлиент.АдресВорд, ИмяДокумента, Истина);
			КонецЕсли;
		Иначе
			ДанныеВывода = ЗаполненныйДокументВорд(Макет, ЗаменяемыеЗначения, ДанныеТаблиц, ДополнительныеПараметры);	
			Если ДанныеВывода <> Неопределено Тогда
				ДанныеВывода.Ворд.Visible = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецФункции
	
	// Осуществляет вывод на печать документа Word. Использует парсинг XML, не использует COM. Парсинг происходит &НаСервере.
	// В тонком клиенте создает временный файл и открывает его пользователю. В веб-клиенте предлагает скачать файл.
	//
	// Параметры:
	//  ИмяМакета				 - Строка - полное имя макета (включая путь). 
	//  ДанныеПечати	 		 - Строка,Соотвествие,Массив - полное имя серверной функции, которая принимает массив объектов и возвращает данные печати, или эти уже полученные данные. 
	//  ОбъектыПечати            - Массив - массив ссылок на объекты печати
	//  ИмяРезультата			 - Строка - имя файла, который будет передан пользователю. 
	//  Архивировать			 - Булево - если Истина, то результат будет выдан в качестве скачиваемого архива. Если Ложь, то результат будет показан пользователю файлом.
	//  ДополнительныеПараметры  - Структура - Может содержать ключи "РазделительЛевый", "РазделительПравый" (по умолчанию "{", "}") 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция Напечатать2(ИмяМакета, ДанныеПечати, ОбъектыПечати, ИмяРезультата = "Документ Word", Архивировать = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблонСЗаменой(ДополнительныеПараметры,
		"РазделительЛевый", "{",
		"РазделительПравый", "}",
		);
		Напечатать(ИмяМакета, ДанныеПечати, ОбъектыПечати, ИмяРезультата, Архивировать, РабочиеПараметры);		
	КонецФункции 
	
#КонецЕсли

#Если НЕ Клиент Тогда
	
	Функция ВывестиНаСервере(Макет, Знач ЗаменяемыеЗначения = Неопределено, Знач ДанныеТаблиц = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
		ДанныеВывода = ЗаполненныйДокументВорд(Макет, ЗаменяемыеЗначения, ДанныеТаблиц, ДополнительныеПараметры);
		Если ДанныеВывода = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПутьКФайлуВорд = А1Э_Файлы.ПутьКНовомуВременномуФайлу("docx");
		ДанныеВывода.ДокументВорд.SaveAs(ПутьКФайлуВорд);
		А1Э_Ворд.ЗакрытьВорд(ДанныеВывода.Ворд);
		
		АдресВорд = Новый УникальныйИдентификатор();
		ДанныеВыводаКлиент = Новый Структура;
		ДанныеВыводаКлиент.Вставить("АдресВорд", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлуВорд), АдресВорд));
		
		Возврат ДанныеВыводаКлиент;
	КонецФункции
	
#КонецЕсли

Функция ЗаполненныйДокументВорд(Макет, Знач ЗаменяемыеЗначения = Неопределено, Знач ДанныеТаблиц = Неопределено, ДополнительныеПараметры = Неопределено)
	Попытка
		Ворд = Неопределено;
		ДокументВорд = А1Э_Ворд.ОткрытьДокументВорд(Макет, Ворд);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗаменяемыеЗначения = А1Э_Структуры.Структура(ЗаменяемыеЗначения);
	ДанныеТаблиц = А1Э_Массивы.Массив(ДанныеТаблиц);
	
	Попытка
		А1Э_Ворд.ПроизвестиЗамену(ДокументВорд, ЗаменяемыеЗначения);
		
		Для Каждого Структура Из ДанныеТаблиц Цикл
			А1Э_Ворд.ЗаполнитьТаблицы(ДокументВорд, Структура.МассивОтборов, Структура.Таблица, Структура.ИменаКолонок);
		КонецЦикла;
		
		ДанныеВывода = Новый Структура;
		ДанныеВывода.Вставить("Ворд", Ворд);
		ДанныеВывода.Вставить("ДокументВорд", ДокументВорд);
		Возврат ДанныеВывода;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("При заполнении документа MS Word возникла ошибка: " + ОписаниеОшибки + ". Обратитесь к администратору системы!");
		А1Э_Ворд.ЗакрытьВорд(Ворд);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 

Функция НовыйОписаниеЯчейки(Текст, ПараметрыЯчейки = Неопределено, ПрочиеПараметры = Неопределено) Экспорт
	Возврат А1Э_Структуры.Создать(
	"Класс", "А1Э_ОписаниеЯчейкиВорд",
	"Текст", Текст,
	"ПараметрыЯчейки", А1Э_Массивы.Массив(ПараметрыЯчейки),
	"НеВыводить", А1Э_Структуры.ЗначениеСвойства(ПрочиеПараметры, "НеВыводить"),
	);
КонецФункции

Функция НовыйОписаниеНесуществующейЯчейки() Экспорт 
	Возврат НовыйОписаниеЯчейки("", , А1Э_Структуры.Создать("НеВыводить", Истина));
КонецФункции

#КонецОбласти 

#Область ИнтерфейсВорд

// Функция - Открыть документ ворд
//
// Параметры:
//  Файл - Строка, ДвоичныеДанные - Если Строка, то путь к файлу.
//  Ворд - COMОбъект("Word.Application") - будет создан если не передан. 
// 
// Возвращаемое значение:
//   - 
//
Функция ОткрытьДокументВорд(Файл, Ворд = Неопределено) Экспорт 
	ПутьКФайлу = А1Э_Файлы.ПолучитьПутьКФайлу(Файл, "docx"); 
	
	Если Ворд = Неопределено Тогда
		Ворд = ОткрытьВорд(ПутьКФайлу);
	КонецЕсли;
	
	Попытка
		ДокументВорд = Ворд.Application.Documents(1);
		ДокументВорд.Activate(); 
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗакрытьВорд(Ворд);
		ИсключениеВорд("Ворд-3", ОписаниеОшибки); 
	КонецПопытки;
	
	Возврат ДокументВорд;
	
КонецФункции

Функция ОткрытьВорд(ПутьКФайлу) Экспорт 
	Попытка
		Ворд = Новый COMОбъект("Word.Application");
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ИсключениеВорд("Ворд-1", ОписаниеОшибки);
	КонецПопытки;
	
	Попытка
		Ворд.Documents.Add(ПутьКФайлу);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗакрытьВорд(Ворд, Ложь);
		ИсключениеВорд("Ворд-2", ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Ворд;
КонецФункции 

Функция ЗакрытьВорд(Ворд, ЗакрыватьДокументы = Истина) Экспорт
	Если Ворд = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ЗакрыватьДокументы Тогда
		Ворд.Documents.Close();
	КонецЕсли;
	Ворд.DisplayAlerts = 0; 
	Ворд.Quit();
	Ворд = Неопределено;
КонецФункции 

Функция ПроизвестиЗамену(ДокументВорд, СтруктураЗначений) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		СтруктураЗначений = Новый Структура;		
	#КонецЕсли 
	Для Каждого Пара Из СтруктураЗначений Цикл
		ВыполнитьЗамену(ДокументВорд, Пара.Ключ, Пара.Значение);
	КонецЦикла;
КонецФункции

Функция ДобавитьОтборТаблицы(МассивОтборов, НомерСтроки, НомерКолонки, Текст) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		МассивОтборов = Новый Массив;		
	#КонецЕсли 
	МассивОтборов.Добавить(Новый Структура("НомерСтроки,НомерКолонки,Текст", НомерСтроки, НомерКолонки, Текст));
КонецФункции

// Возвращает массив номеров таблиц в соответствии с отбором. Отбор устанавливается по тексту в ячейках.
// Проверяется вхождение текста отбора в текст ячейки (иначе сложности со служебными символами).
// Рекомендуется делать избыточные отборы.
//
// Параметры:
//  ДокументВорд	 - COMОбъект - получается с помощью ОткрытьДокументВорд. 
//  МассивОтборов	 - Массив - массив структур со следующими ключами:
//   НомерСтроки - Число - номер строки. Первая строка имеет номер 1.
//   НомерКолонки - Число - номер колонки. Первая колонка имеет номер 1.
//   Текст - Строка - текст в ячейке
// 
// Возвращаемое значение:
//  Массив - 
//
Функция ПолучитьНомераТаблиц(ДокументВорд, МассивОтборов) Экспорт
	
	Результат = Новый Массив;
	КоличествоТаблиц = ДокументВорд.Content.Tables.Count;
	
	Для Сч = 1 По КоличествоТаблиц Цикл
		ТаблицаВорд = ДокументВорд.Content.Tables(Сч);
		СоответствуетОтборам = Истина;
		Для Каждого Отбор Из МассивОтборов Цикл
			
			Если ТаблицаВорд.Rows.Count < Отбор.НомерСтроки Тогда
				СоответствуетОтборам = Ложь;
				Прервать;
			КонецЕсли;
			Если ТаблицаВорд.Columns.Count < Отбор.НомерКолонки Тогда
				СоответствуетОтборам = Ложь;
				Прервать;
			КонецЕсли;
			
			ТекстЯчейки = ТаблицаВорд.Cell(Отбор.НомерСтроки, Отбор.НомерКолонки).Range().Text;
			Если СтрНайти(ТекстЯчейки, Отбор.Текст) = 0 Тогда
				СоответствуетОтборам = Ложь;
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		Если СоответствуетОтборам Тогда
			Результат.Добавить(Сч);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу значениями из ТаблицыЗначений или массива структур. Необходимо, чтобы в таблице уже были 2 строки - 
// Шапка и пустая строка, которая после заполнения будет удалена.
//
// Параметры:
//  ДокументВорд - COMОбъект - получается с помощью ОткрытьДокументВорд.
//  НомерТаблицы - Число - Номер таблицы в документе. Рекомендуется передавать результаты поиска из функции ПолучитьНомераТаблиц 
//  Таблица		 - 	 - 
//  ИменаКолонок - 	 - 
//
Функция ЗаполнитьТаблицу(ДокументВорд, НомерТаблицы, Таблица, Знач ИменаКолонок = Неопределено) Экспорт
	#Если Сервер Или ВнешнееСоединение Тогда
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И ИменаКолонок = Неопределено Тогда
			ИменаКолонок = Новый Массив;
			Для Каждого Колонка Из Таблица.Колонки ЦИкл
				ИменаКолонок.Добавить(Колонка.Имя);
			КонецЦикла;
		КонецЕсли;
	#КонецЕсли
	ИменаКолонок = А1Э_Массивы.Массив(ИменаКолонок);
	ТаблицаВорд = ДокументВорд.Content.Tables(НомерТаблицы);
	
	Если ТаблицаВорд.Rows.Count < 2 Тогда
		Сообщить("В документе MS Word в таблице №" + НомерТаблицы + " должно быть две строки - строка с заголовками и пустая строка, которую программа использует для заполнения!"); 
		Возврат Неопределено;
	КонецЕсли;
	
	ПустаяСтрока = ТаблицаВорд.Rows(2);
	
	НомерСтроки = 1;
	ПервыйПроход = Истина;
	Пока НомерСтроки < Таблица.Количество() + 1 Цикл
		НомерСтроки = НомерСтроки + 1;
		Ряд = ТаблицаВорд.Rows().Add(ПустаяСтрока);
		НомерКолонки = 0;
		Пока НомерКолонки < ИменаКолонок.Количество() Цикл
			НомерКолонки = НомерКолонки + 1;
			Если НомерКолонки > ТаблицаВорд.Columns.Count Тогда
				Если ПервыйПроход Тогда
					Сообщить("В документе MS Word в таблице №" + НомерТаблицы + " должно быть не менее " + ИменаКолонок.Количество() + " колонок." + Символы.ПС
					+ "Часть данных не была перенесена в таблицу!");
					ПервыйПроход = Ложь;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ТаблицаВорд.Cell(НомерСтроки, НомерКолонки).Range().Text = Таблица[НомерСтроки - 2][ИменаКолонок[НомерКолонки - 1]];
		КонецЦикла;
	КонецЦикла;
	ПустаяСтрока.Delete();
КонецФункции

Функция ЗаполнитьТаблицы(ДокументВорд, МассивОтборов, Таблица, Знач ИменаКолонок = Неопределено) Экспорт
	МассивНомеровТаблиц = А1Э_Ворд.ПолучитьНомераТаблиц(ДокументВорд, МассивОтборов);
	Если МассивНомеровТаблиц.Количество() = 0 Тогда
		Сообщить(ТекстСообщенияТаблицыНеНайдены(МассивОтборов));
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого НомерТаблицы Из МассивНомеровТаблиц Цикл
		ЗаполнитьТаблицу(ДокументВорд, НомерТаблицы, Таблица, ИменаКолонок);
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область СлужебноВорд

Функция ВыполнитьЗамену(ДокументВорд, Ключ, Значение) Экспорт
	ВыполнитьЗаменуСлужебный(ДокументВорд.Content, "%%"+ Ключ + "%%",  Строка(Значение));
	ВыполнитьЗаменуСлужебный(ДокументВорд.Sections(1).Footers.Item(1).Range(), "%%"+ Ключ + "%%",  Строка(Значение));
	ВыполнитьЗаменуСлужебный(ДокументВорд.Sections(1).Headers.Item(1).Range(), "%%"+ Ключ + "%%",  Строка(Значение));
КонецФункции

Функция ВыполнитьЗаменуСлужебный(ОбъектВорд, СтрокаПоиска, СтрокаЗамены)
	ОбъектВорд.Find.Execute(СтрокаПоиска,,,,,,,,,СтрокаЗамены,2);
КонецФункции

Функция ТекстСообщенияТаблицыНеНайдены(МассивОтборов)
	Массив = Новый Массив;
	Массив.Добавить("Не найдены таблицы для заполнения согласно отбору! Проверьте, что:");
	Для Каждого Отбор Из МассивОтборов Цикл
		Массив.Добавить("В ячейке строка " + Отбор.НомерСтроки + " и колонка " + Отбор.НомерКолонки + " присутствует текст <" + Отбор.Текст + ">.");
	КонецЦикла;
	Текст = СтрСоединить(Массив, Символы.ПС);
	Возврат Текст;		
КонецФункции


#КонецОбласти

#Область ОбработкаИсключений

Функция ИсключениеВорд(КодИсключения, ОписаниеОшибки)
	ОписаниеИсключения = А1Э_ТаблицыЗначений.НайтиСтроку(МассивОписанийИсключений(), "Код", КодИсключения); 
	ТекстИсключения = "(КодОшибки:" + КодИсключения + "): " + ОписаниеИсключения + ". Данные отладки: " + ОписаниеОшибки;
	А1Э_Служебный.СлужебноеИсключение(ТекстИсключения);
КонецФункции

Функция МассивОписанийИсключений()
	Массив = Новый Массив;
	ДобавитьИсключение(Массив, "Ворд-1", "Не обнаружена программа Microsoft Word.");
	ДобавитьИсключение(Массив, "Ворд-2", "Не удалось открыть файл.");
	ДобавитьИсключение(Массив, "Ворд-3", "В файле не обнаружены данные документа.");
	Возврат Массив;
КонецФункции 

Функция ДобавитьИсключение(МассивОписанийИсключений, Код, Описание)
	МассивОписанийИсключений.Добавить(А1Э_Классы.НовыйОписаниеИсключения(Код, Описание));	
КонецФункции

#КонецОбласти 

#Область ФормаВыводаВорд

#Если Клиент Тогда
	Функция ОткрытьФормуПросмотраВыводаВорд(ДанныеВыводаКлиент) 
		Если ДанныеВыводаКлиент = Неопределено Тогда
			Сообщить("Не удалось сформировать документ!");
		КонецЕсли;
		А1Э_УниверсальнаяФорма.Открыть("Просмотр документов MS Word", "А1Э_Ворд.ФормаВыводаВорд_ПриСозданииНаСервере", 
		А1Э_Структуры.Создать(
		"АдресВорд", ДанныеВыводаКлиент.АдресВорд,
		"АдресПДФ", ДанныеВыводаКлиент.АдресПДФ,
		));
	КонецФункции
#КонецЕсли

#Если НЕ Клиент Тогда
	Функция ФормаВыводаВорд_ПриСозданииНаСервере(Форма) Экспорт
		МассивРеквизитов = Новый Массив;
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивРеквизитов, "ОкноПросмотра", А1Э_Строки.ОписаниеТипа(0), ,,,,
		Новый Структура("Вид", ВидПоляФормы.ПолеHTMLДокумента));
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивРеквизитов, "АдресВорд", А1Э_Строки.ОписаниеТипа(0));
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивРеквизитов, "АдресПДФ", А1Э_Строки.ОписаниеТипа(0));
		А1Э_Формы.ДобавитьРеквизитыИЭлементы(Форма, МассивРеквизитов);
		Форма.АдресВорд = Форма.Параметры.АдресВорд;
		Форма.АдресПДФ = Форма.Параметры.АдресПДФ;
		
		
		Форма.ОкноПросмотра = "<html>
		|<head>
		|</head>
		|<body><embed width=100% height=100% type=""application/pdf"" src="""+Форма.АдресПДФ+"""></embed>
		|</body></html>";
		
	КонецФункции
#КонецЕсли

#КонецОбласти

#Область ОбработкаDocxЧерезXML 

#Область Клиент
#Если Клиент Тогда
	
	Функция ВывестиДанныеЧерезХМЛ(ПутьКМакету, ДанныеЗамены, ИмяРезультата = "Документ Word", Архивировать = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
		ПараметрыФайла = А1Э_СерверныеВызовы.А1Э_Ворд__ВывестиДанныеЧерезХМЛСервер(ПутьКМакету, ДанныеЗамены, Архивировать, ДополнительныеПараметры);
		Если ПараметрыФайла = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОтдатьФайлПользователю(ПараметрыФайла, ИмяРезультата);		
	КонецФункции
	
	Процедура ОтдатьФайлПользователю(ПараметрыФайла,  Знач ИмяФайла = "Документ Word") Экспорт
		
		#Если ВебКлиент Тогда
			Если ПараметрыФайла.Свойство("ИмяФайлаДляПользователя") = Истина Тогда
				ИмяФайла = ПараметрыФайла.ИмяФайлаДляПользователя;
			КонецЕсли;
			
			ПолучитьФайл(ПараметрыФайла.АдресХранилища, "" + ИмяФайла + ".docx");
			
		#Иначе
			Если ПараметрыФайла.Расширение <> ".docx" Тогда
				ПолучитьФайл(ПараметрыФайла.АдресХранилища, ИмяФайла + ПараметрыФайла.Расширение);
				Возврат;
			КонецЕсли;
			
			ПолноеИмяФайла 	= ПолучитьИмяВременногоФайла("docx");
			
			Файл = Новый Файл(ПолноеИмяФайла);
			
			Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ПараметрыФайла.АдресХранилища);
			
			МассивОписаний = Новый Массив;
			МассивОписаний.Добавить(Описание);
			ПолучитьФайлы(МассивОписаний,,,Ложь);
			
			// Открыть Файл
			Попытка
				ЗапуститьПриложение( ПолноеИмяФайла );
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Предупреждение("Ошибка: " + ИнформацияОбОшибке.Описание);
			КонецПопытки;
			
		#КонецЕсли
		
	КонецПроцедуры 
	
#КонецЕсли
#КонецОбласти 

#Область Сервер
#Если НЕ Клиент Тогда
	
	Функция ВывестиДанныеЧерезХМЛСервер(ПутьКМакету, Знач ВнешниеДанныеЗамены, Архивировать = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
		ВнешниеДанныеЗамены = А1Э_Массивы.Массив(ВнешниеДанныеЗамены);
		ДанныеЗамены = Новый Массив;
		Сч = -1;
		Пока Сч < ВнешниеДанныеЗамены.Количество()-1 Цикл
			Сч = Сч + 1;
			ЭлементДанныхЗамены = ВнешниеДанныеЗамены[Сч];
			СтруктураЗамены = Новый Структура("ИмяФайла,ДанныеЗамены,ФайлыЗамены");
			Если ТипЗнч(ЭлементДанныхЗамены) = Тип("Структура") Тогда
				СтруктураЗамены.ИмяФайла = А1Э_Структуры.ЗначениеСвойства(ЭлементДанныхЗамены, "ИмяФайла");
				СтруктураЗамены.ФайлыЗамены = А1Э_Структуры.ЗначениеСвойства(ЭлементДанныхЗамены, "ФайлыЗамены");
				ЭлементВнешнихДанныхЗамены = А1Э_Структуры.ЗначениеСвойства(ЭлементДанныхЗамены, "ДанныеЗамены");
			ИначеЕсли ТипЗнч(ЭлементДанныхЗамены) = Тип("ТаблицаЗначений") Тогда
				ЭлементВнешнихДанныхЗамены = ЭлементДанныхЗамены;
			ИначеЕсли ТипЗнч(ЭлементДанныхЗамены) = Тип("Соответствие") Тогда
				СтруктураЗамены.ИмяФайла = ЭлементДанныхЗамены["ИмяФайла"]; 
				ЭлементВнешнихДанныхЗамены = ЭлементДанныхЗамены;
			Иначе
				А1Э_Служебный.ИсключениеНеверныйТип("ВнешниеДанныеЗамены", "ВывестиДанныеЧерезХМЛСервер", ВнешниеДанныеЗамены, "Структура,Соответствие,ТаблицаЗначений");
			КонецЕсли;
			Если ТипЗнч(ЭлементВнешнихДанныхЗамены) = Тип("ТаблицаЗначений") Тогда
				ДанныеЗаменыТаблица = ЭлементВнешнихДанныхЗамены;
			Иначе		
				ДанныеЗаменыТаблица = НовыйДанныеЗамены();
				Для Каждого Пара Из ЭлементВнешнихДанныхЗамены Цикл
					ДобавитьШаблон(ДанныеЗаменыТаблица, Пара.Ключ, Пара.Значение);
				КонецЦикла;
			КонецЕсли;
			СтруктураЗамены.ДанныеЗамены = ДанныеЗаменыТаблица;
			ДанныеЗамены.Добавить(СтруктураЗамены);
		КонецЦикла;		
		
		Возврат ОбработатьМакетВорд(ПутьКМакету, ДанныеЗамены, Архивировать, ДополнительныеПараметры);
	КонецФункции
	
	Функция НовыйДанныеЗамены() Экспорт
		ДанныеЗамены = Новый ТаблицаЗначений;
		ДанныеЗамены.Колонки.Добавить("ИмяПараметраВWord");
		ДанныеЗамены.Колонки.Добавить("Результат");
		Возврат ДанныеЗамены;	
	КонецФункции
	
	Функция ДобавитьШаблон(ДанныеЗаменыТаблица, ИмяПараметра, Результат) Экспорт
		Если ТипЗнч(Результат) <> Тип("Массив") Тогда
			Возврат ДобавитьПростойШаблон(ДанныеЗаменыТаблица, ИмяПараметра, Результат);
		КонецЕсли;
		Если Результат.Количество() = 0 Тогда
			Возврат ДобавитьПростойШаблон(ДанныеЗаменыТаблица, ИмяПараметра, Результат);
		КонецЕсли;
		Если ТипЗнч(Результат[0]) <> Тип("Соответствие") И ТипЗнч(Результат[0]) <> Тип("Структура") Или А1Э_Структуры.Класс(Результат[0]) = "А1Э_ОписаниеЯчейкиВорд" Тогда
			Возврат ДобавитьПростойШаблон(ДанныеЗаменыТаблица, ИмяПараметра, Результат);
		КонецЕсли;
		Возврат ДобавитьСложныйШаблон(ДанныеЗаменыТаблица, Результат);
	КонецФункции
	
	Функция ДобавитьПростойШаблон(ДанныеЗаменыТаблица, ИмяПараметра, Результат)
		Шаблон = ДанныеЗаменыТаблица.Добавить();
		Шаблон.ИмяПараметраВWord = ИмяПараметра;
		Шаблон.Результат = Результат;
		Возврат Шаблон;
	КонецФункции 
	
	Функция ДобавитьСложныйШаблон(ДанныеЗаменыТаблица, СложныйШаблон)
		НовыеШаблоны = Новый Соответствие;
		Для Каждого Пара Из СложныйШаблон[0] Цикл
			НовыеШаблоны.Вставить(Пара.Ключ, Новый Массив);
		КонецЦикла;
		Для Каждого Элемент Из СложныйШаблон Цикл
			Для Каждого Пара Из НовыеШаблоны Цикл
				Пара.Значение.Добавить(Элемент[Пара.Ключ]);
			КонецЦикла;
		КонецЦикла;
		МассивНовыхШаблонов = Новый Массив;
		Для Каждого Пара Из НовыеШаблоны Цикл
			МассивНовыхШаблонов.Добавить(ДобавитьПростойШаблон(ДанныеЗаменыТаблица, Пара.Ключ, Пара.Значение));
		КонецЦикла;
		Возврат МассивНовыхШаблонов;
	КонецФункции
	
	Функция СоздатьТаблицуЗамены(Соответствие, Колонки) Экспорт
		Массив = А1Э_Массивы.Массив(Колонки);
		Для Каждого Элемент Из Массив Цикл
			Соответствие.Вставить(Элемент, Новый Массив);
		КонецЦикла;
	КонецФункции 
	
	Функция ОбработатьМакетВорд(ПутьКМакету, ДанныеЗамены, Архивировать = Ложь, ДополнительныеПараметры = Неопределено)
		ПараметрыЗаполненияШаблона = Новый Структура;
		ПараметрыЗаполненияШаблона.Вставить("РазделительЛевый", А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "РазделительЛевый", "<"));
		ПараметрыЗаполненияШаблона.Вставить("РазделительПравый", А1Э_Структуры.ЗначениеСвойства(ДополнительныеПараметры, "РазделительПравый", ">"));
		
		Если Архивировать = Ложь Тогда
			Возврат СоздатьЕдиныйФайлВорд(ПутьКМакету, ПараметрыЗаполненияШаблона, ДанныеЗамены);
		Иначе
			Возврат СоздатьАрхивФайловВорд(ПутьКМакету, ПараметрыЗаполненияШаблона, ДанныеЗамены);
		КонецЕсли;
	КонецФункции
	
	Функция СоздатьАрхивФайловВорд(ПутьКМакету, ПараметрыЗаполненияШаблона, ДанныеЗамены)
		ИмяВременногоФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
		ИмяВременнойПапки = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
		Сч = 0;
		Для Каждого Элемент Из ДанныеЗамены Цикл
			Сч = Сч + 1; 
			ФайлШаблона = ПолучитьИмяВременногоФайла("docx");
			РабочийПутьКМакету = ПутьКМакету(Элемент, ПутьКМакету);
			Макет = МакетДляПечати(РабочийПутьКМакету);
			Макет.Записать(ФайлШаблона);
			ДанныеФайла = РаспаковатьШаблонDocx(ФайлШаблона);
			Если ДанныеФайла = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ОбработатьФайл(ДанныеФайла.Текст, Элемент, ПараметрыЗаполненияШаблона);		
			ОбработатьФайл(ДанныеФайла.НижнийКолонтитул1, Элемент, ПараметрыЗаполненияШаблона);
			ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул1, Элемент, ПараметрыЗаполненияШаблона);
			ОбработатьФайл(ДанныеФайла.НижнийКолонтитул2, Элемент, ПараметрыЗаполненияШаблона);
			ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул2, Элемент, ПараметрыЗаполненияШаблона);
			ОбработатьФайл(ДанныеФайла.НижнийКолонтитул2, Элемент, ПараметрыЗаполненияШаблона);
			ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул2, Элемент, ПараметрыЗаполненияШаблона);
			ОбработатьФайл(ДанныеФайла.НижнийКолонтитул3, Элемент, ПараметрыЗаполненияШаблона);		
			ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул3, Элемент, ПараметрыЗаполненияШаблона);
			
			ПодставитьВложенныеФайлы(ДанныеФайла.ВложенныеФайлы, Элемент);
			
			Результат = ЗапаковатьШаблонDocx(ДанныеФайла);
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Результат.АдресХранилища);
			ИмяФайла = ?(ЗначениеЗаполнено(Элемент.ИмяФайла), Элемент.ИмяФайла, "Файл Word " + Сч);  
			ДвоичныеДанные.Записать(ИмяВременнойПапки + "\" + ИмяФайла + ".docx");
		КонецЦикла;
		ЗипФайл = Новый ЗаписьZipФайла(ИмяВременногоФайлаАрхива);
		ЗипФайл.Добавить(ИмяВременнойПапки + "\*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ЗипФайл.Записать();
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаАрхива), Новый УникальныйИдентификатор);
		
		Файл = Новый Файл(ИмяВременногоФайлаАрхива);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВремяИзменения",Файл.ПолучитьВремяИзменения());
		ПараметрыФайла.Вставить("УниверсальноеВремяИзменения",Файл.ПолучитьУниверсальноеВремяИзменения());
		ПараметрыФайла.Вставить("Размер",Файл.Размер());
		ПараметрыФайла.Вставить("Расширение",Файл.Расширение);
		ПараметрыФайла.Вставить("ИмяБезРасширения",Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("АдресХранилища",АдресХранилища);
		Возврат ПараметрыФайла;
	КонецФункции
	
	Функция СоздатьЕдиныйФайлВорд(ПутьКМакету, ПараметрыЗаполненияШаблона, ДанныеЗамены)
		ФайлШаблона = ПолучитьИмяВременногоФайла("docx");
		РабочийПутьКМакету = ПутьКМакету(ДанныеЗамены[0], ПутьКМакету);
		Макет = МакетДляПечати(РабочийПутьКМакету);
		Макет.Записать(ФайлШаблона);
		ДанныеФайла = РаспаковатьШаблонDocx(ФайлШаблона);
		Если ДанныеФайла = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОбработатьФайл(ДанныеФайла.Текст, ДанныеЗамены, ПараметрыЗаполненияШаблона);		
		ОбработатьФайл(ДанныеФайла.НижнийКолонтитул1, ДанныеЗамены[0], ПараметрыЗаполненияШаблона);		
		ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул1, ДанныеЗамены[0], ПараметрыЗаполненияШаблона);		
		ОбработатьФайл(ДанныеФайла.НижнийКолонтитул2, ДанныеЗамены[0], ПараметрыЗаполненияШаблона);		
		ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул2, ДанныеЗамены[0], ПараметрыЗаполненияШаблона);		
		ОбработатьФайл(ДанныеФайла.НижнийКолонтитул3, ДанныеЗамены[0], ПараметрыЗаполненияШаблона);		
		ОбработатьФайл(ДанныеФайла.ВерхнийКолонтитул3, ДанныеЗамены[0], ПараметрыЗаполненияШаблона);		
		
		ПодставитьВложенныеФайлы(ДанныеФайла.ВложенныеФайлы, ДанныеЗамены[0]);
		
		Возврат ЗапаковатьШаблонDocx(ДанныеФайла, ДанныеЗамены[0]);
		
	КонецФункции 
	
	Функция МакетДляПечати(ПутьКМакету) 
		Макет = Неопределено;
		//Обработчик, позволяющий переопределить получение 
		А1Э_Механизмы.ВыполнитьМеханизмыОбработчика("А1Э_Ворд__ПриПолученииМакета", ПутьКМакету, Макет);
		Если НЕ ЗначениеЗаполнено(Макет) Тогда
			//ТУДУ: сделать частью механизма.
			МодульУправлениеПечатью = Вычислить("УправлениеПечатью");
			Макет = МодульУправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
		КонецЕсли;
		Возврат Макет;
	КонецФункции
	
	Функция ОбработатьФайл(ПутьКФайлу, ДанныеЗамены, ПараметрыЗаполненияШаблона)
		Файл = Новый Файл(ПутьКФайлу);
		Если НЕ Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		РабочиеДанныеЗамены = А1Э_Массивы.Массив(ДанныеЗамены);
		
		ВременныйФайлКопия = ПолучитьИмяВременногоФайла("xml");
		КопироватьФайл(ПутьКФайлу, ВременныйФайлКопия);
		УдалитьФайлы(ПутьКФайлу);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлКопия);
		ЧтениеXML.ИгнорироватьПробелы = Ложь;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьКФайлу, ЧтениеXML.КодировкаXML);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Теги = ТаблицаЗначенийТеги();
		Пока ЧтениеXML.Прочитать() Цикл
			ДобавитьТегиВТаблицу(ЧтениеXML,Теги);
		КонецЦикла;
		
		ТегиНачала = ТаблицаЗначенийТеги();
		ТегиТелаДокумента = ТаблицаЗначенийТеги();
		ТегиОкончания = ТаблицаЗначенийТеги();
		
		ИндексНачалаТелаДокумента = А1Э_ТаблицыЗначений.ИндексПервойНайденнойСтроки(Теги, Новый Структура("Имя,ТипУзла","w:body",ТипУзлаXML.НачалоЭлемента));
		Если ИндексНачалаТелаДокумента = Неопределено Тогда
			ИндексНачалаТелаДокумента = -1;
		КонецЕсли;
		
		ИндексОкончанияТелаДокумента = А1Э_ТаблицыЗначений.ИндексПервойНайденнойСтроки(Теги, Новый Структура("Имя,ТипУзла","w:body",ТипУзлаXML.КонецЭлемента));
		Если ИндексОкончанияТелаДокумента = Неопределено Тогда
			ИндексОкончанияТелаДокумента = Теги.Количество() - 1;
		КонецЕсли;
		
		Сч = -1;
		Пока Сч < ИндексНачалаТелаДокумента Цикл
			Сч = Сч + 1;
			Строка = ТегиНачала.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Теги[Сч]);
		КонецЦикла;
		Пока Сч < ИндексОкончанияТелаДокумента - 1 Цикл
			Сч = Сч + 1;
			Строка = ТегиТелаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Теги[Сч]);
		КонецЦикла;
		Пока Сч < Теги.Количество() - 1 Цикл
			Сч = Сч + 1;
			Строка = ТегиОкончания.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Теги[Сч]);
		КонецЦикла;
		
		Для каждого Тег Из ТегиНачала Цикл
			ДобавитьТегиВXML(ЗаписьXML, Тег);
		КонецЦикла;
		ТегиСШаблонами = СоединитьШаблоны(ТегиТелаДокумента, ПараметрыЗаполненияШаблона);
		
		
		ЭтоПервый = Истина;
		Для Каждого ЭлементДанныхЗамены Из РабочиеДанныеЗамены Цикл
			Если ЭтоПервый Тогда
				ЭтоПервый = Ложь;
			Иначе
				ВывестиРазделительСтраницВорд(ЗаписьXML);
			КонецЕсли;
			ТегиСЗаполненнымиШаблонами = ЗаполнитьШаблоны(ТегиСШаблонами, ПараметрыЗаполненияШаблона, ЭлементДанныхЗамены.ДанныеЗамены);
			Для Каждого Тег Из ТегиСЗаполненнымиШаблонами Цикл
				ДобавитьТегиВXML(ЗаписьXML, Тег);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого Тег Из ТегиОкончания Цикл
			ДобавитьТегиВXML(ЗаписьXML, Тег);
		КонецЦикла;
		
		ЗаписьXML.Закрыть();
		
	КонецФункции
	
	Функция ВывестиРазделительСтраницВорд(ЗаписьXML)
		ЗаписьXML.ЗаписатьБезОбработки("<w:p><w:pPr><w:rPr></w:rPr></w:pPr><w:r><w:rPr></w:rPr><w:br w:type=""page""/></w:r></w:p>");
	КонецФункции 
	
	Функция ПодставитьВложенныеФайлы(ПутьКВложеннымФайлам, ДанныеЗамены) Экспорт
		Если ДанныеЗамены.ФайлыЗамены = Неопределено Тогда Возврат Неопределено; КонецЕсли;
		
		Для Каждого Пара Из ДанныеЗамены.ФайлыЗамены Цикл
			ПутьКФайлу = А1Э_Файлы.СложитьПути(ПутьКВложеннымФайлам, Пара.Ключ);
			Если НЕ А1Э_Файлы.ФайлСуществует(ПутьКФайлу) Тогда
				Сообщить("Файл к замене " + Пара.Ключ + " не найден в макете!");
				Продолжить;
			КонецЕсли;
			Пара.Значение.Записать(ПутьКФайлу);
		КонецЦикла;
	КонецФункции
	
	Функция ПутьКМакету(ЭлементДанныхЗамены, ПутьКМакету)
		СтрокиПути = ЭлементДанныхЗамены.ДанныеЗамены.НайтиСтроки(А1Э_Структуры.Создать(
		"ИмяПараметраВWord", "ПутьКМакету"));
		Если СтрокиПути.Количество() = 0 Тогда Возврат ПутьКМакету; КонецЕсли;
		
		Возврат СтрокиПути[0].Результат;
	КонецФункции
	
#КонецЕсли
#КонецОбласти 

#КонецОбласти

#Область ОбработкаDocxЧерезXML_ВнешняяБиблиотека

#Область ИнформацияОбАвторе
//////////////////////////////////////
// ОБРАБОТКА DOCX ЧЕРЕЗ XML 
// Разработчик : Эртель М.С ArtMS1@Mail.ru +375 29 2344254
//////////////////////////////////////
// 
// ОБРАБОТКА DOCX ЧЕРЕЗ XML.
// 
#КонецОбласти 	

#Область Библиотека_Сервер
#Если НЕ Клиент Тогда
	// Функция - Возвращает имя тега таблицы.
	//
	Функция ТегТаблица()
		Возврат "w:tbl"
	КонецФункции
	
	// Функция - Возвращает имя тега колонки таблицы.
	//
	Функция ТегКолонкаТаблицы()
		Возврат "w:tc"
	КонецФункции
	
	// Функция - Возвращает имя тега строки таблицы.
	//
	Функция ТегСтрокаТаблицы()
		Возврат "w:tr"
	КонецФункции
	
	// Функция - Возвращает имя тега строковой вставки разрыва строки в тексте.
	//
	Функция ТегПараграф()
		Возврат "w:p"
	КонецФункции
	
	// Функция - Возвращает имя тега блока текста.
	//
	Функция ТегТекста()
		Возврат "w:r"
	КонецФункции
	
	// Функция - Возвращает имя тега строковой вставки части текста.
	//
	Функция ТегСтрокиТекста()
		Возврат "w:t"
	КонецФункции
	
	// Функция - Возвращает имя тега строковой вставки разрыва строки в тексте.
	//
	Функция ТегРазрывСтроки()
		Возврат "w:br"
	КонецФункции
	
	// Функция  Возвращает имя тега проверки на ошибки.
	//
	Функция ТегПроверкаНаОшибки()
		Возврат "w:proofErr"
	КонецФункции
	
	// Функция  проверяет что тег описывает текст.
	//
	Функция ЭтоТегПараметровТекста(Знач Тег)
		
		Возврат Истина;
		
		//Тег = СокрЛП(Нрег(Тег));
		//
		//МассивПараметровТекста = Новый Массив;
		//МассивПараметровТекста.Добавить("w:t");
		//МассивПараметровТекста.Добавить("w:r");
		//МассивПараметровТекста.Добавить("w:rfonts");
		//МассивПараметровТекста.Добавить("w:sz");
		//МассивПараметровТекста.Добавить("w:szcs");
		//МассивПараметровТекста.Добавить("w:lang");
		//МассивПараметровТекста.Добавить("w:rpr");
		//МассивПараметровТекста.Добавить("w:t");
		//МассивПараметровТекста.Добавить("w:b");
		//МассивПараметровТекста.Добавить("w:bcs");
		//МассивПараметровТекста.Добавить("w:u");
		//МассивПараметровТекста.Добавить("w:color");
		//МассивПараметровТекста.Добавить("w:prooferr");
		//МассивПараметровТекста.Добавить("w:bookmarkstart");
		//МассивПараметровТекста.Добавить("w:bookmarkend");
		////А1
		//МассивПараметровТекста.Добавить("w:rstyle");
		//МассивПараметровТекста.Добавить("w:spacing");
		//МассивПараметровТекста.Добавить("w:i");
		//МассивПараметровТекста.Добавить("w:snapToGrid");
		//МассивПараметровТекста.Добавить("w:shd");
		//Если МассивПараметровТекста.Найти(Тег) = Неопределено Тогда
		//	Возврат Ложь
		//Иначе
		//	Возврат Истина;
		//КонецЕсли;
		
	КонецФункции
	
	//////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОТВЕТСВЕННЫЕ ЗА РАЗБОРКУ И СБОРКУ DOCX.
	
	
	// Функция - Возвращает пути к распакованному docx
	// ШаблонПуть - Строка путь к файлу docx.
	Функция РаспаковатьШаблонDocx(ШаблонПуть)
		
		// Если файл в формате docx, то текст файла надо взять из файла document в архиве.
		ДанныеФайла = Новый Структура;
		
		// Извлекаем содержимое архива.
		ИмяВременнойПапки = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
		ДанныеФайла.Вставить("ИмяВременнойПапки", ИмяВременнойПапки);
		
		Попытка
			ZipАрхив= Новый ЧтениеZipФайла(ШаблонПуть);
			ZipАрхив.ИзвлечьВсе(ИмяВременнойПапки);
			ZipАрхив.Закрыть();
		Исключение
			Сообщить("Ошибочный файл шаблона. Требуемый формат документы - Word ""docx""");
			Возврат Неопределено;             
		КонецПопытки;
		
		ДанныеФайла.Вставить("Текст", ИмяВременнойПапки + "\word\document.xml");
		ДанныеФайла.Вставить("Настройки", ИмяВременнойПапки + "\word\settings.xml");
		ДанныеФайла.Вставить("Списки", ИмяВременнойПапки + "\word\numbering.xml");
		ДанныеФайла.Вставить("Ядро", ИмяВременнойПапки + "\docProps\core.xml");
		ДанныеФайла.Вставить("Стили", ИмяВременнойПапки + "\word\styles.xml");
		ДанныеФайла.Вставить("Сноски", ИмяВременнойПапки + "\word\footnotes.xml");
		ДанныеФайла.Вставить("КонцевыеСноски", ИмяВременнойПапки + "\word\endnotes.xml");
		ДанныеФайла.Вставить("Типы", ИмяВременнойПапки + "\[Content_Types].xml");
		ДанныеФайла.Вставить("СвязиДокумента", ИмяВременнойПапки + "\word\_rels\document.xml.rels");
		ДанныеФайла.Вставить("ВложенныеФайлы", ИмяВременнойПапки + "\word\media");
		ДанныеФайла.Вставить("НижнийКолонтитул1", ИмяВременнойПапки + "\word\footer1.xml");
		ДанныеФайла.Вставить("НижнийКолонтитул2", ИмяВременнойПапки + "\word\footer2.xml");
		ДанныеФайла.Вставить("НижнийКолонтитул3", ИмяВременнойПапки + "\word\footer3.xml");
		ДанныеФайла.Вставить("ВерхнийКолонтитул1", ИмяВременнойПапки + "\word\header1.xml");
		ДанныеФайла.Вставить("ВерхнийКолонтитул2", ИмяВременнойПапки + "\word\header2.xml");
		ДанныеФайла.Вставить("ВерхнийКолонтитул3", ИмяВременнойПапки + "\word\header3.xml");
		
		УдалитьФайлы(ШаблонПуть);
		
		Возврат ДанныеФайла;
	КонецФункции
	
	// Функция - запаковывает docx и помещает в хранилище
	// Параметры:
	//  ДанныеФайла - структура, содержит пути к частям файла
	// Результат:
	//  АдресХранилища - содержащая адрес файла.
	Функция ЗапаковатьШаблонDocx(ДанныеФайла, ЭлементДанныхЗамены = Неопределено)
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("docx");
		
		ZipФайл = Новый ЗаписьZipФайла(ИмяВременногоФайла);
		ZipФайл.Добавить(ДанныеФайла.ИмяВременнойПапки + "\*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ZipФайл.Записать();
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВремяИзменения",Файл.ПолучитьВремяИзменения());
		ПараметрыФайла.Вставить("УниверсальноеВремяИзменения",Файл.ПолучитьУниверсальноеВремяИзменения());
		ПараметрыФайла.Вставить("Размер",Файл.Размер());
		ПараметрыФайла.Вставить("Расширение",Файл.Расширение);
		ПараметрыФайла.Вставить("ИмяБезРасширения",Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("АдресХранилища",АдресХранилища);
		Если ЭлементДанныхЗамены <> Неопределено Тогда
			Если ЗначениеЗаполнено(ЭлементДанныхЗамены.ИмяФайла) Тогда
				ПараметрыФайла.Вставить("ИмяФайлаДляПользователя", ЭлементДанныхЗамены.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
		УдалитьФайлы(ДанныеФайла.ИмяВременнойПапки);
		
		Возврат ПараметрыФайла;
		
	КонецФункции
	
	
	//////////////////////////////////////////////////////////////////////////////////
	// РАЗБОРКА XML.
	
	// Функция - Таблицу значений предназначенную для последовательной записи тегов.
	//
	Функция ТаблицаЗначенийТеги()
		
		ТЗТеги = Новый ТаблицаЗначений;
		ТЗТеги.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
		ТЗТеги.Колонки.Добавить("ТипУзла");
		ТЗТеги.Колонки.Добавить("Атрибуты");
		ТЗТеги.Колонки.Добавить("Текст",Новый ОписаниеТипов("Строка"));
		
		Возврат ТЗТеги
	КонецФункции
	
	// Функция - получить атрибуты тега
	// ЧтениеXML - <Тип.ЧтениеXML>
	// Результат - <Тип.Соответствие>.
	Функция ПолучитьАтрибуты(ЧтениеXML)
		
		Атрибуты = Новый Соответствие;
		Для СчетчикАтрибутов = 0 по ЧтениеXML.КоличествоАтрибутов() - 1 Цикл
			Атрибуты.Вставить(ЧтениеXML.ИмяАтрибута(СчетчикАтрибутов),ЧтениеXML.ЗначениеАтрибута(СчетчикАтрибутов));
		КонецЦикла;
		Возврат Атрибуты
		
	КонецФункции
	
	// Процедура - Добавить тег в таблицу
	// ЧтениеXML - <Тип.ЧтениеXML>
	// Теги - <Тип.ТаблицаЗначений> из ТаблицаЗначенийТеги().
	Процедура ДобавитьТегиВТаблицу(ЧтениеXML,Теги)
		
		Строка = Теги.Добавить();
		Строка.ТипУзла  = ЧтениеXML.ТипУзла;
		Строка.Имя = ЧтениеXML.Имя;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  //Определяем начало элемента
			Строка.Атрибуты = ПолучитьАтрибуты(ЧтениеXML);
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
			Строка.Атрибуты = ПолучитьАтрибуты(ЧтениеXML);
			Строка.Текст = ЧтениеXML.Значение;
		КонецЕсли ;
		
	КонецПроцедуры
	
	//////////////////////////////////////////////////////////////////////////////////
	// СБОРКА XML.
	
	// Процедура - Добавить тег в таблицу
	// Параметры
	//   ЗаписьXML - <Тип.ЗаписьXML>
	//   Теги - <Тип.ТаблицаЗначений> из ТаблицаЗначенийТеги().
	Процедура ДобавитьТегиВXML(ЗаписьXML,Тег)
		
		Если Тег.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(Тег.Имя);
			Атрибуты  = Тег.Атрибуты;
			Для каждого Атрибут Из Атрибуты Цикл
				ЗаписьXML.ЗаписатьАтрибут(Атрибут.Ключ,Атрибут.Значение);
			КонецЦикла;
		ИначеЕсли Тег.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
		ИначеЕсли Тег.ТипУзла = ТипУзлаXML.Текст Тогда
			ЗаписьXML.ЗаписатьТекст(Тег.Текст);
			Атрибуты  = Тег.Атрибуты;
			Для каждого Атрибут Из Атрибуты Цикл
				ЗаписьXML.ЗаписатьАтрибут(Атрибут.Ключ,Атрибут.Значение);
			КонецЦикла;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция - соединяет разорванные блоками текста шаблоны
	// Параметры
	//   Теги - <Тип.ТаблицаЗначений> из ТаблицаЗначенийТеги()
	//   ПараметрыЗаполнения - <Тип.ТаблицаЗначений> из ГЗ_Сервер.ПустыеНастройкиОтчета()
	// Результат - <Тип.ТаблицаЗначений> из ТаблицаЗначенийТеги().
	Функция СоединитьШаблоны(Теги,ПараметрыЗаполнения)
		
		Результат = Теги.Скопировать();
		Результат.Колонки.Добавить("Номер");
		
		Номер = 0;
		Для каждого Тег Из Результат Цикл
			Номер = Номер + 1;
			Тег.Номер = Номер;
		КонецЦикла;
		
		Результат.Сортировать("Номер Убыв");
		
		Текст = "";
		
		
		ТЗСтроки = Новый Массив;
		НомерСимволаКонец = 0;
		
		// В процедуре ЭтоТегПараметровТекста содержаться теги которые не должны приводить к разрыву шаблона.
		// Если между левым и правым разделителем, в тексте есть такие теги, то строка собирается в место,
		// где встретился левый разделитель из остальных мест строка вырезается.
		
		ТекстКОбработке ="";
		Для каждого Тег Из Результат Цикл
			Если Тег.ТипУзла = ТипУзлаXML.Текст Тогда
				СтрокаДобавлена = Ложь;
				ТекстКОбработке = Тег.Текст;
				Для п = 1 по СтрДлина(ТекстКОбработке) Цикл
					НомерСимвола = СтрДлина(ТекстКОбработке) - п + 1;
					Символ = Сред(ТекстКОбработке, НомерСимвола,1);
					
					Если Символ =  ПараметрыЗаполнения.РазделительЛевый Тогда
						Пока ТЗСтроки.Количество() Цикл
							Если ТЗСтроки[0] <> Тег Тогда
								Пока ТЗСтроки.Количество() Цикл
									СтрокаТЗСтроки = ТЗСтроки[ТЗСтроки.Количество()-1];
									Если ТЗСтроки.Количество() = 1 Тогда
										Тег.Текст = Тег.Текст + Лев(СтрокаТЗСтроки.Текст,НомерСимволаКонец);
										СтрокаТЗСтроки.Текст = 
										Прав(СтрокаТЗСтроки.Текст,СтрДлина(СтрокаТЗСтроки.Текст) - НомерСимволаКонец);
									Иначе
										Тег.Текст = Тег.Текст + СтрокаТЗСтроки.Текст;
										СтрокаТЗСтроки.Текст = "";
									КонецЕсли;
									ТЗСтроки.Удалить(ТЗСтроки.Количество()-1);
								КонецЦикла;
							Иначе
								Прервать;
							КонецЕсли;
						КонецЦикла;
						ТЗСтроки.Очистить();
						НомерСимволаКонец = 0;
					КонецЕсли;
					
					Если Символ =  ПараметрыЗаполнения.РазделительПравый Тогда
						ТЗСтроки.Добавить(Тег);
						НомерСимволаКонец = НомерСимвола;
						СтрокаДобавлена = Истина;
					КонецЕсли;
					
				КонецЦикла;
				Если НомерСимволаКонец <> 0 И НЕ СтрокаДобавлена Тогда
					ТЗСтроки.Добавить(Тег);
				КонецЕсли;
			ИначеЕсли ЭтоТегПараметровТекста(Тег.Имя) ИЛИ НомерСимволаКонец = 0  Тогда
				Продолжить;
			Иначе
				ТЗСтроки.Очистить();
				Если НомерСимволаКонец <> 0 Тогда
					Сообщить(Тег.Имя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Результат.Сортировать("Номер");
		
		Возврат Результат
		
	КонецФункции
	
	// Функция - заполняет шаблоны в том числе в таблицах
	// Параметры
	//   Теги - <Тип.ТаблицаЗначений> из ТаблицаЗначенийТеги()
	//   ПараметрыЗаполнения - <Тип.ТаблицаЗначений> из ГЗ_Сервер.ПустыеНастройкиОтчета()
	//   ШаблоныКЗамене - <Тип.ТаблицаЗначений> из колонки "ИмяПараметраВWord", "Результат" - тип строка
	// Результат - <Тип.ТаблицаЗначений> из ТаблицаЗначенийТеги().
	Функция ЗаполнитьШаблоны(Теги,ПараметрыЗаполнения,ШаблоныКЗамене)
		
		ФлСтрокаТаблицы = Ложь;
		ФлКолонкаОтработана = Ложь;
		Результат = ТаблицаЗначенийТеги();
		КолВоКолонокВСтроке = 0;
		ТаблицаСтрокКДобавлению = Новый ТаблицаЗначений;
		ТегиПоследнейСтроки = ТаблицаЗначенийТеги();
		ТегиПоследнейСтроки.Колонки.Добавить("Колонка", Новый ОписаниеТипов("Строка"));
		
		КУдалению = Новый Массив;
		
		ФлЭтоПараграф = Ложь;
		ТегиПоследнегоПараграфа = ТаблицаЗначенийТеги();
		ПараграфыКДобавлению = Новый Массив;
		
		Для каждого Тег Из Теги Цикл
			РезультатСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(РезультатСтрока,Тег);
			
			// Начало Таблицы
			// Записываем теги последней строки в "ТаблицаСтрокКДобавлению" на случай наличия шаблона массива.
			Если РезультатСтрока.Имя = ТегСтрокаТаблицы() И РезультатСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТаблицаСтрокКДобавлению = Новый ТаблицаЗначений;
				ТегиПоследнейСтроки.Очистить();
				КолВоКолонокВСтроке = 0;
				ФлСтрокаТаблицы = Истина;
			КонецЕсли;
			
			Если РезультатСтрока.Имя = ТегТаблица() И РезультатСтрока.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ФлСтрокаТаблицы = Ложь;
			КонецЕсли;
			
			// Считаем колонки последней строки.
			Если РезультатСтрока.Имя = ТегКолонкаТаблицы() И РезультатСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				КолВоКолонокВСтроке = КолВоКолонокВСтроке + 1;
				ТаблицаСтрокКДобавлению.Колонки.Добавить("Колонка" + КолВоКолонокВСтроке,Новый ОписаниеТипов("Строка,Структура"));
				ФлКолонкаОтработана = Ложь;
			КонецЕсли;
			
			Если ФлСтрокаТаблицы Тогда
				
				ТегПоследнейСтроки = ТегиПоследнейСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(ТегПоследнейСтроки, Тег);
				
				// Если в колонке таблицы больше чем один строковый параграф
				// Данные заносятся только в первый.
				Если ТегПоследнейСтроки.ТипУзла = ТипУзлаXML.Текст И НЕ ФлКолонкаОтработана Тогда
					ТегПоследнейСтроки.Текст = "Колонка" + КолВоКолонокВСтроке;
					ФлКолонкаОтработана = Истина;
				Иначе
					ТегПоследнейСтроки.Текст = "";
				КонецЕсли;
				
				//А1 Начало - добавляем текст во все теги, нужно для объединения ячеек
				Если ТегПоследнейСтроки.Имя = "w:trPr" Тогда
					Если ТегПоследнейСтроки.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						НеДобавлятьКолонку = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НеДобавлятьКолонку = Истина Тогда
					ТегПоследнейСтроки.Колонка = "";
				ИначеЕсли ТегПоследнейСтроки.Имя = ТегСтрокаТаблицы() Тогда 
					ТегПоследнейСтроки.Колонка = "";
				Иначе
					ТегПоследнейСтроки.Колонка = "Колонка" + КолВоКолонокВСтроке;
				КонецЕсли;
				
				Если ТегПоследнейСтроки.Имя = "w:trPr" Тогда
					Если ТегПоследнейСтроки.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
						НеДобавлятьКолонку = Ложь;
					КонецЕсли;
				КонецЕсли;
				//А1 Конец
			КонецЕсли;
			
			//А1 - если в строке нашлись шаблоны, то удаляем эту строку и заново записываем с заполнением по шаблонам.
			Если РезультатСтрока.Имя = ТегСтрокаТаблицы() И
				РезультатСтрока.ТипУзла = ТипУзлаXML.КонецЭлемента И
				ТаблицаСтрокКДобавлению.Количество() Тогда
				КУдалению = А1Э_Массивы.Последний(Результат);
				Пока НЕ (КУдалению.Имя = ТегСтрокаТаблицы() И КУдалению.ТипУзла = ТипУзлаXML.НачалоЭлемента) Цикл //Ищем начало строки, удаляем все по пути.
					Результат.Удалить(КУдалению);
					КУдалению = А1Э_Массивы.Последний(Результат);
				КонецЦикла;
				Результат.Удалить(КУдалению); //Удаляем само начало строки.
				Для каждого СтрокаКДобавлению из ТаблицаСтрокКДобавлению Цикл
					Для каждого ТегСтрокиКДобавлению из ТегиПоследнейСтроки Цикл
						//А1 Начало
						Текст = Неопределено;
						Если ТегСтрокиКДобавлению.Колонка <> "" Тогда
							ДанныеЯчейки = СтрокаКДобавлению[ТегСтрокиКДобавлению.Колонка];
							Если ТипЗнч(ДанныеЯчейки) = Тип("Структура") Тогда //Есть дополнительные параметры
								Если А1Э_Общее.ЗначениеСвойства(ДанныеЯчейки, "НеВыводить", Ложь) = Истина Тогда Продолжить; КонецЕсли;
								Текст = А1Э_Общее.ЗначениеСвойства(ДанныеЯчейки, "Текст", "");
								Если ТегСтрокиКДобавлению.ТипУзла = ТипУзлаXML.КонецЭлемента И ТегСтрокиКДобавлению.Имя = "w:tcPr" Тогда
									Если А1Э_Общее.Свойство(ДанныеЯчейки, "ПараметрыЯчейки") Тогда
										Для Каждого Атрибут Из ДанныеЯчейки.ПараметрыЯчейки Цикл
											НовыйТэг = Результат.Добавить();
											ЗаполнитьЗначенияСвойств(НовыйТэг, Атрибут);
											НовыйТэг.ТипУзла = ТипУзлаXML[Атрибут.ТипУзла];
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли
						КонецЕсли;	
						Если Текст = Неопределено И ТегСтрокиКДобавлению.Текст <> "" Тогда 
							Текст = СтрокаКДобавлению[ТегСтрокиКДобавлению.Текст] 
						КонецЕсли; 
						//А1 Конец
						РезультатСтрока = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(РезультатСтрока, ТегСтрокиКДобавлению);
						Если РезультатСтрока.ТипУзла = ТипУзлаXML.Текст И Найти(РезультатСтрока.Текст, "Колонка") Тогда
							РезультатСтрока.Текст = Текст;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			// Конец Таблицы.
			
			// Начало Параграфы
			// Записываем теги последнего параграфа.
			Если РезультатСтрока.Имя = ТегПараграф() И РезультатСтрока.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ПараграфыКДобавлению = Новый Массив;
				ТегиПоследнегоПараграфа.Очистить();
				ФлЭтоПараграф = Истина;
			КонецЕсли;
			
			Если ФлЭтоПараграф Тогда
				ТегПоследнегоПараграфа = ТегиПоследнегоПараграфа.Добавить();
				ЗаполнитьЗначенияСвойств(ТегПоследнегоПараграфа,Тег);
			КонецЕсли;
			
			Если РезультатСтрока.Имя = ТегПараграф() И РезультатСтрока.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Для каждого ПараграфКДобавлению из ПараграфыКДобавлению Цикл
					ТекстПараграфа = ПараграфКДобавлению;
					Для каждого ТегПараграфКДобавлению из ТегиПоследнегоПараграфа Цикл
						РезультатСтрока = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(РезультатСтрока,ТегПараграфКДобавлению);
						Если РезультатСтрока.ТипУзла = ТипУзлаXML.Текст  Тогда
							РезультатСтрока.Текст = ТекстПараграфа;
							ТекстПараграфа = "";
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				ФлЭтоПараграф = Ложь;
			КонецЕсли;
			// Конец Параграфы.
			
			Если РезультатСтрока.ТипУзла = ТипУзлаXML.Текст  Тогда
				
				ТекстКОбработке = РезультатСтрока.Текст;
				
				Для СчП = 1 по СтрДлина(ТекстКОбработке) Цикл
					Если Сред(ТекстКОбработке, СчП, 1) =  ПараметрыЗаполнения.РазделительЛевый Тогда
						НомерСимволаНачало = СчП;
					КонецЕсли;
					Если Сред(ТекстКОбработке, СчП, 1) =  ПараметрыЗаполнения.РазделительПравый Тогда
						
						ШаблонКЗамене = Сред(ТекстКОбработке, НомерСимволаНачало, СчП - НомерСимволаНачало + 1);
						ШаблонКПоиску = Сред(ТекстКОбработке, НомерСимволаНачало + 1, СчП - НомерСимволаНачало - 1);
						
						МассивСтрок = ШаблоныКЗамене.НайтиСтроки(Новый Структура("ИмяПараметраВWord", ШаблонКПоиску));
						
						Если МассивСтрок.Количество() Тогда
							
							ТекстРезультат = МассивСтрок[0].Результат;
							Если ТипЗнч(МассивСтрок[0].Результат) = Тип("Массив") Тогда
								Если ФлСтрокаТаблицы И (МассивСтрок[0].Результат.Количество() > 1) Тогда
										
									//Все строки заносим в строки к добавлению, исходная ТЧ будет удалена
									Для Сч = 0 по МассивСтрок[0].Результат.Количество() - 1 Цикл
										Если ТаблицаСтрокКДобавлению.Количество() <= Сч Тогда
											ТаблицаСтрокКДобавлению.Добавить();
										КонецЕсли;
										ТаблицаСтрокКДобавлению[Сч]["Колонка" + КолВоКолонокВСтроке] = МассивСтрок[0].Результат[Сч];
									КонецЦикла;
									
								Иначе
									ТекстРезультат ="";
									
									Для Каждого ЭлементМассива из МассивСтрок[0].Результат Цикл
										ТекстРезультат = ТекстРезультат + ?(ТекстРезультат ="","","; ") + ЭлементМассива;
									КонецЦикла;
									
								КонецЕсли;
							КонецЕсли;
							
							ТекстКОбработке = СтрЗаменить(ТекстКОбработке, ШаблонКЗамене, ТекстРезультат);
						Иначе
							
							Сообщить("Параметр:" + ШаблонКЗамене + "  не указан в настройке.");
							ТекстКОбработке = СтрЗаменить(ТекстКОбработке,ШаблонКЗамене,"");
							
						КонецЕсли;
						
						Если НомерСимволаНачало <> 0 Тогда
							СчП = НомерСимволаНачало;
							НомерСимволаНачало = 0;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				// Добавим сведения для вставки параграфов вместо символов перевода строки.
				МассивСПереводамиСтрок = А1Э_Строки.Разделить(ТекстКОбработке,Символы.ПС);
				Если МассивСПереводамиСтрок.Количество() Тогда
					РезультатСтрока.Текст = МассивСПереводамиСтрок[0];
				Иначе
					РезультатСтрока.Текст = ТекстКОбработке;
				КонецЕсли;
				Для СчП = 1 по МассивСПереводамиСтрок.Количество() -1  Цикл
					ПараграфыКДобавлению.Добавить(МассивСПереводамиСтрок[СчП]);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	//////////////////////////////////////////////////////////////////////////////////
	// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.
	
	// Функция - заполняет шаблоны в файле шаблоне документа Word.
	//
	Функция ОбработатьФайлDocx(ФайлШаблона, ПараметрыЗаполнения, ШаблоныКЗамене) Экспорт
		
		
		ДанныеФайла = РаспаковатьШаблонDocx(ФайлШаблона);
		Если ДанныеФайла = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Переместили данные документа во временный файл.
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		ВременныйФайлКопия = ПолучитьИмяВременногоФайла("xml");
		КопироватьФайл(ДанныеФайла.Текст,ВременныйФайлКопия);
		УдалитьФайлы(ДанныеФайла.Текст);
		
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ВременныйФайлКопия);
		ЧтениеXML.ИгнорироватьПробелы = Ложь;
		
		// Записываем новые данные документа.
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ДанныеФайла.Текст,ЧтениеXML.КодировкаXML);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Теги = ТаблицаЗначенийТеги();
		Пока ЧтениеXML.Прочитать() Цикл
			ДобавитьТегиВТаблицу(ЧтениеXML,Теги);
		КонецЦикла;
		
		// Обработать данные xml в таблице значений
		// Соединить разорванные строки шаблонов.
		ТегиСШаблонами = СоединитьШаблоны(Теги,ПараметрыЗаполнения);
		
		// Заполнить строки значениями.
		ТегиСЗаполненнымиШаблонами = ЗаполнитьШаблоны(ТегиСШаблонами,ПараметрыЗаполнения,ШаблоныКЗамене);
		
		// Перекинуть данные из таблицы значений в xml.
		Для каждого Тег Из ТегиСЗаполненнымиШаблонами Цикл
			ДобавитьТегиВXML(ЗаписьXML,Тег);
		КонецЦикла;
		ЗаписьXML.Закрыть();
		
		Возврат ЗапаковатьШаблонDocx(ДанныеФайла);
		
	КонецФункции
	
	Функция ПроверитьРазобраннуюТаблицу(ТегиСЗаполненнымиШаблонами)
		
		Тз = ТегиСЗаполненнымиШаблонами.Скопировать();
		Тз.колонки.Добавить("КолвоОткрытий",Новый ОписаниеТипов("Число"));
		Тз.колонки.Добавить("КолвоЗакрытий",Новый ОписаниеТипов("Число"));
		Для каждого Строки Из Тз Цикл
			Если Строки.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Строки.КолвоОткрытий = 1;
			Иначе
				Строки.КолвоЗакрытий = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Тз.свернуть("Имя","КолвоОткрытий,КолвоЗакрытий");
		Для каждого Строки Из Тз Цикл
			Если Строки.КолвоОткрытий>Строки.КолвоЗакрытий Тогда
				Возврат Строки.имя;
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
#КонецЕсли
#КонецОбласти 

#КонецОбласти

#Область Устарело
#Если Клиент Тогда
	
	// Устарело, рекомендуется использовать Напечатать2()
	//
	// Параметры:
	//  ИмяМакета				 - Строка - полное имя макета (включая путь). 
	//  ДанныеПечати			 - Строка,Соотвесттвие,Массив - полное имя серверной функции, которая принимает массив объектов и возвращает данные печати, или эти уже полученные данные. 
	//  ОбъектыПечати            - Массив - массив ссылок на объекты печати
	//  ИмяРезультата			 - Строка - имя файла, который будет передан пользователю. 
	//  Архивировать			 - Булево - если Истина, то результат будет выдан в качестве скачиваемого архива. Если Ложь, то результат будет показан пользователю файлом.
	//  ДополнительныеПараметры  - Структура - Может содержать ключи "РазделительЛевый", "РазделительПравый" (по умолчанию "<", ">") 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция Напечатать(ИмяМакета, ДанныеПечати, ОбъектыПечати, ИмяРезультата = "Документ Word", Архивировать = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
		Если ТипЗнч(ДанныеПечати) = Тип("Строка") Тогда
			ДанныеЗамены = А1Э_ОбщееСервер.РезультатФункции(ДанныеПечати, ОбъектыПечати);
		Иначе
			ДанныеЗамены = ДанныеПечати;
		КонецЕсли;
		Если ДанныеЗамены = Неопределено Тогда
			Сообщить("Не удалось сформировать данные для печати!");
			Возврат Неопределено;
		КонецЕсли;
		А1Э_Ворд.ВывестиДанныеЧерезХМЛ(ИмяМакета, ДанныеЗамены, ИмяРезультата, Архивировать, ДополнительныеПараметры);
	КонецФункции

#КонецЕсли	
#КонецОбласти

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_Ворд";	
КонецФункции 