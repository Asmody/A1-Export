Функция ВсеДублиСправочников() Экспорт
	ВсеДубли = Новый Структура;
	
	ПрикладныеНастройки = Новый Соответствие;
	А1Э_Механизмы.ВыполнитьМеханизмыОбработчика("А1Э_НастройкиПоискаДублей", ПрикладныеНастройки);
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		ПрикладныеНастройкиСправочника = ПрикладныеНастройки[Справочник.ПолноеИмя()];
		Если ПрикладныеНастройкиСправочника <> Неопределено Тогда
			Если ПрикладныеНастройкиСправочника = Ложь Тогда Продолжить; КонецЕсли;
			СовпадающиеРеквизиты = ПрикладныеНастройкиСправочника; 
		Иначе
			Если Справочник.ДлинаНаименования = 0 Тогда Продолжить; КонецЕсли;
			
			Если Справочник.Владельцы.Количество() > 0 Тогда
				СовпадающиеРеквизиты = "Наименование,Владелец";
			Иначе
				СовпадающиеРеквизиты = "Наименование";
			КонецЕсли;
		КонецЕсли;
		Дубли = НайтиДублиБезМестИспользования(Справочник.ПолноеИмя(), СовпадающиеРеквизиты);
		ВсеДубли.Вставить(Справочник.Имя, Дубли);
	КонецЦикла;
	Возврат ВсеДубли;
КонецФункции 

Функция ВсеЗаменыУдаленияСправочников() Экспорт
	ВсеДублиСтруктура = ВсеДублиСправочников();
	ВсеДубли = Новый Массив;
	Для Каждого Пара Из ВсеДублиСтруктура Цикл
		Для Каждого ГруппаДублей Из Пара.Значение Цикл
			ВсеДубли.Добавить(ГруппаДублей);
		КонецЦикла;
	КонецЦикла;
	ДобавитьМестаИспользования(ВсеДубли);
	КЗамене = Новый Соответствие;
	КУдалению = Новый Массив;
	Для Каждого ГруппаДублей Из ВсеДубли Цикл
		Для Каждого Пара Из ГруппаДублей.Дубли Цикл
			Если Пара.Ключ = ГруппаДублей.Основной Тогда Продолжить; КонецЕсли;
			Если Пара.Значение.МестаИспользования.Количество() = 0 Тогда
				КУдалению.Добавить(Пара.Ключ);
			КонецЕсли;
			КЗамене.Вставить(Пара.Ключ, ГруппаДублей.Основной);
		КонецЦикла;
	КонецЦикла;
	Возврат А1Э_Структуры.Создать(
	"КЗамене", КЗамене,
	"КУдалению", КУдалению,
	);
КонецФункции

Функция ЗаменитьСсылки(СоответствиеДублей) Экспорт
	МассивСсылокКЗамене = Новый Массив;
	Для Каждого Пара Из СоответствиеДублей Цикл
		МассивСсылокКЗамене.Добавить(Пара.Ключ);
	КонецЦикла;
	ТочныеМестаИспользования = ТочныеМестаИспользования(МассивСсылокКЗамене);
	Ошибки = ЗаменитьДублиПоТочнымМестамИспользования(ТочныеМестаИспользования, СоответствиеДублей);
	Возврат Ошибки;
КонецФункции

Функция НайтиДубли(ИмяМетаданных, Знач СовпадающиеРеквизиты, Знач Параметры = Неопределено) Экспорт
	Дубли = НайтиДублиБезМестИспользования(ИмяМетаданных, СовпадающиеРеквизиты, Параметры); 
	ДобавитьМестаИспользования(Дубли);
	Возврат Дубли;
КонецФункции

Функция НайтиДублиБезМестИспользования(ИмяМетаданных, Знач СовпадающиеРеквизиты, Знач Параметры = Неопределено) Экспорт 
	СовпадающиеРеквизиты = А1Э_Массивы.Массив(СовпадающиеРеквизиты);
	ТаблицаДублей = ТаблицаДублей(ИмяМетаданных, СовпадающиеРеквизиты, Параметры);
	
	МассивКоллекцийДублей = Новый Массив;
	ГруппаДублей = НовыйГруппаДублей(СовпадающиеРеквизиты);
	Для Каждого Строка Из ТаблицаДублей Цикл
		Если Не КлючДублированияСоответствует(ГруппаДублей.Ключ, Строка) Тогда
			ГруппаДублей = НовыйГруппаДублей(СовпадающиеРеквизиты, Строка);
			МассивКоллекцийДублей.Добавить(ГруппаДублей);
		КонецЕсли;
		ГруппаДублей.Дубли.Вставить(Строка.Ссылка, Новый Структура);
	КонецЦикла;
	
	Возврат МассивКоллекцийДублей;
КонецФункции

Функция ДобавитьМестаИспользования(Дубли)
	МассивДублей = Новый Массив;
	Для Каждого ГруппаДублей Из Дубли Цикл
		Для Каждого Пара Из ГруппаДублей.Дубли Цикл
			МассивДублей.Добавить(Пара.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	МестаИспользования = НайтиПоСсылкам(МассивДублей);
	СоответствиеИспользования = А1Э_ТаблицыЗначений.РазбитьВТаблицыПоКолонке(МестаИспользования, "Ссылка");
	Для Каждого ГруппаДублей Из Дубли Цикл
		Для Каждого Пара Из ГруппаДублей.Дубли Цикл
			МестаИспользованияСсылки = СоответствиеИспользования[Пара.Ключ];
			Если МестаИспользованияСсылки = Неопределено Тогда
				Пара.Значение.Вставить("МестаИспользования", МестаИспользования.СкопироватьКолонки());
			Иначе
				Пара.Значение.Вставить("МестаИспользования", МестаИспользованияСсылки);
			КонецЕсли;
		КонецЦикла;
		КоличествоОсновного = -1; 
		Для Каждого Пара Из ГруппаДублей.Дубли Цикл
			Если Пара.Значение.МестаИспользования.Количество() > КоличествоОсновного Тогда
				КоличествоОсновного = Пара.Значение.МестаИспользования.Количество();
				ГруппаДублей.Основной = Пара.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Дубли;
КонецФункции

Функция ТаблицаДублей(ИмяМетаданных, Знач СовпадающиеРеквизиты, Параметры) Экспорт
	СовпадающиеРеквизиты = А1Э_Массивы.Массив(СовпадающиеРеквизиты);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.А1Э_Реквизиты КАК А1Э_Реквизиты,
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.А1Э_Реквизиты КАК А1Э_Реквизиты,
	|		КОЛИЧЕСТВО(Таблица.Ссылка) КАК КоличествоСсылок
	|	ИЗ
	|		ИмяМетаданных КАК Таблица
	|	ГДЕ
	|		&Отборы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.А1Э_Реквизиты
	|	
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(Таблица.Ссылка) > 1) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяМетаданных КАК ТаблицаДокумента
	|		ПО (&УсловияСоединения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.А1Э_Реквизиты";
	РеквизитыЗапроса = Новый Массив;
	ГруппировкиЗапроса = Новый Массив;
	УсловияСоединения = Новый Массив;
	Для Каждого Реквизит Из СовпадающиеРеквизиты Цикл
		РеквизитыЗапроса.Добавить("Таблица." + Реквизит + " КАК " + Реквизит);
		ГруппировкиЗапроса.Добавить("Таблица." + Реквизит);
		УсловияСоединения.Добавить("Таблица." + Реквизит + " = ТаблицаДокумента." + Реквизит);
	КонецЦикла;
	А1Э_Строки.Подставить(Запрос.Текст, "ИмяМетаданных", ИмяМетаданных);
	А1Э_Строки.Подставить(Запрос.Текст, "Таблица.А1Э_Реквизиты КАК А1Э_Реквизиты", СтрСоединить(РеквизитыЗапроса, "," + Символы.ПС + Символы.Таб));
	А1Э_Строки.Подставить(Запрос.Текст, "Таблица.А1Э_Реквизиты", СтрСоединить(ГруппировкиЗапроса, "," + Символы.ПС + Символы.Таб));
	А1Э_Строки.Подставить(Запрос.Текст, "&УсловияСоединения", СтрСоединить(УсловияСоединения, Символы.ПС + Символы.Таб + "И ")); 
	
	ОбъектМетаданных = А1Э_Метаданные.ОбъектМетаданных(ИмяМетаданных);
	Отборы = Новый Массив;
	Сч = 0;
	Если НЕ А1Э_Структуры.ЗначениеСвойства(Параметры, "СчитатьПустыеДублями", Ложь) Тогда
		Для Каждого Реквизит Из СовпадающиеРеквизиты Цикл
			ПустоеЗначение = А1Э_СтандартныеТипы.ПустоеЗначение(А1Э_Метаданные.ОписаниеТипаПоля(ИмяМетаданных, Реквизит));
			Отборы.Добавить("Таблица." + Реквизит + " <> &Параметр" + Сч);
			Запрос.УстановитьПараметр("Параметр" + Сч, ПустоеЗначение);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	А1Э_Строки.Подставить(Запрос.Текст, "&Отборы", ?(Отборы.Количество() = 0, "ИСТИНА", СтрСоединить(Отборы, Символы.ПС + Символы.Таб + "И ")));
	ТаблицаДублей = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДублей;
КонецФункции

#Область ПоискМестИспользования

Функция ТочныеМестаИспользования(МассивСсылок) Экспорт 
	СоответствиеТипов = Новый Соответствие;
	Для Каждого Ссылка Из МассивСсылок Цикл
		Массив = СоответствиеТипов[ТипЗнч(Ссылка)];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			СоответствиеТипов.Вставить(ТипЗнч(Ссылка), Массив);
		КонецЕсли;
		Массив.Добавить(Ссылка);			
	КонецЦикла;
	ИтоговаяТаблица = НовыйТаблицаТочныхМестИспользования();	
	Для Каждого Пара Из СоответствиеТипов Цикл
		Таблица = ТочныеМестаИспользованияОднотипныхСсылок(Пара.Значение);
		Для Каждого Строка Из Таблица Цикл
			СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, Строка);
		КонецЦикла;
	КонецЦикла;
	Возврат ИтоговаяТаблица;
КонецФункции

Функция ТочныеМестаИспользованияОднотипныхСсылок(Знач МассивСсылок) Экспорт
	МассивСсылок = А1Э_Массивы.Массив(МассивСсылок);
	Тип = ТипЗнч(МассивСсылок[0]);
	
	ТекстЗапроса = ТекстЗапросаСтандартногоПоиска(Тип);
	Если ТекстЗапроса = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТекстЗапросаСтандартногоПоиска(Тип) Экспорт 
	МестаПоиска = Новый Массив;
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		ДобавитьМестаПоискаВОбъекте(МестаПоиска, Тип, ОбъектМетаданных); 
	КонецЦикла;
	Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		ДобавитьМестаПоискаВОбъекте(МестаПоиска, Тип, ОбъектМетаданных); 
	КонецЦикла;
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		ДобавитьМестаПоискаВРегистреСведенийНакопления(МестаПоиска, Тип, ОбъектМетаданных);
	КонецЦикла;
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыНакопления Цикл
		ДобавитьМестаПоискаВРегистреСведенийНакопления(МестаПоиска, Тип, ОбъектМетаданных);
	КонецЦикла;
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
		ДобавитьМестаПоискаВРегистреБухгалтерии(МестаПоиска, Тип, ОбъектМетаданных);
	КонецЦикла;
	
	МассивЧастейЗапроса = Новый Массив;
	Для Каждого МестоПоиска Из МестаПоиска Цикл
		ТекстСтандартногоЗапроса = ТекстСтандартногоЗапросаКМестуПоиска(МестоПоиска);
		Если ТекстСтандартногоЗапроса = Неопределено Тогда Продолжить; КонецЕсли;//Регистры бухгалтерии и независимые ре
		МассивЧастейЗапроса.Добавить(ТекстСтандартногоЗапроса);
	КонецЦикла;
	
	Если МассивЧастейЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат А1Э_Запросы.Объединить(МассивЧастейЗапроса); 
КонецФункции

Функция ТекстСтандартногоЗапросаКМестуПоиска(МестоПоиска)  
	//Поиск в независимых регистрах сведений осуществляется отдельно.
	Если МестоПоиска.ТипОбъекта = "РегистрСведений" Тогда
		НаборЗаписей = РегистрыСведений[МестоПоиска.ИмяОбъекта].СоздатьНаборЗаписей();
		Если НЕ А1Э_Общее.Свойство(НаборЗаписей.Отбор, "Регистратор") Тогда Возврат Неопределено; КонецЕсли;
	КонецЕсли;	
	
	Текст = 
	"ВЫБРАТЬ
	|	""&ИмяТипаОбъекта"" КАК ТипОбъекта,
	|	""&ИмяОбъекта"" КАК Объект,
	|	""&ИмяТабличнойЧасти"" КАК ТабличнаяЧасть,
	|	""ИмяРеквизита"" КАК Реквизит,
	|	Таблица.ИмяРеквизита КАК ИскомоеЗначение,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	&Таблица_ВидСубконто КАК ВидСубконто,
	|	&Таблица_ВидДвижения КАК ЭтоДебет
	|ИЗ
	|	&ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.ИмяРеквизита В(&МассивСсылок)";
	А1Э_Строки.Подставить(Текст, "ИмяРеквизита", МестоПоиска.Реквизит);
	А1Э_Строки.Подставить(Текст, "&ИмяТипаОбъекта", МестоПоиска.ТипОбъекта);
	А1Э_Строки.Подставить(Текст, "&ИмяОбъекта", МестоПоиска.ИмяОбъекта);
	А1Э_Строки.Подставить(Текст, "&ИмяТабличнойЧасти", МестоПоиска.ТабличнаяЧасть);
	А1Э_Строки.Подставить(Текст, "&ИмяТаблицы", А1Э_Строки.Добавить(МестоПоиска.ТипОбъекта + "." + МестоПоиска.ИмяОбъекта, МестоПоиска.ТабличнаяЧасть, "."));
	
	ЭтоРегистр = А1Э_Общее.РавноОдномуИз(МестоПоиска.ТипОбъекта, "РегистрНакопления", "РегистрСведений", "РегистрБухгалтерии");
	Если ЭтоРегистр Тогда
		А1Э_Строки.Подставить(Текст, "Таблица.Ссылка КАК Ссылка", "Таблица.Регистратор КАК Ссылка");
	КонецЕсли;
	Если  МестоПоиска.ТипОбъекта = "РегистрБухгалтерии" И МестоПоиска.ТабличнаяЧасть = "Субконто" Тогда
		А1Э_Строки.Подставить(Текст, "&Таблица_ВидСубконто", "Таблица.Вид");
		А1Э_Строки.Подставить(Текст, "&Таблица_ВидДвижения", "Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)");
	Иначе	
		А1Э_Строки.Подставить(Текст, "&Таблица_ВидСубконто", """""");
		А1Э_Строки.Подставить(Текст, "&Таблица_ВидДвижения", "ЛОЖЬ");
	КонецЕсли;
	
	НетНомераСтроки = МестоПоиска.ТабличнаяЧасть = "" И НЕ ЭтоРегистр;
	Если НетНомераСтроки Тогда
		А1Э_Строки.Подставить(Текст, "Таблица.НомерСтроки", 0);
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

Функция ДобавитьМестаПоискаВОбъекте(МестаПоиска, ИскомыйТип, ОбъектМетаданных)
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ИскомыйТип) Тогда
			МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Реквизит));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ИскомыйТип) Тогда
				МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Реквизит, ТабличнаяЧасть));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Функция ДобавитьМестаПоискаВРегистреСведенийНакопления(МестаПоиска, ИскомыйТип, ОбъектМетаданных)
	Колонки = А1Э_Метаданные.КолонкиРегистра(ОбъектМетаданных);
	Для Каждого Колонка Из Колонки Цикл
		Если Колонка.Тип.СодержитТип(ИскомыйТип) Тогда
			МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Колонка));
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ДобавитьМестаПоискаВРегистреБухгалтерии(МестаПоиска, ИскомыйТип, ОбъектМетаданных)  
	Для Каждого Колонка Из ОбъектМетаданных.Измерения Цикл
		Если Колонка.Тип.СодержитТип(ИскомыйТип) Тогда
			Если Колонка.Балансовый Тогда
				МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Колонка));
			Иначе
				МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Колонка.Имя + "Дт"));
				МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Колонка.Имя + "Кт"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Колонка Из ОбъектМетаданных.Ресурсы Цикл
		Если Колонка.Тип.СодержитТип(ИскомыйТип) Тогда
			МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Колонка));
		КонецЕсли;
	КонецЦикла;
	Для Каждого Колонка Из ОбъектМетаданных.Реквизиты Цикл
		Если Колонка.Тип.СодержитТип(ИскомыйТип) Тогда
			МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, Колонка));
		КонецЕсли;
	КонецЦикла;
	//ДобавитьМестаПоискаВРегистреСведенийНакопления(МестаПоиска, ИскомыйТип, ОбъектМетаданных);
	Если НЕ ОбъектМетаданных.ПланСчетов.ВидыСубконто.Тип.СодержитТип(ИскомыйТип) Тогда Возврат Неопределено; КонецЕсли;
	
	МестаПоиска.Добавить(НовыйМестоПоиска(ОбъектМетаданных, "Значение", "Субконто"));

КонецФункции

Функция НовыйТаблицаТочныхМестИспользования()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТипОбъекта", А1Э_Строки.ОписаниеТипа(25));
	Таблица.Колонки.Добавить("Объект", А1Э_Строки.ОписаниеТипа(100));
	Таблица.Колонки.Добавить("ТабличнаяЧасть", А1Э_Строки.ОписаниеТипа(100));
	Таблица.Колонки.Добавить("Реквизит", А1Э_Строки.ОписаниеТипа(100));
	ОписаниеСсылки = Новый ОписаниеТипов;
	ОписаниеСсылки = Новый ОписаниеТипов(ОписаниеСсылки, Справочники.ТипВсеСсылки().Типы());
	ОписаниеСсылки = Новый ОписаниеТипов(ОписаниеСсылки, Документы.ТипВсеСсылки().Типы());
	ОписаниеСсылки = Новый ОписаниеТипов(ОписаниеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	ОписаниеСсылки = Новый ОписаниеТипов(ОписаниеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	Таблица.Колонки.Добавить("ИскомоеЗначение", ОписаниеСсылки);
	Таблица.Колонки.Добавить("Ссылка", ОписаниеСсылки);
	Таблица.Колонки.Добавить("НомерСтроки", А1Э_Числа.ОписаниеТипа(10));
	ОписаниеВидаСубконто = Новый ОписаниеТипов;
	ОписаниеВидаСубконто = Новый ОписаниеТипов(ОписаниеВидаСубконто, ПланыВидовХарактеристик.ТипВсеСсылки().Типы()); 
	Таблица.Колонки.Добавить("ВидСубконто", ОписаниеВидаСубконто);
	Таблица.Колонки.Добавить("ЭтоДебет", Новый ОписаниеТипов("Булево"));
	Возврат Таблица;
КонецФункции

#КонецОбласти 

#Область ЗаменаДублей

Функция ЗаменитьДублиПоТочнымМестамИспользования(ТочныеМестаИспользования, СоответствиеДублей) Экспорт
	Запрос = Новый Запрос(ТекстЗапросаЗаменыПоТочнымМестамИспользования());
	Запрос.УстановитьПараметр("ТочныеМестаИспользования", ТочныеМестаИспользования);
	ВыборкаСсылка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВсеОшибки = Новый Массив;
	Пока ВыборкаСсылка.Следующий() Цикл
		НачатьТранзакцию();
		ОшибкиПриЗамене = Новый Массив;
		ВыборкаТипОбъекта = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипОбъекта.Следующий() Цикл
			ВыборкаОбъект = ВыборкаТипОбъекта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОбъект.Следующий() Цикл
				ЭтоОбъектныеДанные = А1Э_Общее.РавноОдномуИз(ВыборкаОбъект.ТипОбъекта, "Справочник", "Документ"); 
				Если ЭтоОбъектныеДанные Тогда 
					ЗаменитьДублиВОбъекте(ВыборкаОбъект, СоответствиеДублей, ОшибкиПриЗамене);					
				Иначе //Это регистр с регистратором.
					ЗаменитьДублиВНабореЗаписей(ВыборкаОбъект, СоответствиеДублей, ОшибкиПриЗамене);
				КонецЕсли;
				Если ОшибкиПриЗамене.Количество() <> 0 Тогда Прервать; КонецЕсли;					
			КонецЦикла;
			Если ОшибкиПриЗамене.Количество() <> 0 Тогда Прервать; КонецЕсли;
		КонецЦикла;
		Если ОшибкиПриЗамене.Количество() = 0 Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
			А1Э_Массивы.Добавить(ВсеОшибки, ОшибкиПриЗамене);
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеОшибки;
КонецФункции 

Функция ТекстЗапросаЗаменыПоТочнымМестамИспользования()
	Возврат
	"ВЫБРАТЬ
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Объект КАК Объект,
	|	Таблица.ТабличнаяЧасть КАК ТабличнаяЧасть,
	|	Таблица.Реквизит КАК Реквизит,
	|	Таблица.ИскомоеЗначение КАК ИскомоеЗначение,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.ВидСубконто КАК ВидСубконто,
	|	Таблица.ЭтоДебет КАК ЭтоДебет
	|ПОМЕСТИТЬ ТочныеМестаИспользования
	|ИЗ
	|	&ТочныеМестаИспользования КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Объект КАК Объект,
	|	Таблица.ТабличнаяЧасть КАК ТабличнаяЧасть,
	|	Таблица.Реквизит КАК Реквизит,
	|	Таблица.ИскомоеЗначение КАК ИскомоеЗначение,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.ВидСубконто КАК ВидСубконто,
	|	Таблица.ЭтоДебет КАК ЭтоДебет
	|ИЗ
	|	ТочныеМестаИспользования КАК Таблица
	|ИТОГИ ПО
	|	Ссылка,
	|	ТипОбъекта,
	|	Объект,
	|	ТабличнаяЧасть";
КонецФункции

Функция ЗаменитьДублиВОбъекте(ВыборкаОбъект, СоответствиеДублей, ОшибкиПриЗамене)
	Объект = ВыборкаОбъект.Ссылка.ПолучитьОбъект();
	Объект.ОбменДанными.Загрузка = Истина;
	ВыборкаТабличнаяЧасть = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
		Если ВыборкаТабличнаяЧасть.ТабличнаяЧасть = "" Тогда
			Контейнер = Объект;
		Иначе
			Контейнер = Объект[ВыборкаТабличнаяЧасть.ТабличнаяЧасть];
		КонецЕсли;
		Выборка = ВыборкаТабличнаяЧасть.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.НомерСтроки = 0 Тогда
				Строка = Контейнер;
			Иначе
				Строка = Контейнер[Выборка.НомерСтроки - 1];
			КонецЕсли;
			Если НЕ ПроверитьИЗаменитьЗначение(Строка, Выборка, СоответствиеДублей, ОшибкиПриЗамене) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Объект.Записать();
	Возврат Истина;
КонецФункции

Функция ЗаменитьДублиВНабореЗаписей(ВыборкаНаборЗаписей, СоответствиеДублей, ОшибкиПриЗамене)
	Менеджер = А1Э_Метаданные.МенеджерОбъекта(ВыборкаНаборЗаписей.Объект, ВыборкаНаборЗаписей.ТипОбъекта);
	НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаНаборЗаписей.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	ВыборкаТабличнаяЧасть = ВыборкаНаборЗаписей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
		Выборка = ВыборкаТабличнаяЧасть.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей[Выборка.НомерСтроки - 1];
			Если НЕ ПроверитьИЗаменитьЗначение(Запись, Выборка, СоответствиеДублей, ОшибкиПриЗамене) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	Возврат Истина;
КонецФункции

Функция ПроверитьИЗаменитьЗначение(Запись, Выборка, СоответствиеДублей, ОшибкиПриЗамене)
	
	ТекущееЗначение = ЗначениеПоляРегистра(Запись, Выборка.Реквизит, Выборка.ВидСубконто, Выборка.ЭтоДебет); 
	Если ТекущееЗначение <> Выборка.ИскомоеЗначение Тогда
		ДобавитьОшибкуЗаменыДублей_НесоответствиеДанных(ОшибкиПриЗамене, Выборка);
		Возврат Ложь;
	КонецЕсли;
	НовоеЗначение = СоответствиеДублей[Выборка.ИскомоеЗначение];
	Если НЕ ЗначениеЗаполнено(НовоеЗначение) Тогда
		ДобавитьОшибкуЗаменыДублей_ОтсутствуетНовоеЗначение(ОшибкиПриЗамене, Выборка);
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПолеРегистра(Запись, Выборка.Реквизит, НовоеЗначение, Выборка.ВидСубконто, Выборка.ЭтоДебет);  
	
	Возврат Истина;
КонецФункции

Функция ЗначениеПоляРегистра(Запись, ИмяПоля, ВидСубконто = Неопределено, ЭтоДебет = Неопределено) 
	Если ЗначениеЗаполнено(ВидСубконто) Тогда
		ДтКт = ?(ЭтоДебет, "Дт", "Кт");
		Возврат Запись["Субконто" + ДтКт][ВидСубконто];
	Иначе
		Возврат Запись[ИмяПоля];
	КонецЕсли;
	
КонецФункции

Функция УстановитьПолеРегистра(Запись, ИмяПоля, НовоеЗначение, ВидСубконто = Неопределено, ЭтоДебет = Неопределено)
	Если ЗначениеЗаполнено(ВидСубконто) Тогда
		ДтКт = ?(ЭтоДебет, "Дт", "Кт");
		Запись["Субконто" + ДтКт].Вставить(ВидСубконто, НовоеЗначение);
	Иначе
		Запись[ИмяПоля] = НовоеЗначение;
	КонецЕсли;
КонецФункции 

Функция ДобавитьОшибкуЗаменыДублей_НесоответствиеДанных(ОшибкиПриЗамене, Выборка)
	Возврат ДобавитьПроизвольнуюОшибкуЗаменыДублей(ОшибкиПриЗамене, Выборка,
	"Данные в ячейке отличаются от найденных данных! Вероятно данные были изменены. Попробуйте повторить поиск.");
КонецФункции

Функция ДобавитьОшибкуЗаменыДублей_ОтсутствуетНовоеЗначение(ОшибкиПриЗамене, Выборка) 
	Возврат ДобавитьПроизвольнуюОшибкуЗаменыДублей(ОшибкиПриЗамене, Выборка,
	"Данные в ячейке отличаются от найденных данных! Вероятно данные были изменены. Попробуйте повторить поиск.");
КонецФункции

Функция ДобавитьПроизвольнуюОшибкуЗаменыДублей(ОшибкиПриЗамене, Выборка, Причина)
	Ошибка = Новый Структура("ТипОбъекта,Объект,ТабличнаяЧасть,Реквизит,ИскомоеЗначение,Ссылка,НомерСтроки,Причина");
	ЗаполнитьЗначенияСвойств(Ошибка, Выборка);
	Ошибка.Причина = Причина;
	ОшибкиПриЗамене.Добавить(Ошибка);
	Возврат Ошибка;
КонецФункции

#КонецОбласти 

Функция НовыйГруппаДублей(Реквизиты, ИсточникДанных = Неопределено)
	ГруппаДублей = Новый Структура;
	ГруппаДублей.Вставить("Ключ", НовыйКлючДублирования(Реквизиты));
	Если ИсточникДанных <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ГруппаДублей.Ключ, ИсточникДанных);
	КонецЕсли;
	ГруппаДублей.Вставить("Дубли", Новый Соответствие);
	ГруппаДублей.Вставить("Основной", Неопределено);
	Возврат ГруппаДублей;
КонецФункции

Функция КлючДублированияСоответствует(КлючДублирования, ИсточникДанных)  
	Для Каждого Пара Из КлючДублирования Цикл
		Если Пара.Значение <> ИсточникДанных[Пара.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция НовыйКлючДублирования(Реквизиты)
	КлючДублирования = Новый Структура;
	А1Э_Структуры.ДобавитьКлючи(КлючДублирования, Реквизиты);
	Возврат КлючДублирования;
КонецФункции

Функция НовыйМестоПоиска(Знач Объект, Знач Реквизит, Знач ТабличнаяЧасть = "")
	Если ТипЗнч(Объект) <> Тип("Строка") Тогда Объект = Объект.ПолноеИмя(); КонецЕсли;
	Если ТипЗнч(Реквизит) <> Тип("Строка") Тогда Реквизит = Реквизит.Имя; КонецЕсли;
	Если ТипЗнч(ТабличнаяЧасть) <> Тип("Строка") Тогда ТабличнаяЧасть = ТабличнаяЧасть.Имя; КонецЕсли;
	
	ЧастиСтрокиОбъекта = А1Э_Строки.ПередПосле(Объект, ".");
	Возврат А1Э_Структуры.Создать(
	"ТипОбъекта", ЧастиСтрокиОбъекта.Перед, 
	"ИмяОбъекта", ЧастиСтрокиОбъекта.После,
	"ТабличнаяЧасть", ТабличнаяЧасть, 
	"Реквизит", Реквизит,
	);
КонецФункции 