#Область Механизмы

// Добавляет механизм в список. Используется в <А1СписокМеханизмов.ДобавитьМеханизмы>
//                                            
// Параметры:
//  СписокМеханизмов - Массив -
//  Имя		 - Строка - имя механизма 
//  Модуль	 - Строка - имя общего модуля, в котором располагается механизм. По умолчанию равно имени механизма.
//  Префикс	 - Строка - префикс всех функций механизма. Может быть пустым.
// 
// Возвращаемое значение:
//  Структура - 
//
Функция Добавить(СписокМеханизмов, Имя, Модуль = "", Префикс = "") Экспорт
	СписокМеханизмов.Добавить(Создать(Имя, Модуль, Префикс));
КонецФункции

// Подключает механизм к объектам. Используется в <А1СписокМеханизмов.ДобавитьОбъекты>
//
// Параметры:
//  СписокОбъектов	 -  - 
//  Объекты			 - Строка, Массив - содержит имена объектов, например "Справочник.Номенклатура", или Адресации 
//  Механизмы		 - Строка, Массив - содержит имена механизмов
//  Контекст		 - Произвольный - 
// 
// Возвращаемое значение:
//   - 
//
Функция Подключить(СписокОбъектов, Знач Объекты, Знач Механизмы, Контекст = Истина) Экспорт 
	Объекты = А1Э_Массивы.Массив(Объекты);
	Механизмы = А1Э_Массивы.Массив(Механизмы);
	Для Каждого Объект Из Объекты Цикл
		Для Каждого Механизм Из Механизмы Цикл
			СписокОбъектов.Добавить(НовыйРегистрацияМеханизма(Объект, Механизм, Контекст));
		КонецЦикла;
	КонецЦикла;
КонецФункции

// Возвращает Истина, если к переданному объекту подключен переданный механизм.
//
// Параметры:
//  Объект	 - Объект, ФормаКлиентскогоПриложения - объект механизма. 
//  Механизм - Строка - имя механизма.
// 
// Возвращаемое значение:
//   - Булево
//
Функция Подключен(Объект, Механизм) Экспорт
	МеханизмыОбъекта = МеханизмыОбъекта(Объект);
	Если МеханизмыОбъекта = Неопределено Тогда Возврат Ложь; КонецЕсли; 
	Возврат МеханизмыОбъекта.Получить(Механизм) <> Неопределено; 
КонецФункции

// Получает контекст механизма, как он задан при подключении механизма.
//
// Параметры:
//  Объект	 - Объект, ФормаКлиентскогоПриложения - объект механизма. 
//  Механизм - Строка - имя механизма. 
// 
// Возвращаемое значение:
//  Произвольный - контекст
//
Функция КонтекстМеханизма(Объект, Механизм) Экспорт
	ИмяМетаданныхОбъекта = ИмяМетаданныхОбъекта(Объект);
	Возврат А1Э_Иерархии.Дефиксировать(ВсеОбъектыСМеханизмами()[ИмяМетаданныхОбъекта][Механизм]); 
КонецФункции

// Возвращает объекты, к которым подключен механизм, вместе с контекстом.
//
// Параметры:
//  Механизм - Строка - имя механизма 
// 
// Возвращаемое значение:
//   - Соответствие
//			Ключ - Строка - имя метаданных объекта, например "Справочник.Номенклатура"
//			Значение - Произвольный - контекст
//
Функция ОбъектыМеханизма(Механизм) Экспорт
	Возврат ВсеМеханизмыСОбъектами()[Механизм];	
КонецФункции

// Возвращает механизмы, подключенные к объекту, вместе с контекстом.
//
// Параметры:
//  Объект	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция МеханизмыОбъекта(Объект) Экспорт
	ИмяМетаданныхОбъекта = ИмяМетаданныхОбъекта(Объект);
	Возврат ВсеОбъектыСМеханизмами()[ИмяМетаданныхОбъекта];
КонецФункции

#Область Адресации

// Используется для регистрации механизмов на все объекты, использующие механизмы.
// 
// Возвращаемое значение:
//   - 
//
Функция Адресация__ВсеОбъекты() Экспорт 
	Возврат "А1_ВсеОбъекты";
КонецФункции

// Используется для регистрации механизмов, относящихся не к конкретному объекту, а к системе в целом.
// 
// Возвращаемое значение:
//   - 
//
Функция Адресация__БезОбъектов() Экспорт
	Возврат "А1_БезОбъектов";
КонецФункции

#КонецОбласти

#Область Выполнение

//Используется для глобальных перехватов. Доступны ПередНачаломРаботыСистемы, ПриНачалеРаботыСистемы и собственные события. 
Функция ВыполнитьМеханизмыОбработчика(ИмяОбработчика, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт 
	РабочиеМеханизмы = РабочиеМеханизмы(ИмяОбработчика);
	
	Прерывание = ПрерываниеВыполнения();
	Для Каждого Механизм Из РабочиеМеханизмы Цикл
		Результат = А1Э_Общее.РезультатФункции(ИмяФункцииОбработчика(Механизм, ИмяОбработчика), П1, П2, П3, П4, П5);
		Если Результат = Прерывание Тогда Возврат Результат; КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

//Используется для механизмов объектов и форм. Поддерживается почти все.
Функция ВыполнитьМеханизмыОбработчикаОбъекта(ИмяОбработчиков, Объект, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null) Экспорт  
	ИмяМетаданныхОбъекта = ИмяМетаданныхОбъекта(Объект);
	ФункцииОбработчика = ФункцииОбработчикаОбъекта(ИмяОбработчиков, ИмяМетаданныхОбъекта);
	
	Результат = ВыполнитьФункцииОбработчикаОбъекта(ФункцииОбработчика, Объект, П1, П2, П3, П4, П5, П6, П7);  
	Если Результат = ПрерываниеВыполнения() Тогда Возврат Результат; КонецЕсли;
	
	ИмяОсновногоОбработчика = А1Э_Строки.Перед(ИмяОбработчиков, ",");
	А1Э_УниверсальнаяФорма.ВыполнитьОбработчикиСобытияДляОбъектовФормы(ИмяОсновногоОбработчика, Объект, П1, П2, П3, П4, П5, П6, П7);
КонецФункции

Функция ВыполнитьФункцииОбработчикаОбъекта(ФункцииОбработчика, Объект, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null) Экспорт
	Прерывание = ПрерываниеВыполнения();
	Для Сч = 0 По ФункцииОбработчика.Количество() - 1 Цикл
		ФункцияОбработчика = ФункцииОбработчика[Сч];
		Результат = А1Э_Общее.РезультатФункции(ФункцияОбработчика.ИмяФункции, Объект, П1, П2, П3, П4, П5, П6, П7);
		Если Результат = Прерывание Тогда Возврат Результат; КонецЕсли;
	КонецЦикла;
КонецФункции 

Функция ФункцииОбработчикаОбъекта(ИмяОбработчиков, ИмяМетаданныхОбъекта, ПовторноеИспользование = Истина) Экспорт 
	Если ПовторноеИспользование = Истина Тогда
		Возврат А1Э_ПовторноеИспользование.РезультатФункции("А1Э_Механизмы.ФункцииОбработчикаОбъекта", ИмяОбработчиков, ИмяМетаданныхОбъекта, Ложь);
	КонецЕсли;
	ВсеМеханизмы = ВсеМеханизмы();
	
	ВсеОбъектыСМеханизмами = ВсеОбъектыСМеханизмами();
	МеханизмыОбъекта = ВсеОбъектыСМеханизмами[ИмяМетаданныхОбъекта];
	ОбщиеМеханизмы = ВсеОбъектыСМеханизмами[Адресация__ВсеОбъекты()];
	
	ИменаОбработчиков = А1Э_Массивы.Массив(ИмяОбработчиков); //Позволяет использовать несколько обработчиков, через запятую.
	МассивФункций = Новый Массив;
	Если МеханизмыОбъекта <> Неопределено Тогда
		Для Каждого ИмяОбработчика Из ИменаОбработчиков Цикл 
			Для Каждого Пара Из МеханизмыОбъекта Цикл
				ДобавитьФункциюВМассив(МассивФункций, Пара, ВсеМеханизмы, ИмяОбработчика);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Если ОбщиеМеханизмы <> Неопределено Тогда
		Для Каждого ИмяОбработчика Из ИменаОбработчиков Цикл
			Для Каждого Пара Из ОбщиеМеханизмы Цикл
				ДобавитьФункциюВМассив(МассивФункций, Пара, ВсеМеханизмы, ИмяОбработчика);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	А1Э_ТаблицыЗначений.Сортировать(МассивФункций, "ПорядокВыполнения");
	
	Возврат МассивФункций; 
КонецФункции

Функция ДобавитьФункциюВМассив(МассивФункций, Пара, ВсеМеханизмы, ИмяОбработчика)  
	Механизм = ВсеМеханизмы[Пара.Ключ];
	Контекст = Пара.Значение;
	ИмяФункции = ИмяФункцииОбработчика(Механизм, ИмяОбработчика);
	Если ИмяФункции = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	
	ФункцияОбработчикаОбъекта = НовыйФункцияОбработчикаОбъекта();
	МассивФункций.Добавить(ФункцияОбработчикаОбъекта);
	
	ФункцияОбработчикаОбъекта.ИмяФункции = ИмяФункции;
	ЗаполнитьЗначенияСвойств(ФункцияОбработчикаОбъекта, Механизм); 
	
	Возврат МассивФункций;
КонецФункции 

Функция ИмяФункцииОбработчика(Механизм, ИмяОбработчика) Экспорт 
	ДанныеОбработчика = ДанныеОбработчикаМеханизма(Механизм, ИмяОбработчика);
	Если ДанныеОбработчика = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеОбработчика = Истина Тогда
		Возврат Механизм.Модуль + "." + Механизм.Префикс + ИмяОбработчика;
	ИначеЕсли ТипЗнч(ДанныеОбработчика) = Тип("Строка") Тогда
		Возврат ДанныеОбработчика;
	Иначе
		А1Э_Служебный.СлужебноеИсключение("В перечне обработчиков механизма указано значение неверного типа! Ожидается Истина или Строка");
	КонецЕсли;
КонецФункции

Функция ДанныеОбработчикаМеханизма(Механизм, ИмяОбработчика)
	Возврат ДанныеОбработчика(Механизм.Обработчики, ИмяОбработчика);
КонецФункции

Функция ДанныеОбработчика(Обработчики, ИмяОбработчика)
	Если ТипЗнч(Обработчики) = Тип("Соответствие") Тогда
		Возврат Обработчики[ИмяОбработчика]
	ИначеЕсли ТипЗнч(Обработчики) = Тип("ФиксированноеСоответствие") Тогда
		Соответствие = Новый Соответствие(Обработчики); //В фиксированном соответствии получение несуществующего ключа вызывает ошибку.
		Возврат Соответствие[ИмяОбработчика];
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Обработчики", ИмяМодуля() + ".ДанныеОбработчика", Обработчики, "Соответствие,ФиксированноеСоответствие");
	КонецЕсли;	
КонецФункции

Функция ИмяМетаданныхОбъекта(Объект) Экспорт  
	Если ТипЗнч(Объект) = Тип("Строка") Тогда Возврат А1Э_Строки.Перед(Объект, ".Форма."); КонецЕсли;
	#Если НЕ Клиент Тогда
		Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
			Возврат Объект.Ссылка.Метаданные().ПолноеИмя();
		ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
			Возврат Объект.ПолноеИмя();
		ИначеЕсли ТипЗнч(Объект) <> А1Э_СтандартныеТипы.ФормаКлиентскогоПриложения() Тогда
			Возврат Объект.Метаданные().ПолноеИмя();
		КонецЕсли;
	#КонецЕсли
	Возврат А1Э_Строки.Перед(Объект.ИмяФормы, ".Форма."); 	
КонецФункции

#КонецОбласти 

#Область Инициализация

#Если Клиент Тогда
	
	Функция УстановитьПараметрыКлиента() Экспорт
		А1Э_ПараметрыМеханизмов = А1Э_ОбщееСервер.РезультатФункции("А1Э_Механизмы.ПараметрыКлиентаДляУстановки");
	КонецФункции
	
#КонецЕсли

// Получает все механизмы, зарегистрированные в конфигурации, вместе с их настройками
//
// Параметры:
//  ПовторноеИспользование - Булево - признак повторного использования 
// 
// Возвращаемое значение:
//  Структура - 
//		Ключи - Строка - имя механизма
//		Значение - Структура - см. <А1Э_Механизмы.Создать> 
//
Функция ВсеМеханизмы(ПовторноеИспользование = Истина) Экспорт
	Если ПовторноеИспользование = Истина Тогда 
		Возврат ПараметрыМеханизмовИзКэшированныхДанных("ВсеМеханизмы");
	КонецЕсли;
	#Если Клиент Тогда                                                                   
		А1Э_Служебный.СлужебноеИсключение("Выполнение функции А1Э_Механизмы.ВсеМеханизмы() на клиенте разрешено только в режиме повторного использования!");
	#Иначе
		МассивМеханизмов = МассивМеханизмовИзОбщихМодулей();
		ПроверитьОтсутствиеДублейМеханизмов(МассивМеханизмов);
		ЗаполнитьНастройкиМодульныхМеханизмов(МассивМеханизмов);
		
		ВсеМеханизмы = Новый Структура;
		Для Каждого Механизм Из МассивМеханизмов Цикл
			ВсеМеханизмы.Вставить(Механизм.Имя, Механизм);
		КонецЦикла;
		
		Возврат ВсеМеханизмы;
	#КонецЕсли
КонецФункции

// Получает все механизмы, для которых зарегистрированы объекты
//
// Параметры:
//  ПовторноеИспользование	 - 	 - 
// 
// Возвращаемое значение:
//  Соответствие - 
//		Ключ - Строка - имя механизма
//		Значение - Соответствие
//			Ключ - Строка - имя метаданных объекта, например "Справочник.Номенклатура"
//			Значение - Произвольный - контекст
Функция ВсеМеханизмыСОбъектами(ПовторноеИспользование = Истина) Экспорт  
	Если ПовторноеИспользование = Истина Тогда 
		Возврат ПараметрыМеханизмовИзКэшированныхДанных("ВсеМеханизмыСОбъектами");
	КонецЕсли;
	#Если Клиент Тогда
		А1Э_Служебный.СлужебноеИсключение("Выполнение функции " + ИмяМодуля() +".ВсеМеханизмы() на клиенте разрешено только в режиме повторного использования!");
	#Иначе
		РегистрацииМеханизмов = РегистрацииМеханизмовИзОбщихМодулей();
		ВсеМеханизмы = ВсеМеханизмы(Ложь);
		
		ВсеМеханизмыСОбъектами = Новый Соответствие;
		Для Каждого Регистрация Из РегистрацииМеханизмов Цикл
			Если ВсеМеханизмыСОбъектами[Регистрация.Механизм] = Неопределено Тогда
				ВсеМеханизмыСОбъектами.Вставить(Регистрация.Механизм, Новый Соответствие);
			КонецЕсли;
			Механизм = ВсеМеханизмы[Регистрация.Механизм];
			ОбъектыМеханизма = ВсеМеханизмыСОбъектами[Регистрация.Механизм];
			
			Если ДанныеОбработчикаМеханизма(Механизм, "А1Э_ПриПодключенииКонтекста") = Неопределено Тогда 
				Если ТипЗнч(ОбъектыМеханизма[Регистрация.Объект]) = Тип("Массив") И ТипЗнч(Регистрация.Контекст) = Тип("Массив") Тогда
					А1Э_Массивы.Добавить(ОбъектыМеханизма[Регистрация.Объект], Регистрация.Контекст);
				Иначе
					ОбъектыМеханизма.Вставить(Регистрация.Объект, Регистрация.Контекст);
				КонецЕсли;
			Иначе //Существует обработчик подключения контекста
				ТекущийКонтекст = ОбъектыМеханизма[Регистрация.Объект];
				НовыйКонтекст = Регистрация.Контекст;
				А1Э_Общее.РезультатФункции(ИмяФункцииОбработчика(Механизм, "А1Э_ПриПодключенииКонтекста"), ТекущийКонтекст, НовыйКонтекст);
				ОбъектыМеханизма.Вставить(Регистрация.Объект, ТекущийКонтекст);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВсеМеханизмыСОбъектами;
	#КонецЕсли
	
КонецФункции

// Получает все объекты, для которых зарегистрированы механизмы, вместе с этими механизмами.
//
// Параметры:
//  ПовторноеИспользование - Булево - признак повторного использования
// 
// Возвращаемое значение:
//  Соответствие - 
//		Ключ - Строка - имя метаданных объекта, например "Справочник.Номенклатура"
//		Значение - Соответствие
//			Ключ - Строка - имя механизма
//			Значение - Произвольный - контекст
//
Функция ВсеОбъектыСМеханизмами(ПовторноеИспользование = Истина) Экспорт 
	Если ПовторноеИспользование = Истина Тогда 
		Возврат ПараметрыМеханизмовИзКэшированныхДанных("ВсеОбъектыСМеханизмами");
	КонецЕсли;
	#Если Клиент Тогда
		А1Э_Служебный.СлужебноеИсключение("Выполнение функции " + ИмяМодуля() +".ВсеОбъектыСМеханизмами() на клиенте разрешено только в режиме повторного использования!");
	#Иначе
		ВсеМеханизмыСОбъектами = ВсеМеханизмыСОбъектами(Ложь);		
		
		ВсеОбъектыСМеханизмами = Новый Соответствие;
		Для Каждого Пара Из ВсеМеханизмыСОбъектами Цикл
			ИмяМеханизма = Пара.Ключ;
			Для Каждого ПараОбъект Из Пара.Значение Цикл
				ИмяОбъекта = ПараОбъект.Ключ;
				Если ВсеОбъектыСМеханизмами[ИмяОбъекта] = Неопределено Тогда
					ВсеОбъектыСМеханизмами.Вставить(ИмяОбъекта, Новый Соответствие);
				КонецЕсли;
				ВсеОбъектыСМеханизмами[ИмяОбъекта].Вставить(ИмяМеханизма, ПараОбъект.Значение);
			КонецЦикла;
		КонецЦикла;
		
		Возврат ВсеОбъектыСМеханизмами;
	#КонецЕсли
КонецФункции

Функция ПараметрыМеханизмовИзКэшированныхДанных(Ключ) 
		#Если НЕ Клиент Тогда
			ПараметрыМеханизмов = ПараметрыМеханизмовИзПараметровСеанса(Ключ);
		#Иначе
			ПараметрыМеханизмов = А1Э_ПараметрыМеханизмов[Ключ];
		#КонецЕсли
		Возврат А1Э_Структуры.Дефиксировать(ПараметрыМеханизмов);
КонецФункции

//Получает все механизмы, использующие обработчик и имеющие хотя бы один подключенный объект
//
// Параметры:
//  ИмяОбработчика			 - Строка - например, "ПриНачалеРаботыСистемы"
//  ПовторноеИспользование	 - Булево - 
// 
// Возвращаемое значение:
//  Массив -  
//
Функция РабочиеМеханизмы(ИмяОбработчика, ПовторноеИспользование = Истина) Экспорт 
	Если ПовторноеИспользование = Истина Тогда Возврат А1Э_ПовторноеИспользование.РезультатФункции(ИмяМодуля() + ".РабочиеМеханизмы", ИмяОбработчика, Ложь); КонецЕсли;
	
	ВсеМеханизмы = ВсеМеханизмы();
	ВсеМеханизмыСОбъектами = А1Э_Структуры.Соответствие(ВсеМеханизмыСОбъектами());
	
	РабочиеМеханизмы = Новый Массив;
	Для Каждого Пара Из ВсеМеханизмы Цикл
		Механизм = Пара.Значение;
		Если ДанныеОбработчикаМеханизма(Механизм, ИмяОбработчика) = Неопределено Тогда Продолжить; КонецЕсли;
		Если ВсеМеханизмыСОбъектами[Механизм.Имя] = Неопределено Тогда Продолжить; КонецЕсли;
		РабочиеМеханизмы.Добавить(Механизм);
	КонецЦикла;
	
	А1Э_ТаблицыЗначений.Сортировать(РабочиеМеханизмы, "ПорядокВыполнения");
	
	Возврат РабочиеМеханизмы;
КонецФункции

#Если НЕ Клиент Тогда
	Функция ПараметрыКлиентаДляУстановки() Экспорт
		УстановитьПривилегированныйРежим(Истина);
		Если Метаданные.ПараметрыСеанса.Найти("А1Э_ПараметрыМеханизмов") = Неопределено Тогда
			Возврат ПараметрыМеханизмов();
		Иначе
			Возврат ПараметрыСеанса.А1Э_ПараметрыМеханизмов;
		КонецЕсли;
	КонецФункции 
	
	Функция УстановитьПараметрСеанса() Экспорт
		ПараметрыСеанса.А1Э_ПараметрыМеханизмов = ПараметрыМеханизмов();
	КонецФункции
	
	Функция ПараметрыМеханизмов(ПовторноеИспользование = Ложь) Экспорт 
		ПараметрыМеханизмов = А1Э_Структуры.Создать(
		"ВсеМеханизмы", ВсеМеханизмы(ПовторноеИспользование),
		"ВсеМеханизмыСОбъектами", ВсеМеханизмыСОбъектами(ПовторноеИспользование),
		"ВсеОбъектыСМеханизмами", ВсеОбъектыСМеханизмами(ПовторноеИспользование),
		);
		Возврат А1Э_Иерархии.Зафиксировать(ПараметрыМеханизмов);
	КонецФункции
	
	Функция ПараметрыМеханизмовИзПараметровСеанса(ДополнительныйКлюч = "") Экспорт 
		УстановитьПривилегированныйРежим(Истина);
		Если Метаданные.ПараметрыСеанса.Найти("А1Э_ПараметрыМеханизмов") <> Неопределено Тогда
			ПараметрыМеханизмов = ПараметрыСеанса.А1Э_ПараметрыМеханизмов;
		КонецЕсли;
		Если ПараметрыМеханизмов <> Неопределено Тогда
			Если ДополнительныйКлюч = "" Тогда
				Возврат ПараметрыМеханизмов;
			Иначе
				Возврат ПараметрыМеханизмов[ДополнительныйКлюч];
			КонецЕсли;
		Иначе
			Если ДополнительныйКлюч = "" Тогда
				Возврат ПараметрыМеханизмов(Истина);
			Иначе
				Возврат А1Э_ПовторноеИспользование.РезультатФункции("А1Э_Механизмы." + ДополнительныйКлюч, Ложь)
			КонецЕсли;
		КонецЕсли;
	КонецФункции
	
	Функция МассивМеханизмовИзОбщихМодулей()
		МассивМеханизмов = Новый Массив;
		Для Каждого ОбщийМодуль Из ОбщиеМодулиСписковМеханизмов() Цикл
			Попытка
				Результат = ОбщийМодуль.ДобавитьМеханизмы(МассивМеханизмов);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				А1Э_Служебный.СлужебноеИсключение("В общем модуле " + ОбщийМодуль.Имя + " не удалось выполнить процедуру ДобавитьМеханизмы с 1 параметром!");
			КонецПопытки;
		КонецЦикла;
		Возврат МассивМеханизмов;
	КонецФункции
	
	// Получает массив объектов, как они зарегистрированы в общих модулях А1СписокМеханизмов 
	// 
	// Возвращаемое значение:
	// Массив - элементы: Структура, см. <А1Э_Механизмы.НовыйРегистрацияМеханизма>   
	//
	Функция РегистрацииМеханизмовИзОбщихМодулей(ПовторноеИспользование = Истина) Экспорт
		Если ПовторноеИспользование = Истина Тогда Возврат А1Э_ПовторноеИспользование.РезультатФункции(ИмяМодуля() + ".РегистрацииМеханизмовИзОбщихМодулей", Ложь);	КонецЕсли;
		
		СписокОбъектов = Новый Массив;
		Для Каждого ОбщийМодуль Из ОбщиеМодулиСписковМеханизмов() Цикл
			Попытка
				Результат = ОбщийМодуль.ДобавитьОбъекты(СписокОбъектов);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				А1Э_Служебный.СлужебноеИсключение("В общем модуле " + ОбщийМодуль.Имя + " не удалось выполнить процедуру ДобавитьОбъекты с 1 параметром!");
			КонецПопытки;
		КонецЦикла;
		Возврат СписокОбъектов;
	КонецФункции
	
	Функция ОбщиеМодулиСписковМеханизмов(ПовторноеИспользование = Истина) Экспорт
		Если ПовторноеИспользование = Истина Тогда Возврат А1Э_ПовторноеИспользование.РезультатФункции(ИмяМодуля() + ".ОбщиеМодулиСписковМеханизмов", Ложь); КонецЕсли;
		
		Модули = Новый Массив;
		Для Каждого ОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
			Если СтрНайти(ОбщийМодуль.Имя, "А1СписокМеханизмов") Тогда
				Модули.Добавить(Вычислить(ОбщийМодуль.Имя));
			КонецЕсли;
		КонецЦикла;
		Возврат Модули;
	КонецФункции 
	
	Функция СписокМеханизмовИзОбщихМодулей()
		СписокМеханизмов = Новый Массив;
		Для Каждого ОбщийМодуль Из ОбщиеМодулиСписковМеханизмов() Цикл
			Попытка
				Результат = ОбщийМодуль.ДобавитьМеханизмы(СписокМеханизмов);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				А1Э_Служебный.СлужебноеИсключение("В общем модуле " + ОбщийМодуль.Имя + " не удалось выполнить процедуру ДобавитьМеханизмы с 1 параметром!");
			КонецПопытки;
		КонецЦикла;
		Возврат СписокМеханизмов;
	КонецФункции
	
	Функция СписокОбъектовИзОбщихМодулей()
		СписокОбъектов = Новый Массив;
		Для Каждого ОбщийМодуль Из ОбщиеМодулиСписковМеханизмов() Цикл
			Попытка
				Результат = ОбщийМодуль.ДобавитьОбъекты(СписокОбъектов);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				А1Э_Служебный.СлужебноеИсключение("В общем модуле " + ОбщийМодуль.Имя + " не удалось выполнить процедуру ДобавитьОбъекты с 1 параметром!");
			КонецПопытки;
		КонецЦикла;
		Возврат СписокОбъектов;
	КонецФункции
	
#КонецЕсли

Функция ПроверитьОтсутствиеДублейМеханизмов(СписокМеханизмов)
	МассивИмен = Новый Массив;
	Для Каждого Механизм Из СписокМеханизмов Цикл
		МассивИмен.Добавить(Механизм.Имя);
	КонецЦикла;
	КоличестваИмен = А1Э_Массивы.СвернутьВСоответствие(МассивИмен);
	ТекстОшибки = "";
	Для Каждого Пара Из КоличестваИмен Цикл
		Если Пара.Значение > 1 Тогда
			ТекстОшибки = ТекстОшибки + "Обнаружены несколько механизмов с одинаковым именем <" + Пара.Ключ + ">!" + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ТекстОшибки <> "" Тогда
		А1Э_Служебный.СлужебноеИсключение(ТекстОшибки + "Проверьте методы ДобавитьМеханизмы в общих модулях с именами, содержащими <А1СписокМеханизмов>");
	КонецЕсли;
КонецФункции

Функция ЗаполнитьНастройкиМодульныхМеханизмов(СписокМеханизмов)
	Для Каждого Механизм Из СписокМеханизмов Цикл
		Если Механизм.Свойство("Модуль") <> Истина Тогда
			Продолжить;
		КонецЕсли;
		Настройки = Вычислить(Механизм.Модуль + "." + Механизм.Префикс + "НастройкиМеханизма()");
		А1Э_Структуры.СкопироватьСвойства(Механизм, Настройки, Истина);
	КонецЦикла;
КонецФункции

#КонецОбласти 

#Область Ошибки
#Если НЕ Клиент Тогда
	
	Функция ОшибкиМеханизмов() Экспорт
		МеханизмыСПоискомОшибок = РабочиеМеханизмы("А1Э_ПриПоискеОшибок");
		ВсеОшибки = Новый Соответствие;
		Для Каждого Механизм Из МеханизмыСПоискомОшибок Цикл
			Ошибки = Новый Массив;
			ВсеОшибки.Вставить(Механизм.Имя, Ошибки);
			Попытка
				А1Э_Общее.РезультатФункции(ИмяФункцииОбработчика(Механизм, "А1Э_ПриПоискеОшибок"), Ошибки);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Ошибки.Добавить(НовыйОписаниеОшибки("А1Э_ОшибкаПоискаОшибок", , , "Возникла ошибка при поиске ошибок :-) " + ОписаниеОшибки, Ложь));
			КонецПопытки;	
		КонецЦикла;
		
		Возврат ВсеОшибки;
	КонецФункции
	
	Функция ИсправитьОшибкиМеханизмов(ВсеОшибки = Неопределено) Экспорт
		Если ВсеОшибки = Неопределено Тогда
			ВсеОшибки = ОшибкиМеханизмов();
		Конецесли;
		ВсеМеханизмы = ВсеМеханизмы();
		
		Для Каждого Пара Из ВсеОшибки Цикл
			ИмяМеханизма = Пара.Ключ;
			Ошибки = Пара.Значение;
			Механизм = ВсеМеханизмы[ИмяМеханизма];
			Если ДанныеОбработчикаМеханизма(Механизм, "А1Э_ПриИсправленииОшибок") = Неопределено Тогда Продолжить; КонецЕсли;
			А1Э_Общее.РезультатФункции(ИмяФункцииОбработчика(Механизм, "А1Э_ПриИсправленииОшибок"), Ошибки);
		КонецЦикла;
		
	КонецФункции
	
	Функция ДобавитьОписаниеОшибки(Ошибки, ИмяОшибки, ОбъектМетаданных = Неопределено, Ссылка = Неопределено, Представление = Неопределено, АвтоматическоеИсправление = Ложь, Контекст = Неопределено) Экспорт
		Ошибки.Добавить(НовыйОписаниеОшибки(ИмяОшибки, ОбъектМетаданных, Ссылка, Представление, АвтоматическоеИсправление, Контекст));
	КонецФункции 
#КонецЕсли
#КонецОбласти

#Область Декларации

Функция НовыйФункцияОбработчикаОбъекта()
	Возврат А1Э_Структуры.Создать(
	"Класс", "ФункцияОбработчикаОбъекта", 
	"ИмяФункции", "", 
	"ПорядокВыполнения", 0);
КонецФункции

// Описание регистрации механизма
//
// Параметры:
//  Объект	 - Строка - строковое представление объекта. Например <Справочник.Номенклатура> или <Документ.РеализацияТоваровУслуг> 
//  Механизм - Строка - имя механизма.
//  Контекст - Произвольный - контекст выполнения механизма.
// 
// Возвращаемое значение:
//  Структура - 
//    Объект - Строка - Имя объекта
//	  Механизм - Строка - Имя механизма
//    Контекст - Произвольный - контекст механизма
//
Функция НовыйРегистрацияМеханизма(Объект, Механизм, Контекст = Неопределено)
	Возврат А1Э_Структуры.Создать(
	"Класс", "РегистрацияМеханизма",
	"Объект", Объект,
	"Механизм", Механизм,
	"Контекст", Контекст);
КонецФункции

Функция ПрерываниеВыполнения() Экспорт
	Возврат "А1Э_Механизмы__Прерывание";
КонецФункции

Функция НовыйНастройкиМеханизма() Экспорт 
	Настройки = Новый Структура;
	Настройки.Вставить("Обработчики", Новый Соответствие);
	Настройки.Вставить("ПорядокВыполнения", 0);
	
	Возврат Настройки;
КонецФункции

Функция НовыйОписаниеОшибки(Имя, ОбъектМетаданных = Неопределено, Ссылка = Неопределено, Представление = Неопределено, АвтоматическоеИсправление = Ложь, Контекст = Неопределено) Экспорт
	Возврат А1Э_Структуры.Создать(
	"Класс", "А1Э_Механизмы__ОписаниеОшибки",
	"Имя", Имя,
	"ОбъектМетаданных", ОбъектМетаданных,
	"Ссылка", Ссылка,
	"Представление", Представление,
	"АвтоматическоеИсправление", АвтоматическоеИсправление,
	"Контекст", Контекст
	);
КонецФункции

#КонецОбласти 

#Область Кодогенерация
#Если Клиент Тогда
	
	Функция УстановитьРасширение(Объекты = Неопределено, КонтекстВыполнения = Неопределено) Экспорт
		Если А1Э_Конфигуратор.Открыт() Тогда
			Сообщить("Для установки расширения А1ЭМ необходимо закрыть конфигуратор!");
			Возврат Ложь; 
		КонецЕсли;
		КаталогСоздания = КаталогВременныхФайлов() + "A1MechanismExtension";
		ИмяФайлаРасширения = СоздатьРасширениеМеханизмовКлиент(, КаталогСоздания, , КонтекстВыполнения);
		
		ДвоичныеДанныеРасширения = Новый ДвоичныеДанные(ИмяФайлаРасширения);
		Адрес = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеРасширения, Адрес);
		А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".УстановитьРасширениеСервер", Адрес);
		
	КонецФункции
	
	Функция СоздатьРасширениеМеханизмовКлиент(Объекты = Неопределено, КаталогСоздания = Неопределено, Контекст = Неопределено, КонтекстВыполнения = Неопределено) Экспорт
		Если НЕ ЗначениеЗаполнено(КаталогСоздания) Тогда
			КаталогСоздания = КаталогВременныхФайлов() + "A1MechanismExtension";
		КонецЕсли;
		
		АдресВХранилище = А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".ПоместитьРасширениеМеханизмовВХранилище", Объекты, Контекст);
		ДвДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		ИмяАрхива = КаталогСоздания + "\A1MechanismExtension.zip"; 
		ДвДанные.Записать(ИмяАрхива);
		Зип = Новый ЧтениеZipФайла(ИмяАрхива);
		Зип.ИзвлечьВсе(КаталогСоздания);
		А1Э_Конфигуратор.ЗагрузитьРасширениеИзФайлов(КаталогСоздания, "А1ЭМ", КонтекстВыполнения);
		УдалитьФайлы(КаталогСоздания);
		ИмяФайлаРасширения = КаталогВременныхФайлов() + "A1MechanismExtension.cfe";
		А1Э_Конфигуратор.СохранитьКонфигурациюВФайл(ИмяФайлаРасширения, "А1ЭМ", КонтекстВыполнения);
		А1Э_Конфигуратор.УдалитьРасширение("А1ЭМ", КонтекстВыполнения);
		
		Возврат ИмяФайлаРасширения;
		
	КонецФункции
	
#КонецЕсли 
#Если НЕ Клиент Тогда
	
	Функция РекомендуемаяВерсияРасширения() Экспорт 
		Возврат Метаданные.Синоним + " версия " + Метаданные.Версия;
	КонецФункции
	
	Функция УстановитьРасширениеСервер(АдресВХранилище) Экспорт
		ДвоичныеДанныеРасширения = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Расширение = РасширенияКонфигурации.Создать();
		Расширение.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
		Расширение.БезопасныйРежим = Ложь;
		Расширение.ИспользоватьОсновныеРолиДляВсехПользователей = Ложь;
		Расширение.Записать(ДвоичныеДанныеРасширения);
	КонецФункции
	
	Функция ПоместитьРасширениеМеханизмовВХранилище(Объекты = Неопределено, Контекст = Неопределено) Экспорт 
		КаталогСоздания = КаталогВременныхФайлов() + "A1MechanismExtension";
		Если А1Э_Файлы.ФайлСуществует(КаталогСоздания) Тогда
			УдалитьФайлы(КаталогСоздания);
		КонецЕсли;
		СоздатьКаталог(КаталогСоздания);
		
		СоздатьРасширениеМеханизмов(Объекты, КаталогСоздания, Контекст);
		Поток = Новый ПотокВПамяти;
		Зип = Новый ЗаписьZipФайла(Поток);
		Зип.Добавить(КаталогСоздания + "\*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодКаталоговZIP.ОбрабатыватьРекурсивно);
		Зип.Записать();
		ДвДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		УдалитьФайлы(КаталогСоздания);
		
		Возврат	ПоместитьВоВременноеХранилище(ДвДанные)
	КонецФункции 
	
	Функция СоздатьРасширениеМеханизмов(Знач Объекты = Неопределено, Знач КаталогСоздания = Неопределено, Знач Контекст = Неопределено) Экспорт
		Объекты = А1Э_Массивы.Массив(Объекты);
		ОбъектыМетаданных = Новый Массив;
		Для Каждого Объект Из Объекты Цикл
			ОбъектыМетаданных.Добавить(А1Э_Метаданные.ОбъектМетаданных(Объект));
		КонецЦикла;
		Если ОбъектыМетаданных.Количество() = 0 Тогда
			Исключения = Новый Массив;
			ВыполнитьМеханизмыОбработчика("А1Э_ПриОпределенииОбъектовБезМеханизмов", Исключения);
			Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
				Если ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда Продолжить; КонецЕсли;
				Если Исключения.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено Тогда Продолжить; КонецЕсли;
				ОбъектыМетаданных.Добавить(ОбъектМетаданных);
			КонецЦикла;
			Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
				Если ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда Продолжить; КонецЕсли;
				Если Исключения.Найти(ОбъектМетаданных.ПолноеИмя()) <> Неопределено Тогда Продолжить; КонецЕсли; 
				ОбъектыМетаданных.Добавить(ОбъектМетаданных);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КаталогСоздания) Тогда
			КаталогСоздания = КаталогВременныхФайлов() + "A1MechanismExtension";
		КонецЕсли;
		РабочийКонтекст = А1Э_Структуры.СкопироватьВШаблонСЗаменой(Контекст,
		"ВерсияФормата", "2.10",
		);
		Если А1Э_Файлы.ФайлСуществует(КаталогСоздания) Тогда
			УдалитьФайлы(КаталогСоздания);
		КонецЕсли;
		СоздатьКаталог(КаталогСоздания);
		
		А1Э_Сериализация.ДОМ_ВФайлХМЛ(КорневойДокумент(ОбъектыМетаданных, РабочийКонтекст), КаталогСоздания + "\Configuration.xml");
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
			Если ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено Тогда Продолжить; КонецЕсли;
			
			СоздатьКаталог(ПолноеИмяПапкиОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных));
			А1Э_Сериализация.ДОМ_ВФайлХМЛ(ДокументОбъектаМетаданных(ОбъектМетаданных, РабочийКонтекст),
			ПолноеИмяФайлаОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных));
			
			СоздатьКаталог(ПолноеИмяПапкиМодуляОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных));
			Если СтрНачинаетсяС(ОбъектМетаданных.ПолноеИмя(), "Документ") Тогда
				ИмяМакетаМодуляОбъекта = "Обработка.А1Э_МеханизмыГенерацияКода.Расширение__МодульОбъектаДокумент";
			Иначе
				ИмяМакетаМодуляОбъекта = "Обработка.А1Э_МеханизмыГенерацияКода.Расширение__МодульОбъектаСправочник";
			КонецЕсли;
			А1Э_Строки.ВФайлСинхронно(А1Э_Строки.ИзМакета(ИмяМакетаМодуляОбъекта), ПолноеИмяФайлаМодуляОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных));
			
			Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
				Если Форма.РасширениеКонфигурации() <> Неопределено Тогда Продолжить; КонецЕсли;
				
				СоздатьКаталог(ПолноеИмяПапкиОписанияФормы(КаталогСоздания, ОбъектМетаданных, Форма.Имя));
				А1Э_Сериализация.ДОМ_ВФайлХМЛ(ДокументОписанияФормы(Форма.Имя, РабочийКонтекст),
				ПолноеИмяФайлаОписанияФормы(КаталогСоздания, ОбъектМетаданных, Форма.Имя));
				
				СоздатьКаталог(ПолноеИмяВнутреннейПапкиФормы(КаталогСоздания, ОбъектМетаданных, Форма.Имя));
				А1Э_Сериализация.ДОМ_ВФайлХМЛ(ДокументФормы(ОбъектМетаданных, Форма.Имя, РабочийКонтекст),
				ПолноеИмяФайлаФормы(КаталогСоздания, ОбъектМетаданных, Форма.Имя));
				
				СоздатьКаталог(ПолноеИмяПапкиМодуляФормы(КаталогСоздания, ОбъектМетаданных, Форма.Имя));
				А1Э_Строки.ВФайлСинхронно(А1Э_Строки.ИзМакета("Обработка.А1Э_МеханизмыГенерацияКода.Расширение__МодульФормы"),
				ПолноеИмяФайлаМодуляФормы(КаталогСоздания, ОбъектМетаданных, Форма.Имя));
			КонецЦикла;
			
		КонецЦикла;
		А = 1;			
	КонецФункции                                       
	
	Функция КорневойДокумент(ОбъектыМетаданных, Контекст)
		Строка = А1Э_Строки.ИзМакета("Обработки.А1Э_МеханизмыГенерацияКода.ВыгрузкаХМЛ_КорневойДокумент");
		А1Э_Строки.Подставить(Строка, "{ИмяОсновнойКонфигурации}", РекомендуемаяВерсияРасширения());
		А1Э_Строки.Подставить(Строка, "{ВерсияФормата}", Контекст.ВерсияФормата);
		Документ = А1Э_Сериализация.ДОМ_ИзСтрокиХМЛ(Строка);
		КонтейнерОбъектов = Документ.ПолучитьЭлементыПоИмени("ChildObjects")[0];
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
			ТипМетаданных = А1Э_Метаданные.ТипМетаданных(ОбъектМетаданных);
			ЭлементОбъекта = А1Э_Сериализация.ДОМ_ДобавитьЭлемент(Документ, А1Э_ГенерацияКода.ДанныеТипаМетаданных(ОбъектМетаданных).Имя, КонтейнерОбъектов);
			ЭлементОбъекта.ТекстовоеСодержимое = ОбъектМетаданных.Имя;
		КонецЦикла;
		Возврат Документ;
	КонецФункции
	
	Функция ДокументОбъектаМетаданных(ОбъектМетаданных, Контекст)
		Строка = А1Э_Строки.ИзМакета("Обработки.А1Э_МеханизмыГенерацияКода.ВыгрузкаХМЛ_ОбъектМетаданных");
		А1Э_Строки.Подставить(Строка, "{ВерсияФормата}", Контекст.ВерсияФормата);
		А1Э_Строки.Подставить(Строка, "{Замена_Имя}", ОбъектМетаданных.Имя);
		А1Э_Строки.Подставить(Строка, "{Замена_Тип}", А1Э_ГенерацияКода.ДанныеТипаМетаданных(ОбъектМетаданных).Имя);
		Для Сч = 1 По 11 Цикл //Подставляем УИДы - 1 для элемента и еще 10 - внутренняя информация.
			А1Э_Строки.Подставить(Строка, "{Замена_УИД" + Сч + "}", Строка(Новый УникальныйИдентификатор));
		КонецЦикла;
		Документ = А1Э_Сериализация.ДОМ_ИзСтрокиХМЛ(Строка);
		Если А1Э_ГенерацияКода.ДанныеТипаМетаданных(ОбъектМетаданных).Имя = "Catalog" Тогда
			УзелРегистров = Документ.ПолучитьЭлементыПоИмени("RegisterRecords")[0];
			УзелРегистров.РодительскийУзел.УдалитьДочерний(УзелРегистров);
		КонецЕсли;
		
		КонтейнерФорм = Документ.ПолучитьЭлементыПоИмени("ChildObjects")[0];
		Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
			Если Форма.РасширениеКонфигурации() <> Неопределено Тогда Продолжить; КонецЕсли;
			
			ЭлементФормы = А1Э_Сериализация.ДОМ_ДобавитьЭлемент(Документ, "Form", КонтейнерФорм);
			ЭлементФормы.ТекстовоеСодержимое = Форма.Имя;
		КонецЦикла;
		Возврат Документ;
	КонецФункции
	
	Функция ПолноеИмяПапкиОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных)
		Возврат КаталогСоздания + "\" + А1Э_ГенерацияКода.ДанныеТипаМетаданных(ОбъектМетаданных).Каталог + "\" + ОбъектМетаданных.Имя;
	КонецФункции
	
	Функция ПолноеИмяПапкиМодуляОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных)
		Возврат ПолноеИмяПапкиОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных) + "\Ext";
	КонецФункции
	
	Функция ПолноеИмяФайлаОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных)
		Возврат ПолноеИмяПапкиОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных) + ".xml";
	КонецФункции
	
	Функция ПолноеИмяФайлаМодуляОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных)
		Возврат ПолноеИмяПапкиМодуляОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных) + "\ObjectModule.bsl"; 
	КонецФункции
	
	Функция ДокументОписанияФормы(ИмяФормы, Контекст)  
		Строка = А1Э_Строки.ИзМакета("Обработки.А1Э_МеханизмыГенерацияКода.ВыгрузкаХМЛ_ОписаниеФормы");
		А1Э_Строки.Подставить(Строка, "{ВерсияФормата}", Контекст.ВерсияФормата);
		А1Э_Строки.Подставить(Строка, "{Замена_Имя}", ИмяФормы);
		А1Э_Строки.Подставить(Строка, "{Замена_УИД}", Строка(Новый УникальныйИдентификатор));
		Документ = А1Э_Сериализация.ДОМ_ИзСтрокиХМЛ(Строка);
		
		Возврат Документ;
	КонецФункции
	
	Функция ПолноеИмяПапкиОписанияФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы)
		Возврат ПолноеИмяПапкиОбъектаМетаданных(КаталогСоздания, ОбъектМетаданных) + "\Forms\" + ИмяФормы;
	КонецФункции
	
	Функция ПолноеИмяФайлаОписанияФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы) 
		Возврат ПолноеИмяПапкиОписанияФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы) + ".xml";
	КонецФункции
	
	Функция ДокументФормы(ОбъектМетаданных, ИмяФормы, Контекст)
		Строка = А1Э_Строки.ИзМакета("Обработки.А1Э_МеханизмыГенерацияКода.ВыгрузкаХМЛ_Форма");
		А1Э_Строки.Подставить(Строка, "{ВерсияФормата}", Контекст.ВерсияФормата);
		Документ = А1Э_Сериализация.ДОМ_ИзСтрокиХМЛ(Строка);
		КонтейнерСобытий = Документ.ПолучитьЭлементыПоИмени("Events")[0];
		Для Каждого ОписаниеСобытия Из ОписанияСобытийФормы(ОбъектМетаданных) Цикл
			ЭлементСобытия = А1Э_Сериализация.ДОМ_ДобавитьЭлемент(Документ, "Event", КонтейнерСобытий);
			ЭлементСобытия.УстановитьАтрибут("name", ОписаниеСобытия.ИмяСистемное);
			ЭлементСобытия.УстановитьАтрибут("callType", "After");
			ЭлементСобытия.ТекстовоеСодержимое = "А1ЭМ_" + ОписаниеСобытия.Имя;
		КонецЦикла;
		Возврат Документ;
	КонецФункции 
	
	Функция ПолноеИмяВнутреннейПапкиФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы)
		Возврат ПолноеИмяПапкиОписанияФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы) + "\Ext";
	КонецФункции
	
	Функция ПолноеИмяФайлаФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы)
		Возврат ПолноеИмяВнутреннейПапкиФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы) + "\" + "Form.xml"; 
	КонецФункции
	
	Функция ПолноеИмяПапкиМодуляФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы)
		Возврат ПолноеИмяВнутреннейПапкиФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы) + "\Form"; 
	КонецФункции
	
	Функция ПолноеИмяФайлаМодуляФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы)
		Возврат ПолноеИмяПапкиМодуляФормы(КаталогСоздания, ОбъектМетаданных, ИмяФормы) + "\Module.bsl";
	КонецФункции
	
	Функция ЗаполнитьАтрибутыЭлементаМетаданных(МетаданныеДОМ)
		МетаданныеДОМ.УстановитьАтрибут("xmlns", "http://v8.1c.ru/8.3/MDClasses");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:app", "http://v8.1c.ru/8.2/managed-application/core");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:cfg", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:cmi", "http://v8.1c.ru/8.2/managed-application/cmi");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:ent", "http://v8.1c.ru/8.1/data/enterprise");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:lf", "http://v8.1c.ru/8.2/managed-application/logform");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:style", "http://v8.1c.ru/8.1/data/ui/style");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:sys", "http://v8.1c.ru/8.1/data/ui/fonts/system");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:v8", "http://v8.1c.ru/8.1/data/core");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:v8ui", "http://v8.1c.ru/8.1/data/ui");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:web", "http://v8.1c.ru/8.1/data/ui/colors/web");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:win", "http://v8.1c.ru/8.1/data/ui/colors/windows");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:xen", "http://v8.1c.ru/8.3/xcf/enums");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:xpr", "http://v8.1c.ru/8.3/xcf/predef");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:xr", "http://v8.1c.ru/8.3/xcf/readable");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
		МетаданныеДОМ.УстановитьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		МетаданныеДОМ.УстановитьАтрибут("version", "2.10");
	КонецФункции
		
	Функция ОписанияСобытийФормы(ОбъектМетаданных)
		Массив = Новый Массив;
		Массив.Добавить(ОписаниеСобытияФормы("ПослеЗаписи", "047d4d09-961c-4bdc-8519-eef10674c35b"));
		Массив.Добавить(ОписаниеСобытияФормы("ПередПереоткрытиемСДругогоСервера", "BeforeReopenFromOtherServer"));
		Массив.Добавить(ОписаниеСобытияФормы("ВыборЗначения", "0bf5cb1e-85d7-4344-8e8e-e8e131006339"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриПереоткрытииСДругогоСервера", "OnReopenFromOtherServer"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриСохраненииДанныхВНастройкахНаСервере", "OnSaveDataInSettingsAtServer"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаВыбора", "ChoiceProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ПослеЗаписиНаСервере", "213d1900-dcad-4616-9f20-3f077156a40f"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаОповещения", "NotificationProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриЧтенииНаСервере", "390d5e4b-e732-4c88-8748-9e211a416984"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаЗаписиНового", "NewWriteProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриОткрытии", "OnOpen"));
		Массив.Добавить(ОписаниеСобытияФормы("ПередЗакрытием", "BeforeClose"));
		Массив.Добавить(ОписаниеСобытияФормы("ВнешнееСобытие", "ExternalEvent"));
		Массив.Добавить(ОписаниеСобытияФормы("АвтоПодборПользователейСистемыВзаимодействия", "CollaborationSystemUsersAutoComplete"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриПовторномОткрытии", "OnReopen"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриЗагрузкеДанныхИзНастроекНаСервере", "OnLoadDataFromSettingsAtServer"));
		Если А1Э_Метаданные.ТипМетаданных(ОбъектМетаданных) = "Справочник" Тогда
			Массив.Добавить(ОписаниеСобытияФормы("ПередЗаписью", "9cc34712-da5f-4faa-a653-343d2085fbe8"));
			Массив.Добавить(ОписаниеСобытияФормы("ПередЗаписьюНаСервере", "bf0ac0e1-bcbb-4dfe-8fc4-0b1923b461a6"));
		Иначе //Это документ
			Массив.Добавить(ОписаниеСобытияФормы("ПередЗаписью", "8a5894c9-d2ff-4c1d-b433-89cc352bbfbc"));
			Массив.Добавить(ОписаниеСобытияФормы("ПередЗаписьюНаСервере", "8f42e083-be92-4102-b1f0-fa58452c1a63"));
		КонецЕсли;
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаПерехода", "NavigationProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриСозданииНаСервере", "OnCreateAtServer"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия", "CollaborationSystemUsersChoiceFormGetProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаАктивизации", "ActivationProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриИзмененииПараметровЭкрана", "OnChangeDisplaySettings"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриЗаписиНаСервере", "c1bc0d3e-d35e-4207-a06b-ece68ed25314"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриЗакрытии", "OnClose"));
		Массив.Добавить(ОписаниеСобытияФормы("ПриИзмененииДоступностиОсновногоСервера", "OnMainServerAvailabilityChange"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаНавигационнойСсылки", "URLProcessing"));
		Массив.Добавить(ОписаниеСобытияФормы("ОбработкаПроверкиЗаполненияНаСервере", "FillCheckProcessingAtServer"));
		Массив.Добавить(ОписаниеСобытияФормы("ПередЗагрузкойДанныхИзНастроекНаСервере", "BeforeLoadDataFromSettingsAtServer"));
		
		Возврат Массив;
	КонецФункции
	
	Функция ОписаниеСобытияФормы(Имя, ИмяСистемное)
		Возврат А1Э_Структуры.Создать(
		"Класс", "А1Э_ОписаниеСобытияФормы",
		"Имя", Имя,
		"ИмяСистемное", ИмяСистемное,
		);
	КонецФункции
	
#КонецЕсли	
#КонецОбласти

#КонецОбласти

#Область Механизмы_ПерехватыСистемы

Функция ПередНачаломРаботыСистемы(Отказ) Экспорт 
	ВыполнитьМеханизмыОбработчика("ПередНачаломРаботыСистемы", Отказ);
КонецФункции

Функция ПриНачалеРаботыСистемы() Экспорт
	ВыполнитьМеханизмыОбработчика("ПриНачалеРаботыСистемы");
КонецФункции 

#КонецОбласти

#Область Механизмы_ПерехватыОбъектов

Функция ПриКопировании(Объект, ОбъектКопирования) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ПриКопировании", Объект, ОбъектКопирования);
КонецФункции 

Функция ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка = Null) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ОбработкаЗаполнения", Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецФункции

Функция ПриУстановкеНовогоКода(Объект, СтандартнаяОбработка, Префикс) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ПриУстановкеНовогоКода", Объект, СтандартнаяОбработка, Префикс);
КонецФункции

Функция ПриУстановкеНовогоНомера(Объект, СтандартнаяОбработка, Префикс) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ПриУстановкеНовогоНомера", Объект, СтандартнаяОбработка, Префикс);
КонецФункции

Функция ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ОбработкаПроверкиЗаполнения", Объект, Отказ, ПроверяемыеРеквизиты);
КонецФункции 

Функция ПередЗаписью(Объект, Отказ, РежимЗаписи = Null, РежимПроведения = Null) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ПередЗаписью", Объект, Отказ, РежимЗаписи, РежимПроведения);
КонецФункции

Функция ПриЗаписи(Объект, Отказ) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ПриЗаписи", Объект, Отказ);
КонецФункции

Функция ПередУдалением(Объект, Отказ) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ПередУдалением", Объект, Отказ);
КонецФункции

Функция ОбработкаФормированияПоВерсииИсторииДанных(Объект, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка) Экспорт 
	ВыполнитьМеханизмыОбработчикаОбъекта("ОбработкаФормированияПоВерсииИсторииДанных", Объект, ДанныеВерсии, НомерВерсии, ИсключитьДанные, СтандартнаяОбработка);
КонецФункции

Функция ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ОбработкаПроведения", Объект, Отказ, РежимПроведения);
КонецФункции

Функция ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	ВыполнитьМеханизмыОбработчикаОбъекта("ОбработкаУдаленияПроведения", Объект, Отказ);
КонецФункции

#КонецОбласти

#Область Механизмы_ПерехватыФорм

//Реализация поддержки событий вроде "ФормаЭлементаПриСозданииНаСервере" и "ФормаСпискаПриОткрытии" для любых типов форм.
Функция ВыполнитьОбработчикСобытияФормы(ИмяОбработчика, Форма, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null) Экспорт
	ТипФормы = А1Э_Формы.ТипФормы(Форма);
	ВыполнитьМеханизмыОбработчикаОбъекта("Форма" + ИмяОбработчика + "," + ТипФормы + ИмяОбработчика, Форма, П1, П2, П3, П4, П5, П6, П7); 
КонецФункции

#Область СтандартныеОбработчики

Функция ФормаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	МассивОписаний = Новый Массив;
	ВыполнитьОбработчикСобытияФормы("ПриСозданииОбъектов", Форма, Отказ, МассивОписаний);
	А1Э_УниверсальнаяФорма.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);
	
	ВыполнитьОбработчикСобытияФормы("ПриСозданииНаСервере", Форма, Отказ, СтандартнаяОбработка);
КонецФункции

Функция ФормаПриОткрытии(Форма, Отказ) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПриОткрытии", Форма, Отказ);
	ВыполнитьОбработчикСобытияФормы("ОбновитьСвойстваЭлементов", Форма);
КонецФункции

Функция ФормаПриПовторномОткрытии(Форма) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПриПовторномОткрытии", Форма);
КонецФункции

Функция ФормаПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПередЗакрытием", Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
КонецФункции

Функция ФормаПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПриЗакрытии", Форма, ЗавершениеРаботы);
КонецФункции

Функция ФормаОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ОбработкаВыбора", Форма, ВыбранноеЗначение, ИсточникВыбора);
КонецФункции

Функция ФормаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	ВыполнитьОбработчикСобытияФормы("ОбработкаОповещения", Форма, ИмяСобытия, Параметр, Источник);
КонецФункции

Функция ФормаОбработкаАктивизации(Форма, АктивныйОбъект, Источник) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ОбработкаАктивизации", Форма, АктивныйОбъект, Источник);
КонецФункции

Функция ФормаОбработкаЗаписиНового(Форма, НовыйОбъект, Источник, СтандартнаяОбработка) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ОбработкаЗаписиНового", Форма, НовыйОбъект, Источник, СтандартнаяОбработка);
КонецФункции

Функция ФормаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПриЧтенииНаСервере", Форма, ТекущийОбъект);
КонецФункции

Функция ФормаПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПередЗаписью", Форма, Отказ, ПараметрыЗаписи);
КонецФункции

Функция ФормаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПередЗаписьюНаСервере", Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецФункции

Функция ФормаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПриЗаписиНаСервере", Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецФункции

Функция ФормаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПослеЗаписиНаСервере", Форма, ТекущийОбъект, ПараметрыЗаписи);
КонецФункции

Функция ФормаПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПослеЗаписи", Форма, ПараметрыЗаписи);
КонецФункции

Функция ФормаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ОбработкаПроверкиЗаполненияНаСервере", Форма, Отказ, ПроверяемыеРеквизиты);
КонецФункции

Функция ФормаВнешнееСобытие(Форма, Источник, Событие, Данные) Экспорт
	ВыполнитьОбработчикСобытияФормы("ВнешнееСобытие", Форма, Источник, Событие, Данные);
КонецФункции

Функция ФормаПриСохраненииДанныхВНастройкахНаСервере(Форма, Настройки) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПриСохраненииДанныхВНастройкахНаСервере", Форма, Настройки);
КонецФункции

Функция ФормаПередЗагрузкойДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПередЗагрузкойДанныхИзНастроекНаСервере", Форма, Настройки);
КонецФункции

Функция ФормаПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПриЗагрузкеДанныхИзНастроекНаСервере", Форма, Настройки);
КонецФункции

Функция ФормаОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	ВыполнитьОбработчикСобытияФормы("ОбработкаНавигационнойСсылки", Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецФункции

Функция ФормаОбработкаПерехода(Форма, ОбъектПерехода, СтандартнаяОбработка) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ОбработкаПерехода", Форма, ОбъектПерехода, СтандартнаяОбработка);
КонецФункции

Функция ФормаВыборЗначения(Форма, СтандартнаяОбработка) Экспорт
	ВыполнитьОбработчикСобытияФормы("ВыборЗначения", Форма, СтандартнаяОбработка);
КонецФункции

Функция ФормаПриИзмененииПараметровЭкрана(Форма) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ПриИзмененииПараметровЭкрана", Форма);
КонецФункции

Функция ФормаАвтоПодборПользователейСистемыВзаимодействия(Форма, Текст, ДанныеВыбора, НазначениеВыбора, СтандартнаяОбработка) Экспорт
	ВыполнитьОбработчикСобытияФормы("АвтоПодборПользователейСистемыВзаимодействия", Форма, Текст, ДанныеВыбора, НазначениеВыбора, СтандартнаяОбработка);
КонецФункции

Функция ФормаОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия(Форма, НазначениеВыбора, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт 
	ВыполнитьОбработчикСобытияФормы("ОбработкаПолученияФормыВыбораПользователейСистемыВзаимодействия", Форма, НазначениеВыбора, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
КонецФункции

#КонецОбласти 

#Область ОбработчикиА1 

// Вызывается для обновления настроек элементов (видимость, доступность, прочее). 
// Может быть вызвано как в клиентском, так и в серверном контексте
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения -  
//  П1		 - Неопределено	 - не используется. Существует для того, чтобы этот обработчик можно было повесить на любое событие формы.
//  П2		 - Неопределено	 - см. П1
//  П3		 - Неопределено	 - см. П1
//  П4		 - Неопределено	 - см. П1
//  П5		 - Неопределено	 - см. П1
// 
// Возвращаемое значение:
//   - 
//
Функция ФормаОбновитьСвойстваЭлементов(Форма, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено, П4 = Неопределено, П5 = Неопределено) Экспорт
	ВыполнитьОбработчикСобытияФормы("ОбновитьСвойстваЭлементов", Форма);
КонецФункции

// Выполняется на сервере при закрытии формы. В режиме "ЗавершениеРаботы" НЕ ВЫПОЛНЯЕТСЯ.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - 
//  Отказ				 - Булево - если будет установлено в Истина, закрытие формы выполнено не будет.
//  СтандартнаяОбработка - Булево - см. обработчик "ПередЗакрытием".
// 
// Возвращаемое значение:
//   - 
//
Функция ФормаПередЗакрытиемНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	ВыполнитьОбработчикСобытияФормы("ПередЗакрытиемНаСервере", Форма, Отказ, СтандартнаяОбработка);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Устарело

//Используйте Подключить()
//
Функция ДобавитьКОбъектам(СписокОбъектов, Знач Объекты, Знач Механизмы, Контекст = Истина) Экспорт 
	Возврат Подключить(СписокОбъектов, Объекты, Механизмы, Контекст);
КонецФункции

// Используйте Добавить()
//                                            
// Параметры:
//  Имя		 - Строка - имя механизма 
//  Модуль	 - Строка - имя общего модуля, в котором располагается механизм. По умолчанию равно имени механизма.
//  Префикс	 - Строка - префикс всех функций механизма. Может быть пустым.
// 
// Возвращаемое значение:
//  Структура - 
//
Функция Создать(Имя, Модуль = "", Префикс = "") Экспорт
	Возврат А1Э_Структуры.Создать(
	"Класс", "Механизм",
	"Имя", Имя,
	"Модуль", ?(Модуль <> "", Модуль, Имя),
	"Префикс", Префикс,
	"Обработчики", Новый Соответствие,
	"ПорядокВыполнения", 0);
КонецФункции

#КонецОбласти

#Область ОбщиеМеханизмы

#Область РегулярныеПроцессы

// Подключает регулярные процессы - события механизмов, возникающих с определенной периодичностью на каждом клиенте.
// Используемые события:
//	А1Э_РегулярныеПроцессы_КаждыеПятьМинутНаСервере(ДанныеСервера) - происходит каждые пять минут для каждого клиента на сервере. ДанныеСервера являются структурой и будут переданы следующему клиентскому событию.
//  А1Э_РегулярныеПроцессы_КаждыеПятьМинут(ДанныеСервера) - происходит на клиенте непосредственно после каждого серверного вызова.
// Возвращаемое значение:
//   - 
//
Функция РегулярныеПроцессы__НастройкиМеханизма() Экспорт
	Настройки = А1Э_Механизмы.НовыйНастройкиМеханизма();
	
	Настройки.Обработчики.Вставить("ПриНачалеРаботыСистемы", Истина);
	
	Возврат Настройки;
КонецФункции

#Если Клиент Тогда
	
	Функция РегулярныеПроцессы__ПриНачалеРаботыСистемы() Экспорт
		ПодключитьОбработчикОжидания("А1Э_РегулярныеПроцессы__КаждыеПятьМинут", 300);
	КонецФункции 
	
	Функция РегулярныеПроцессы__КаждыеПятьМинут() Экспорт
		РабочиеМеханизмыСерверногоВызова = РабочиеМеханизмы("А1Э_РегулярныеПроцессы_КаждыеПятьМинутНаСервере");
		Если РабочиеМеханизмыСерверногоВызова.Количество() = 0 Тогда
			//Если ничего не будет выполняться - не будем трясти сервер попусту.
			ДанныеСервера = Новый Структура;
		Иначе
			ДанныеСервера = А1Э_ОбщееСервер.РезультатФункции(ИмяМодуля() + ".РегулярныеПроцессы__КаждыеПятьМинутСервере");
		КонецЕсли;
		ВыполнитьМеханизмыОбработчика("А1Э_РегулярныеПроцессы_КаждыеПятьМинут", ДанныеСервера);
	КонецФункции 
#Иначе
	
	Функция РегулярныеПроцессы__КаждыеПятьМинутСервере() Экспорт 
		ДанныеСервера = Новый Структура;
		ВыполнитьМеханизмыОбработчика("А1Э_РегулярныеПроцессы_КаждыеПятьМинутНаСервере", ДанныеСервера);
		Если ТипЗнч(ДанныеСервера) <> Тип("Структура") Тогда
			Возврат Новый Структура;
		Иначе
			Возврат ДанныеСервера;
		КонецЕсли;
	КонецФункции 
#КонецЕсли
#КонецОбласти

#КонецОбласти

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_Механизмы"; 	
КонецФункции 