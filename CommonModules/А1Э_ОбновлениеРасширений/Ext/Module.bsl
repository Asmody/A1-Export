Функция НастройкиМеханизма() Экспорт
	Настройки = А1Э_Механизмы.НовыйНастройкиМеханизма();
	
	Настройки.Обработчики.Вставить("ПередНачаломРаботыСистемы", Истина);
	
	Возврат Настройки;
КонецФункции 

#Если Клиент Тогда
	
	Функция ПередНачаломРаботыСистемы(Отказ) Экспорт
		А1Э_ОбщееСервер.РезультатФункции("А1Э_ОбновлениеРасширений.ПередНачаломРаботыСистемыСервер", Отказ);
	КонецФункции 
	
#КонецЕсли
#Если НЕ Клиент Тогда
	
	Функция ПередНачаломРаботыСистемыСервер(Отказ) Экспорт 
		Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда Возврат Неопределено КонецЕсли;
		
		Если Метаданные.Справочники.Найти("А1Д_Расширения") = Неопределено Тогда
			Сообщить("Для работы механизма обновления расширений необходимо подключить расширение А1Д!");
			Возврат Неопределено;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Обновления = ПолучитьОбновления();
		Если Обновления.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		
		Попытка
			А1Э_Механизмы.ВыполнитьМеханизмыОбработчика("А1Э_ПриОбновленииРасширений", Обновления);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			А1Э_Служебный.СлужебноеИсключение("Ошибка при выполнении обработчиков обновления - " + ОписаниеОшибки);
		КонецПопытки;
		
		ЗафиксироватьИзменения(Обновления);
	КонецФункции
	
	Функция ПолучитьОбновления() Экспорт
		Результат = Новый Соответствие;		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расширения.Ссылка КАК Ссылка,
		|	Расширения.Наименование КАК Имя,
		|	Расширения.Версия КАК СтараяВерсия
		|ИЗ
		|	А1Д_Расширения КАК Расширения";
		А1Э_Строки.Подставить(Запрос.Текст, "А1Д_Расширения", "Справочник.А1Д_Расширения");
		Выборка = Запрос.Выполнить().Выбрать();
		ДанныеРасширений = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ДанныеРасширения = НовыйДанныеРасширения();
			ЗаполнитьЗначенияСвойств(ДанныеРасширения, Выборка);
			ДанныеРасширений.Вставить(Выборка.Имя, ДанныеРасширения);
		КонецЦикла;
		
		Расширения = РасширенияКонфигурации.Получить();
		Для Каждого Расширение Из Расширения Цикл
			ДанныеРасширения = ДанныеРасширений[Расширение.Имя];
			Если ДанныеРасширения = Неопределено Тогда //Новое расширение
				ДанныеРасширения = НовыйДанныеРасширения();
				ЗаполнитьЗначенияСвойств(ДанныеРасширения, Расширение);
				Результат.Вставить(ДанныеРасширения.Имя, ДанныеРасширения);
				Продолжить;
			КонецЕсли;
			ДанныеРасширения.Существует = Истина;
			ДанныеРасширения.Версия = Расширение.Версия;
			Если ДанныеРасширения.Версия <> ДанныеРасширения.СтараяВерсия Тогда //Обновленное расширение
				Результат.Вставить(ДанныеРасширения.Имя, ДанныеРасширения);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Пара Из ДанныеРасширений Цикл
			Если Пара.Значение.Существует = Неопределено Тогда //Удаленное расширение.
				Пара.Значение.Существует = Ложь;
				Результат.Вставить(Пара.Ключ, Пара.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
	КонецФункции 
	
	Функция ЗафиксироватьИзменения(Обновления) Экспорт
		Для Каждого Пара Из Обновления Цикл
			ДанныеРасширения = Пара.Значение;
			
			Если НЕ ЗначениеЗаполнено(ДанныеРасширения.Ссылка) Тогда
				ОбъектРасширения = Справочники["А1Д_Расширения"].СоздатьЭлемент();
			Иначе
				ОбъектРасширения = ДанныеРасширения.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			Если ДанныеРасширения.Существует = Ложь Тогда
				ОбъектРасширения.Удалить();
				Сообщить("Зарегистрировано удаление расширения " + ДанныеРасширения.Имя);
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбъектРасширения, ДанныеРасширения);
			ОбъектРасширения.Наименование = ДанныеРасширения.Имя;
			
			ОбъектРасширения.Записать();
			Если НЕ ЗначениеЗаполнено(ДанныеРасширения.Ссылка) Тогда
				Сообщить("Зафиксировано добавление расширения " + ДанныеРасширения.Имя + " версии " + ДанныеРасширения.Версия);
			Иначе
				Сообщить("Зафиксировано обновление расширения " + ДанныеРасширения.Имя + " с версии " + ДанныеРасширения.СтараяВерсия + " на версию " + ДанныеРасширения.Версия);
			КонецЕсли;
		КонецЦикла
	КонецФункции 
	
#КонецЕсли

Функция НовыйДанныеРасширения() 
	Возврат Новый Структура("Ссылка,Имя,Версия,СтараяВерсия,Существует");
КонецФункции

// Определяет необходимость обработки расширения. Необходимость возникает, когда осуществляется прыжок на или через указанную версию. 
//
// Параметры:
//  Обновления - Соответствие - см. функцию ПолучитьОбновления(). Эта переменная передается в событие
//    <А1Э_ПриОбновленииРасширений> первым параметром.
//  ИмяРасширения - Строка - 
//  Версия - Строка - Важно - сейчас сравнение выполняется через сравнение строк. 
// 
// Возвращаемое значение:
//   - Булево.
//
Функция НужноОбработатьРасширение(Обновления, ИмяРасширения, Версия) Экспорт 
	ДанныеРасширения = Обновления[ИмяРасширения];
	Если ДанныеРасширения = Неопределено Тогда Возврат Ложь; КонецЕсли; //Версия не изменялась.
	Возврат НужноОбработать(ДанныеРасширения, Версия);
КонецФункции

#Область Устарело

// Устарело, рекомендуется использовать НужноОбработатьРасширение(). 
//
// Параметры:
//  ДанныеРасширения - Структура - см. функцию НовыйДанныеРасширения(). 
//  Версия			 - Строка - представляет номер версии. Важно - сейчас сравнение осуще 
// 
// Возвращаемое значение:
//   - Булево.
//
Функция НужноОбработать(ДанныеРасширения, Версия) Экспорт
	Если НЕ ЗначениеЗаполнено(ДанныеРасширения.Ссылка) Тогда Возврат Ложь; КонецЕсли;
	Возврат ДанныеРасширения.СтараяВерсия < Версия И ДанныеРасширения.Версия >= Версия; 	
КонецФункции

#КонецОбласти 
