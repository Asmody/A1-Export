Функция ЗаполнитьПараметрСеансаГруппыТекущегоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Метаданные.ПараметрыСеанса.Найти("А1Э_ГруппыТекущегоПользователя") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ГруппыПользователей") = Неопределено Тогда
		ПараметрыСеанса["А1Э_ГруппыТекущегоПользователя"] = Новый ФиксированныйМассив(Новый Массив);
		Возврат Неопределено;
	КонецЕсли;
	МодульПользователи = Вычислить("Пользователи");
	МассивГруппПользователей = АктивныеГруппыПользователей(МодульПользователи.ТекущийПользователь());
	ПараметрыСеанса["А1Э_ГруппыТекущегоПользователя"] = Новый ФиксированныйМассив(МассивГруппПользователей);
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции

Функция АктивныеГруппыПользователей(Пользователи) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Состав.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК Состав
	|ГДЕ
	|	Состав.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И Состав.Пользователь В(&Пользователи)";
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции 

Функция ОсновнаяГруппаТекущегоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	МодульПользователи = Вычислить("Пользователи");
	Возврат ОсновнаяГруппаПользователя(МодульПользователи.ТекущийПользователь());
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции

Функция ГруппыТекущегоПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса["А1Э_ГруппыТекущегоПользователя"];
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции

Функция ОсновнаяГруппаПользователя(Пользователь) Экспорт
	Возврат А1Э_ДопРеквизиты.Значение(Пользователь, "А1_ОсновнаяГруппаПользователя", "А1"); 
КонецФункции

Функция ОткрытКонфигуратор() Экспорт
	Соединения = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из Соединения Цикл
		Если Соединение.ИмяПриложения = "Designer" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;	
КонецФункции 

Функция ИмяТекущегоПользователяИБ() Экспорт
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
КонецФункции

// Проверяет, соответствует ли пароль сохраненному в системе.
//
// Параметры:
//  Пароль		 - Строка - 
//  Пользователь - см. А1Э_СтандартныеТипы.ПользовательИБПолучить - 
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПарольСоответствует(Пароль, Пользователь = Неопределено) Экспорт
	ПользовательИБ = А1Э_СтандартныеТипы.ПользовательИБПолучить(Пользователь);
	Возврат ПользовательИБ.СохраняемоеЗначениеПароля = ХэшПароля(Пароль, ПользовательИБ);	
КонецФункции

Функция ХэшПароля(Пароль, Знач Пользователь = Неопределено) Экспорт
	//Этот метод мутирует объект <ПользовательИнформационнойБазы>, несмотря на откат транзакции.
	//Чтобы это не сказывалось, мы создаем этот объект заново и мутируем его.
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.УникальныйИдентификатор);
	Иначе
		ПользовательИБ = А1Э_СтандартныеТипы.ПользовательИБПолучить(Пользователь);
	КонецЕсли;

	НачатьТранзакцию();
	ПользовательИБ.Пароль = Пароль;
	ПользовательИБ.Записать();
	ВременныйХэш = ПользовательИБ.СохраняемоеЗначениеПароля;
	ОтменитьТранзакцию();
	Возврат ВременныйХэш;
КонецФункции

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_Пользователи";	
КонецФункции 