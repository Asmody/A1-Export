#Область ВРазработке

Функция ЗначениеСубконто(Счет, КоллекцияСубконто, ИдентификаторСубконто)
	
КонецФункции 

Функция УстановитьСубконто(Счет, КоллекцияСубконто, ИдентификаторСубконто, ЗначениеСубконто)
	Если НЕ ЗначениеЗаполнено(ИдентификаторСубконто) Тогда Возврат Неопределено; КонецЕсли;
	
	ВидСубконто = ВидСубконтоСчета(ИдентификаторСубконто, Счет);
	
			
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		КоллекцияСубконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецФункции

// Возвращает вид субконто, если оно присутствует у счета. Иначе возвращает неопределено
//
// Параметры:
//  ИдентификаторСубконто	 - 	 - 
//  Счет					 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВидСубконтоСчета(ИдентификаторСубконто, Счет) 
	СвойстваСчета = СвойстваСчета(Счет);
	Если НЕ А1Э_Общее.РавноОдномуИз(ТипЗнч(ИдентификаторСубконто), Тип("Строка"), Тип("Число")) Тогда
		//Считаем, что передана ссылка на вид субконто. Не проверяем.
		ВидСубконто = ИдентификаторСубконто;
	ИначеЕсли ТипЗнч(ИдентификаторСубконто) = Тип("Число") Тогда 
		Если ИдентификаторСубконто > СвойстваСчета.КоличествоСубконто Тогда
			А1Э_Служебный.СлужебноеИсключение("Попытка обращения к субконто №" + ИдентификаторСубконто + " на счете " + Счет
			+ ", имеющем только " + СвойстваСчета.КоличествоСубконто + " субконто!");
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИдентификаторСубконто];
	Иначе //Строка
		МенеджерВидаСубконто = А1Э_Метаданные.МенеджерОбъекта(Счет.Метаданные().ВидыСубконто.ПолноеИмя());
		ВидСубконто = МенеджерВидаСубконто[ИдентификаторСубконто]; 
	КонецЕсли;
	Для Сч = 1 По СвойстваСчета.КоличествоСубконто Цикл
		
	КонецЦикла;
КонецФункции

Функция СвойстваСчета(Счет, ПовтИсп = Истина)
	Если ПовтИсп = Истина Тогда
		Возврат А1Э_ПовторноеИспользование.РезультатФункции(ИмяМодуля() + ".СвойстваСчета", Счет, Ложь);
	КонецЕсли;
	
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("Порядок"                        , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	
	МаксКоличествоСубконто = Счет.Метаданные().МаксКоличествоСубконто;
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Порядок,
	|	Хозрасчетный.Наименование,
	|	Хозрасчетный.Вид,
	|	Хозрасчетный.Забалансовый
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	А1Э_Строки.Подставить(Запрос.Текст, "ПланСчетов.Хозрасчетный", Счет.Метаданные().ПолноеИмя());
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеСчета);
КонецФункции

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_РегистрыБухгалтерии";
КонецФункции 

#КонецОбласти 

