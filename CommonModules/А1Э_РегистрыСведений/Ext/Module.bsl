#Область НеЗакончено

Функция ЗаписатьВНепериодическийНезависимыйРегистрСведенийНеЗакончено(ТаблицаЗначений, ИмяРегистра) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;		
	#КонецЕсли 
	МассивИзмерений = Новый Массив;
	РабочаяТаблица = ТаблицаЗначений.Скопировать();
	Для Каждого Измерение ИЗ Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
		МассивИзмерений.Добавить(Измерение.Имя);
	КонецЦикла;
	СтрокаИзмерений = СтрСоединить(МассивИзмерений,",");
	РабочаяТаблица.Свернуть(СтрокаИзмерений);
	Для Каждого Строка Из РабочаяТаблица Цикл
		НаборЗаписей = РегистрыСведений[ИмяРегистра];
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСуществующиеЗаписиРегистра(ТаблицаЗначений, ИмяРегистра) Экспорт
	МассивЗапросов = Новый Массив;
	МассивЗапросов.Добавить(ТекстЗапросаЗагрузкиТаблицыЗначенийВоВременнуюТаблицу(ТаблицаЗначений, "ТаблицаКЗагрузке"));
	
КонецФункции

Функция ТекстЗапросаЗагрузкиТаблицыЗначенийВоВременнуюТаблицу(ТаблицаЗначений, ИмяВременнойТаблицы, ИмяПараметраЗапроса = "ТаблицаЗначений")
	МассивСтрокЗапроса = Новый Массив;
	МассивСтрокЗапроса.Добавить("ВЫБРАТЬ");
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		МассивСтрокЗапроса.Добавить("Таблица." + Колонка.Имя + ",");
	КонецЦикла;
	ПоследняяСтрока = МассивСтрокЗапроса[МассивСтрокЗапроса.Количество() - 1];
	МассивСтрокЗапроса[МассивСтрокЗапроса.Количество() - 1] = Лев(ПоследняяСтрока, СтрДлина(ПоследняяСтрока) - 1);
	МассивСтрокЗапроса.Добавить("ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	МассивСтрокЗапроса.Добавить("ИЗ &" + ИмяПараметраЗапроса + " КАК Таблица");
	ТекстЗапроса = СтрСоединить(МассивСтрокЗапроса, Символы.ПС);
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПоискаСуществующихЗаписей(ИмяРегистра, ИмяВременнойТаблицы)
	МассивСтрокЗапроса = Новый Массив;	
КонецФункции

Функция МассивИзмерений()
	
КонецФункции 

//Функция ОчиститьНезависимыйРегистр(ИмяРегистра, Отбор) Экспорт
//	//Регистр = РегистрыСведений[ИмяРегистра];
//	//МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
//	//СтруктураЗапроса = А1Э_Запросы.НовыйСтруктураЗапроса();
//	//А1Э_Запросы.ДобавитьИсточникДанных(СтруктураЗапроса, "РегистрСведений." + ИмяРегистра, ИмяРегистра);
//	//Для Каждого Измерение Из Метаданные.Измерения Цикл
//	//	А1Э_Запросы.ДобавитьПоле(СтруктураЗапроса, Измерение.Имя);
//	//КонецЦикла;
//	//Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
//	//	А1Э_Запросы.ДобавитьПоле(СтруктураЗапроса, "Период");
//	//КонецЕсли;
//	////Для Каждого
//	//А1Э_Запросы.ДобавитьУсловие(СтруктураЗапроса, "");
//КонецФункции

#КонецОбласти 

Функция ЗаписатьВНепериодическийНезависимыйРегистрСведений(ТаблицаЗначений, ИмяРегистра) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;		
	#КонецЕсли
	
	НачатьТранзакцию();
	Для Каждого Строка Из ТаблицаЗначений Цикл
		МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки;
		КонецПопытки
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

Функция Очистить(ИмяРегистра, Знач Ключи = Неопределено) Экспорт
	РабочиеКлючи = А1Э_Массивы.Массив(Ключи);
	Если РабочиеКлючи.Количество() = 0 Тогда
		РабочиеКлючи.Добавить(Новый Структура);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	НачатьТранзакцию();
	Для Каждого Структура Из РабочиеКлючи Цикл
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Для Каждого Пара Из Структура Цикл
			Если МетаданныеРегистра.Измерения.Найти(Пара.Ключ) = Неопределено Тогда
				Если МетаданныеРегистра.Ресурсы.Найти(Пара.Ключ) = Неопределено И МетаданныеРегистра.Реквизиты.Найти(Пара.Ключ) = Неопределено Тогда
					А1Э_Служебный.СлужебноеИсключение("Неверные ключи в операции очистки регистра - имя ключа не совпадает с измерением или ресурсом");
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			НаборЗаписей.Отбор[Пара.Ключ].Установить(Пара.Значение);
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецФункции

Функция ДобавитьЗаписи(ИмяРегистра, Знач МассивДанных) Экспорт
	МассивДанных = А1Э_Массивы.Массив(МассивДанных);
	НачатьТранзакцию();
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		Менеджер = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер, СтруктураДанных);
		Менеджер.Записать();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецФункции 

Функция ЗначенияКолонкиУникальны(Знач ИмяРегистраИлиНаборЗаписей, Знач ИмяКолонки, Знач ЗначенияДляПроверки = Неопределено) Экспорт
	Если ТипЗнч(ИмяРегистраИлиНаборЗаписей) = Тип("Строка") Тогда
		ИмяРегистра = ИмяРегистраИлиНаборЗаписей;
	Иначе
		ИмяРегистра = ИмяРегистраИлиНаборЗаписей.Метаданные().Имя;
		ЗначенияДляПроверки = ИмяРегистраИлиНаборЗаписей; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ИмяКолонки КАК Значение,
	|	КОЛИЧЕСТВО(Таблица.ИмяКолонки) КАК Количество
	|ИЗ
	|	ИмяРегистра КАК Таблица
	|ГДЕ
	|	Таблица.ИмяКолонки В(&ЗначенияДляПроверки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ИмяКолонки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Таблица.ИмяКолонки) > 1";
	Если ЗначенияДляПроверки = Неопределено Тогда
		А1Э_Строки.Подставить(Запрос.Текст, "Таблица.ИмяИзмерения В(&МассивЗначений)", "ИСТИНА");
	Иначе
		Если ТипЗнч(ЗначенияДляПроверки) <> Тип("Массив") Тогда //Считаем, что у нас НаборЗаписей регистра сведений.
			ЗначенияДляПроверки = ЗначенияДляПроверки.ВыгрузитьКолонку(ИмяКолонки);
		КонецЕсли;
		Запрос.УстановитьПараметр("ЗначенияДляПроверки", ЗначенияДляПроверки);
	КонецЕсли;
	А1Э_Строки.Подставить(Запрос.Текст, "ИмяРегистра", "РегистрСведений." + ИмяРегистра);
	А1Э_Строки.Подставить(Запрос.Текст, "ИмяКолонки", ИмяКолонки);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		А1Э_Сообщения.СообщитьПоШаблону("Не пройдена проверка уникальности: в регистре сведений [ИмяРегистра] в колонке [ИмяКолонки] значение [Значение] повторяется [Количество] раз!",
		А1Э_Структуры.Создать(
		"ИмяРегистра", ИмяРегистра,
		"ИмяКолонки", ИмяКолонки,
		"Значение", Выборка.Значение,
		"Количество", Выборка.Количество,
		));
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция Независимый(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		ИмяРегистра = Идентификатор.Имя;
	Иначе //ожидается строка.
		ИмяРегистра = А1Э_Строки.После(Идентификатор, ".");
	КонецЕсли;
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Возврат НЕ А1Э_Общее.Свойство(НаборЗаписей.Отбор, "Регистратор");
КонецФункции 