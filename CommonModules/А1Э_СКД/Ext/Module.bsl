#Если НЕ Клиент Тогда
	
	// Результат выполнения СКД. Выводится в переменную Результат в зависимости от её типа.
	//   
	// Параметры:
	//  СхемаКомпоновкиДанных	 - 	 - 
	//  Настройки				 - Структура - Структура может содержать ключи:
	//    ВнешниеНаборыДанных - Структура,ТаблицаЗначений - если передается ТаблицаЗначений, она будет передана в СКД как "Таблица".
	//    КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
	//    НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных
	//	Альтернативно, КомпоновщикНастроек, НастройкиКомпоновкиДанных или МакетОформленияКомпоновкиДанных можно передать как значение.
	//    
	//  Результат			 - ТаблицаЗначений, ДеревоЗначений, ТабличныйДокумент - в этот параметр будет передан результат. 
	//  ДанныеРасшифровки	 - Неопределено - в этот параметр будут помещены данные расшифовки. 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция РезультатВыполнения(СхемаКомпоновкиДанных, Настройки = Неопределено, Результат, ДанныеРасшифровки = Неопределено) Экспорт
		#Если Сервер И НЕ Сервер Тогда
			СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		#КонецЕсли 	
		
		ВременноеЗначение = Неопределено;
		
		Если ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			РабочиеНастройки = Новый Структура("КомпоновщикНастроек", Настройки);
		ИначеЕсли ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
			РабочиеНастройки = Новый Структура("НастройкиКомпоновкиДанных", Настройки);
		ИначеЕсли ТипЗнч(Настройки) = Тип("МакетОформленияКомпоновкиДанных") Тогда
			РабочиеНастройки = Новый Структура("МакетОформления", Настройки);
		Иначе
			РабочиеНастройки = А1Э_Структуры.Скопировать(Настройки);
		КонецЕсли;
		
		#Если Сервер И НЕ Сервер Тогда
			РабочиеНастройки = Новый Структура;		
		#КонецЕсли 
		
		Если РабочиеНастройки.Свойство("КомпоновщикНастроек", ВременноеЗначение) Тогда
			НастройкиКомпоновкиДанных = ВременноеЗначение.ПолучитьНастройки();
		ИначеЕсли РабочиеНастройки.Свойство("НастройкиКомпоновкиДанных", ВременноеЗначение) Тогда
			НастройкиКомпоновкиДанных = ВременноеЗначение;
		Иначе
			НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		Если РабочиеНастройки.Свойство("ВнешниеНаборыДанных") Тогда
			Если ТипЗнч(РабочиеНастройки.ВнешниеНаборыДанных) <> Тип("Структура") Тогда
				РабочиеНастройки.Вставить("ВнешниеНаборыДанных", А1Э_Структуры.Создать(
				"Таблица", РабочиеНастройки.ВнешниеНаборыДанных,
				));
			КонецЕсли;
		КонецЕсли;
		Если ДанныеРасшифровки = Неопределено Тогда
			ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
			ВыводитьВТабличныйДокумент = Истина;
		ИначеЕсли ТипЗнч(Результат) = Тип("ТаблицаЗначений") Или ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
			ВыводитьВТабличныйДокумент = Ложь;
		Иначе
			А1Э_Служебный.ИсключениеНеверныйТип("Результат", "А1Э_СКД.РезультатВыполнения", Результат, "ТаблицаЗначений,ДеревоЗначений,ТабличныйДокумент");
		КонецЕсли;
		
		МакетОформления = А1Э_Структуры.ЗначениеСвойства(РабочиеНастройки, "МакетОформления");
		Если ТипЗнч(МакетОформления) = Тип("ЭлементБиблиотекиМакетовОформленияКомпоновкиДанных") Тогда
			МакетОформления = МакетОформления.ПолучитьМакет();
		КонецЕсли;
		
		Если ВыводитьВТабличныйДокумент Тогда 
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки, МакетОформления);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки, МакетОформления, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		КонецЕсли;
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, А1Э_Структуры.ЗначениеСвойства(РабочиеНастройки, "ВнешниеНаборыДанных"), ДанныеРасшифровки); 
		
		Результат.Очистить();
		
		Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
			ПроцессорВывода.УстановитьДокумент(Результат); 
		ИначеЕсли ТипЗнч(Результат) = Тип("ТаблицаЗначений") Или ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Результат);
		КонецЕсли;
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
	КонецФункции
	
	// Создает и выполняет СКД по переданной таблице значений.
	//
	// Параметры:
	//  ТаблицаЗначений		 - ТаблицаЗначений - является источником данных для СКД
	//  Настройки			 -   - см. А1Э_СКД.РезультатВыполнения() 
	//  СтруктураОтчета		 - Структура - может содержать ключи "Ресурсы" , "Группировки", "Колонки" - массивы строк или строки, разделенные запятыми.
	//  Результат			 - ТаблицаЗначений, ДеревоЗначений, ТабличныйДокумент - в этот параметр будет передан результат. 
	//  ДанныеРасшифровки	 - Неопределено - в этот параметр будут помещены данные расшифовки. 
	//  АдресСКД			 - Строка, Неопределено - Если не равно неопределено, но в этот параметр будет помещен адрес СКД во временном хранилище. 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция РезультатВыполненияПоТаблицеЗначений(ТаблицаЗначений, Настройки = Неопределено, СтруктураОтчета, Результат, ДанныеРасшифровки = Неопределено, АдресСКД = Неопределено) Экспорт 
		ДанныеСКД = Новый Структура("Ресурсы,Группировки,Колонки,ВертикальныеГруппировки");
		ЗаполнитьЗначенияСвойств(ДанныеСКД, СтруктураОтчета);
		СхемаКомпоновкиДанных = СоздатьПоТаблицеЗначений(ТаблицаЗначений, 
		ДанныеСКД.Ресурсы, ДанныеСКД.Группировки, ДанныеСКД.Колонки, ДанныеСКД.ВертикальныеГруппировки);
		Если АдресСКД <> Неопределено Тогда
			АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		КонецЕсли;
		
		РабочиеНастройки = А1Э_Структуры.Структура(Настройки);
		РабочиеНастройки.Вставить("ВнешниеНаборыДанных", Новый Структура("НаборДанных", ТаблицаЗначений));
		
		РезультатВыполнения(СхемаКомпоновкиДанных, РабочиеНастройки, Результат, ДанныеРасшифровки);
		
	КонецФункции
	
	// Выполняет отчет. Рекомендуется к применению если у отчета есть внешние наборы данных.
	//
	// Параметры:
	//  ОтчетОбъект			 - ОтчетОбъект - 
	//  ВнешниеНаборыДанных	 - Структура,ТаблицаЗначений - если передается ТаблицаЗначений, она будет передана в СКД как "Таблица".
	//  ДокументРезультат	 - ТабличныйДокумент - из события "ПриКомпоновкеРезультата" 
	//  ДанныеРасшифровки	 - ДанныеРасшифровкиКомпоновкиДанных - из события "ПриКомпоновкеРезультата" 
	//  СтандартнаяОбработка - Булево - из события "ПриКомпоновкеРезультата". Автоматически устанавливается в Ложь, т. к. мы выполняем отчет программно. 
	//  Параметры			 - Структура,Неопределено - в данный момент не используются 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция РезультатВыполненияОтчета(ОтчетОбъект, ВнешниеНаборыДанных, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, Параметры = Неопределено) Экспорт
		СтандартнаяОбработка = Ложь;
		
		А1Э_СКД.РезультатВыполнения(ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"), А1Э_Структуры.Создать(
		"КомпоновщикНастроек", ОтчетОбъект.КомпоновщикНастроек,
		"ВнешниеНаборыДанных", ВнешниеНаборыДанных,
		), ДокументРезультат, ДанныеРасшифровки);	
	КонецФункции
	
	Функция СоздатьПоТаблицеЗначений(ТаблицаЗначений, Ресурсы = Неопределено, Группировки = Неопределено, Колонки = Неопределено, ВертикальныеГруппировки = Неопределено) Экспорт
		#Если Сервер И НЕ Сервер Тогда
			ТаблицаЗначений = Новый ТаблицаЗначений;		
		#КонецЕсли 
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
		Источник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
		Источник.Имя = "ОсновныеДанные";
		Источник.СтрокаСоединения = "";
		Источник.ТипИсточникаДанных = "Local";
		
		НаборДанных = ДобавитьНаборДанных(СхемаКомпоновкиДанных, "объект"); 
		#Если Сервер И НЕ Сервер Тогда
			НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Неопределено);		
		#КонецЕсли
		
		МассивРесурсов = А1Э_Массивы.Массив(Ресурсы);
		МассивГруппировок = А1Э_Массивы.Массив(Группировки);
		Если Колонки = Неопределено Тогда
			ВсеКолонки = Истина;
		Иначе
			ВсеКолонки = Ложь;
			МассивКолонок = А1Э_Массивы.Массив(Колонки);
			А1Э_Массивы.Добавить(МассивКолонок, МассивРесурсов);
			А1Э_Массивы.Добавить(МассивКолонок, МассивГруппировок);
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Если НЕ ВсеКолонки Тогда
				Если МассивКолонок.Найти(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьПоле(НаборДанных, Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
		Для Каждого Элемент Из МассивРесурсов Цикл
			ЧастиСтроки = А1Э_Строки.ПередПосле(Элемент, ":");
			ПолеРесурса = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = ЧастиСтроки.Перед;
			ПолеРесурса.Выражение = А1Э_Общее.НепустоеЗначение(ЧастиСтроки.После, "Сумма(" + ЧастиСтроки.Перед + ")");
		КонецЦикла;
		
		НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		МассивВертикальныхГруппировок = А1Э_Массивы.Массив(ВертикальныеГруппировки);
		Если МассивВертикальныхГруппировок.Количество() = 0 Тогда
			ГоризонтальныйКонтейнер = НастройкиКомпоновкиДанных.Структура;
		Иначе
			Таблица = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
			ТипГруппировок = Тип("ГруппировкаТаблицыКомпоновкиДанных");
			ГоризонтальныйКонтейнер = Таблица.Строки;
			ВертикальныйКонтейнер = Таблица.Колонки;
			Для Каждого Элемент Из МассивВертикальныхГруппировок Цикл
				Группировка = ДобавитьГруппировку(ВертикальныйКонтейнер, Элемент);
				ВертикальныйКонтейнер = Группировка.Структура;
			КонецЦикла;
		КонецЕсли;
		
		МассивГруппировок = А1Э_Массивы.Массив(Группировки);
		Если МассивГруппировок.Количество() = 0 Тогда
			МассивГруппировок.Добавить("ДетальныеЗаписи");
		КонецЕсли;
		Для Каждого Элемент Из МассивГруппировок Цикл
			Группировка = ДобавитьГруппировку(ГоризонтальныйКонтейнер, Элемент);
			ГоризонтальныйКонтейнер = Группировка.Структура;
		КонецЦикла;
		
		Для Каждого Поле Из НаборДанных.Поля Цикл
			Если МассивГруппировок.Найти(Поле.Поле) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВыбранноеПоле = НастройкиКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Заголовок = Поле.Поле;
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле.Поле);
		КонецЦикла;
		
		Возврат СхемаКомпоновкиДанных;
		
	КонецФункции
	
	Функция ДобавитьГруппировку(Контейнер, Описание) 
		Если ТипЗнч(Контейнер) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			Группировка = Контейнер.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Контейнер) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
			Группировка = Контейнер.Добавить();
		КонецЕсли;
		Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Группировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Если Описание <> "ДетальныеЗаписи" Тогда
			МассивПолей = СтрРазделить(Описание, ";"); 
			Для Каждого Поле Из МассивПолей Цикл
				ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
				ПолеГруппировки.Использование = Истина;
				ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Поле);
			КонецЦикла;	
		КонецЕсли;
		
		Возврат Группировка;
	КонецФункции
	
	// Добавляет набор данных в схему компоновки
	//
	// Параметры:
	//  СхемаКомпоновкиДанных	 - 	 - 
	//  ВидНабора				 -  - 
	//  Имя						 -  - 
	//  ИсточникДанных			 - Строка, Неопределено - По умолчанию заполняется первым источником данных.
	//  ТекстЗапроса			 - Строка - обязательно для указания если создается наборданныхзапрос.
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ДобавитьНаборДанных(СхемаКомпоновкиДанных, ВидНабора, ИмяНабора = Неопределено, ИсточникДанных = Неопределено, ТекстЗапроса = Неопределено)
		#Если Сервер И НЕ Сервер Тогда
			СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;		
		#КонецЕсли
		
		ТипНабора = А1Э_СтандартныеТипы.ТипНабораДанныхСКДПолучить(ВидНабора);
		
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(ТипНабора);
		
		Если ИмяНабора = Неопределено Тогда
			Имя = НовоеИмяНабора();
		КонецЕсли;
		
		НаборДанных.Имя = Имя;
		
		Если ТипНабора <> Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Если ИсточникДанных = Неопределено Тогда
				Если СхемаКомпоновкиДанных.ИсточникиДанных.Количество() = 0 Тогда
					А1Э_Служебный.СлужебноеИсключение("При добавлении к СКД набора данных без указания источника данных в СКД уже должен существовать хотя бы один источник!");
				КонецЕсли;
				НаборДанных.ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных[0].Имя;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
			НаборДанных.ИмяОбъекта = Имя;
		ИначеЕсли ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			Если ТекстЗапроса = Неопределено Тогда
				А1Э_Служебный.СлужебноеИсключение("При добавлении к СКД набора данных типа ""Запрос"" необходимо указать текст запроса!");
			КонецЕсли;
			НаборДанных.Запрос = ТекстЗапроса;
			НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		КонецЕсли;
		
		Возврат НаборДанных;
		
	КонецФункции
	
	Функция ДобавитьПоле(НаборДанных, Имя, ТипЗначения)
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Заголовок = Имя;
		Поле.ПутьКДанным = Имя;
		Поле.Поле = Имя;
		Поле.ТипЗначения = ТипЗначения;
		Возврат Поле;
	КонецФункции
	
	Функция НовоеИмяНабора(Определитель = Неопределено)
		Имя = "НаборДанных";
		Если Определитель = Неопределено Тогда
			Возврат Имя;
		ИначеЕсли ТипЗнч(Определитель) = Тип("Число") Тогда
			Имя = Имя + А1Э_Строки.ВСтроку(Определитель);
		ИначеЕсли ТипЗнч(Определитель) = Тип("СхемаКомпоновкиДанных") Тогда
			Имя = Имя + А1Э_Строки.ВСтроку(Определитель.НаборыДанных.Количество() + 1);
		КонецЕсли;
		А1Э_Служебный.ИсключениеНеверныйТип("Определитель", "НовоеИмяНабора", Определитель, "Неопределено,Число,СхемаКомпоновкиДанных");
	КонецФункции 
	
	Функция ДобавитьОтбор(КоллекцияНастроек, Имя, Значение, Знач ВидСравнения = "Равно", Контекст = Неопределено) Экспорт
		КоллекцияЭлементов = КоллекцияЭлементовОтбора(КоллекцияНастроек);	
		ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
		
		УдалитьОтборИзЭлементов(КоллекцияЭлементов, Имя, ВидСравнения);
		ДобавитьОтборВЭлементы(КоллекцияЭлементов, Имя, ВидСравнения, Значение, Контекст); 
	КонецФункции
	
	Функция ДобавитьОтборБезЗамены(КоллекцияНастроек, Имя, Значение, Знач ВидСравнения = "Равно", Контекст = Неопределено) Экспорт
		КоллекцияЭлементов = КоллекцияЭлементовОтбора(КоллекцияНастроек);	
		ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
		
		МассивАналогичныхОтборов = НайтиОтборыВЭлементах(КоллекцияЭлементов, Имя, ВидСравнения);
		Если МассивАналогичныхОтборов.Количество() > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		ДобавитьОтборВЭлементы(КоллекцияЭлементов, Имя, ВидСравнения, Значение, Контекст);
	КонецФункции
	
	Функция НайтиОтборы(КоллекцияНастроек, Имя, Знач ВидСравнения = "Равно") Экспорт
		КоллекцияЭлементов = КоллекцияЭлементовОтбора(КоллекцияНастроек);	
		ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
		
		Возврат НайтиОтборыВЭлементах(КоллекцияЭлементов, Имя, ВидСравнения);
	КонецФункции
	
	Функция УдалитьОтбор(КоллекцияНастроек, Имя, Знач ВидСравнения = "Равно") Экспорт
		КоллекцияЭлементов = КоллекцияЭлементовОтбора(КоллекцияНастроек);
		ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
		
		Возврат УдалитьОтборИзЭлементов(КоллекцияЭлементов, Имя, ВидСравнения);
	КонецФункции
	
	Функция ИспользуемоеЗначениеОтбора(КоллекцияНастроек, Имя, Знач ВидСравнения = "Равно") Экспорт 
		Отборы = НайтиОтборы(КоллекцияНастроек, Имя, ВидСравнения);
		Если Отборы.Количество() = 0 Тогда Возврат Null; КонецЕсли;
		Отбор = Отборы[0];
		Если НЕ Отбор.Используется Тогда Возврат Null; КонецЕсли;
		Возврат Отбор.Значение;
	КонецФункции
	
	Функция УстановитьДоступныеЗначенияПоля(СхемаКомпоновкиДанных, ИмяПоля, СписокЗначений, Контекст = Неопределено) Экспорт
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		Если НЕ А1Э_Общее.Свойство(Контекст, "НаборДанных") Тогда
			НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		ИначеЕсли ТипЗнч(Контекст.НаборДанных) = Тип("Строка") Тогда
			НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти(Контекст.НаборДанных);
		Иначе //Ожидается число.
			НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[Контекст.НаборДанных];
		КонецЕсли;
		Поле = НаборДанных.Поля.Найти(ИмяПоля); 
		Поле.УстановитьДоступныеЗначения(СписокЗначений);	   
	КонецФункции
	
#КонецЕсли

#Область Служебно_Сервер

Функция ДобавитьОтборВЭлементы(КоллекцияЭлементов, Имя, Знач ВидСравнения, Значение, Знач Контекст = Неопределено) 
	ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя); 
	ЭлементОтбора.ВидСравнения = ВидСравнения; 
	ЭлементОтбора.ПравоеЗначение = Значение; 
	ЭлементОтбора.Использование = Истина;
	Контекст = А1Э_Структуры.Структура(Контекст);
	ЗаполнитьЗначенияСвойств(ЭлементОтбора, Контекст);
	Если А1Э_Структуры.ЗначениеСвойства(Контекст, "Пользовательский") = Истина Тогда
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции 

Функция УдалитьОтборИзЭлементов(КоллекцияЭлементов, Имя, Знач ВидСравнения)
	ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
	
	МассивОтборов = НайтиОтборыВЭлементах(КоллекцияЭлементов, Имя, ВидСравнения);
	Удалено = МассивОтборов.Количество() <> 0;
	Для Каждого Элемент Из МассивОтборов Цикл
		КоллекцияЭлементов.Удалить(Элемент);
	КонецЦикла;
	Возврат Удалено;
КонецФункции

Функция НайтиОтборыВЭлементах(КоллекцияЭлементов, Имя, Знач ВидСравнения)
	ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
	
	Результат = Новый Массив;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Имя);
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.ЛевоеЗначение = ПолеКомпоновки И Элемент.ВидСравнения = ВидСравнения Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция КоллекцияЭлементовОтбора(КоллекцияНастроек)
	Если А1Э_Общее.Свойство(КоллекцияНастроек, "Отбор") Тогда
		Если А1Э_Общее.Свойство(КоллекцияНастроек.Отбор, "Элементы") Тогда
			Возврат КоллекцияНастроек.Отбор.Элементы;
		ИначеЕсли ТипЗнч(КоллекцияНастроек.Отбор) = Тип("Отбор") Тогда
			Возврат КоллекцияНастроек.Отбор;
		КонецЕсли;
	КонецЕсли;
	Возврат А1Э_СтандартныеТипы.НастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек).Отбор.Элементы; 
КонецФункции

#КонецОбласти

#Область ПроизвольныйОтчет
#Если Клиент Тогда
	
	Функция ПроизвольныйОтчет(ТекстЗапроса, ПараметрыЗапроса = Неопределено, СтруктураОтчета = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
		ДанныеОтчета = А1Э_ОбщееСервер.РезультатФункции("А1Э_СКД.ПроизвольныйОтчет_ДанныеПоЗапросу", ТекстЗапроса, ПараметрыЗапроса, СтруктураОтчета);
		ПроизвольныйОтчет_ВыполнитьПоказ(ДанныеОтчета, ДополнительныеПараметры);
	КонецФункции
	
	Функция ПроизвольныйОтчетПоТаблицеЗначений(АдресТаблицыЗначений, СтруктураОтчета = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
		ДанныеОтчета = А1Э_ОбщееСервер.РезультатФункции("А1Э_СКД.ПроизвольныйОтчет_ДанныеПоТаблицеЗначений", АдресТаблицыЗначений, СтруктураОтчета); 	
		ПроизвольныйОтчет_ВыполнитьПоказ(ДанныеОтчета, ДополнительныеПараметры);
	КонецФункции
	
	Функция ПроизвольныйОтчет_ВыполнитьПоказ(ДанныеОтчета, ДополнительныеПараметры = Неопределено)
		Заголовок = А1Э_Общее.ЗначениеСвойства(ДополнительныеПараметры, "ЗаголовокФормы"); 
		А1Э_УниверсальнаяФорма.Открыть(Заголовок, "А1Э_СКД.ПроизвольныйОтчет_ПриСозданииНаСервере",
		А1Э_Структуры.Создать(
		"ДанныеОтчета", ДанныеОтчета,
		));
	КонецФункции
	
	Функция ПроизвольныйОтчет_ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
		Перем ВыполненноеДействие;
		
		СтандартнаяОбработка = Ложь;
		
		Значение = А1Э_ОбщееСервер.РезультатФункции("А1Э_СКД.ПроизвольныйОтчет_ПолучитьЗначениеРасшифровки", Форма.ДанныеРасшифровки, Форма.АдресСКД, Расшифровка);
		
		ПоказатьЗначение(, Значение);    
		
	КонецФункции
	
#КонецЕсли

#Если НЕ Клиент Тогда
	
	Функция ПроизвольныйОтчет_ДанныеПоЗапросу(ТекстЗапроса, Параметры = Неопределено, СтруктураОтчета) Экспорт 
		ТаблицаЗначений = А1Э_Запросы.Запрос(ТекстЗапроса, Параметры).Выполнить().Выгрузить();
		Возврат ПроизвольныйОтчет_Данные(ТаблицаЗначений, СтруктураОтчета);
	КонецФункции
	
	Функция ПроизвольныйОтчет_ДанныеПоТаблицеЗначений(АдресТаблицыЗначений, СтруктураОтчета) Экспорт 
		ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресТаблицыЗначений);
		Возврат ПроизвольныйОтчет_Данные(ТаблицаЗначений, СтруктураОтчета);
	КонецФункции
	
	Функция ПроизвольныйОтчет_Данные(ТаблицаЗначений, СтруктураОтчета) 
		Результат = Новый ТабличныйДокумент;
		ДанныеРасшифровки = "";
		АдресСКД = "";
		
		РезультатВыполненияПоТаблицеЗначений(ТаблицаЗначений, , СтруктураОтчета, Результат, ДанныеРасшифровки, АдресСКД);
		Возврат Новый Структура("Результат,ДанныеРасшифровки,АдресСКД", Результат, ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор), АдресСКД);
	КонецФункции
	
	Функция ПроизвольныйОтчет_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
		МассивОписаний = Новый Массив;
		А1Э_Формы.ДобавитьОписаниеРеквизитаИЭлемента(МассивОписаний, "ТабличныйДокумент", "ТабличныйДокумент", , , , , 
		А1Э_Структуры.Создать(
		"ТолькоПросмотр", Истина,
		"ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет,
		), А1Э_Структуры.Создать(
		"ОбработкаРасшифровки", "А1Э_СКД.ПроизвольныйОтчет_ОбработкаРасшифровки",
		));
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, "ДанныеРасшифровки", "Строка");
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, "АдресСКД", "Строка");
		
		А1Э_УниверсальнаяФорма.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);
		
		Форма.ТабличныйДокумент = Форма.Параметры.ДанныеОтчета.Результат;
		Форма.ДанныеРасшифровки = Форма.Параметры.ДанныеОтчета.ДанныеРасшифровки;
		Форма.АдресСКД = Форма.Параметры.ДанныеОтчета.АдресСКД;
		
	КонецФункции
	
	Функция ПроизвольныйОтчет_ПолучитьЗначениеРасшифровки(АдресРасшифровки, АдресСКД, Расшифровка) Экспорт
		//ОбработкаРасшифровки =  Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД));
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
		
		МассивПолей = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		Если МассивПолей.Количество() > 0 Тогда
			Возврат МассивПолей[0].Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции 
#КонецЕсли 
#КонецОбласти 

#Область БудущиеИдеи

//Функция ДобавитьПользовательскийОтбор(КоллекцияНастроек, Имя, Значение, Знач ВидСравнения = "Равно") Экспорт 
//	ПользовательскиеНастройки = А1Э_СтандартныеТипы.ПользовательскиеНастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек);
//	ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
//	
//	Для Каждого Элемент Из КоллекцияЭлементов Цикл
//		Если ТипЗнч(Элемент) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//			Продолжить;
//		КонецЕсли;
//		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) И Элемент.ВидСравнения = ВидСравнения Тогда
//			Элемент.Значение = Значение;
//			Элемент.Использование = Истина;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецФункции

//Функция УдалитьПользовательскийОтбор(КоллекцияНастроек, Имя, ВидСравнения = "Равно") Экспорт
//	ПользовательскиеНастройки = А1Э_СтандартныеТипы.ПользовательскиеНастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек);
//	ВидСравнения = А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить(ВидСравнения);
//	
//	Для Каждого Элемент Из КоллекцияЭлементов Цикл
//		Если ТипЗнч(Элемент) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//			Продолжить;
//		КонецЕсли;
//		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя) И Элемент.ВидСравнения = ВидСравнения Тогда
//			Элемент.Использование = Ложь;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецФункции 

#КонецОбласти 

#Область КомпоновщикНастроек

Функция ЗначениеПараметраДанных(КомпоновщикНастроек, ИмяПараметра) Экспорт
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Возврат Null;
	КонецЕсли;
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Параметр.ИдентификаторПользовательскойНастройки);
	Если ПользовательскаяНастройка = Неопределено Тогда
		Возврат ПримитивноеЗначениеПараметрыНастроек(Параметр);
	Иначе
		Возврат ПримитивноеЗначениеПараметрыНастроек(ПользовательскаяНастройка);
	КонецЕсли;
КонецФункции

Функция ПримитивноеЗначениеПараметрыНастроек(ПараметрНастроек) 
	Если ПараметрНастроек.Использование = Истина Тогда
		Если ТипЗнч(ПараметрНастроек.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			Возврат ПараметрНастроек.Значение.Дата
		Иначе
			Возврат ПараметрНастроек.Значение;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции 

Функция АктуальныйЭлементОтбора(КомпоновщикНастроек, Имя, ВидСравнения = "Равно") Экспорт 
	Отборы = НайтиОтборыВЭлементах(КомпоновщикНастроек.Настройки.Отбор.Элементы, Имя, ВидСравнения);
	Если Отборы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отбор = Отборы[0];
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Отбор.ИдентификаторПользовательскойНастройки);
	Если ПользовательскаяНастройка = Неопределено Тогда
		Возврат Отбор;
	Иначе
		Возврат ПользовательскаяНастройка;
	КонецЕсли;
КонецФункции

Функция ОтборИспользуется(КомпоновщикНастроек, Имя, ВидСравнения = "Равно") Экспорт
	АктуальныйЭлементОтбора = АктуальныйЭлементОтбора(КомпоновщикНастроек, Имя, ВидСравнения);
	Если АктуальныйЭлементОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат АктуальныйЭлементОтбора.Использование;
КонецФункции 
#КонецОбласти 

#Область БСП_ДинамическийСписок
// Copyright (c) 2020, ООО 1С-Софт
//Заимствовано из БСП в соответствии с условиями лицензии Attribution 4.0 International.
//Планируется к замене в будущем. API может измениться. По возможности используйте модуль БСП ОбщегоНазначенияКлиентСервер.

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  ОбластьПоиска - ОтборКомпоновкиДанных                    -
//                - КоллекцияЭлементовОтбораКомпоновкиДанных -
//                - ГруппаЭлементовОтбораКомпоновкиДанных    - контейнер с элементами и группами отбора,
//                                                             например Список.Отбор или группа в отборе.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
// Возвращаемое значение:
//  Массив - коллекция отборов.
//
Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
	Знач ИмяПоля = Неопределено,
	Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Возврат МассивЭлементов;
	
КонецФункции

// Добавить группу отбора в коллекцию КоллекцияЭлементов.
//
// Параметры:
//  КоллекцияЭлементов - ОтборКомпоновкиДанных                    -
//                     - КоллекцияЭлементовОтбораКомпоновкиДанных -
//                     - ГруппаЭлементовОтбораКомпоновкиДанных    - контейнер с элементами и группами отбора,
//                                                                  например Список.Отбор или группа в отборе.
//  Представление      - Строка - представление группы.
//  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//
// Возвращаемое значение:
//  ГруппаЭлементовОтбораКомпоновкиДанных - группа отбора.
//
Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	Если ТипЗнч(КоллекцияЭлементов) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		Или ТипЗнч(КоллекцияЭлементов) = Тип("ОтборКомпоновкиДанных") Тогда
		
		КоллекцияЭлементов = КоллекцияЭлементов.Элементы;
	КонецЕсли;
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                                 например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент компоновки.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
	Знач ИмяПоля,
	Знач ВидСравнения,
	Знач ПравоеЗначение = Неопределено,
	Знач Представление  = Неопределено,
	Знач Использование  = Неопределено,
	знач РежимОтображения = Неопределено,
	знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьПоиска - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                             например Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
// Возвращаемое значение:
//  Число - количество измененных элементов.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
	Знач ИмяПоля = Неопределено,
	Знач Представление = Неопределено,
	Знач ПравоеЗначение = Неопределено,
	Знач ВидСравнения = Неопределено,
	Знач Использование = Неопределено,
	Знач РежимОтображения = Неопределено,
	Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Удалить элементы отбора с заданным именем поля или представлением.
//
// Параметры:
//  ОбластьУдаления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                               например, Список.Отбор или группа в отборе..
//  ИмяПоля         - Строка - имя поля компоновки (не используется для групп).
//  Представление   - Строка - представление поля компоновки.
//
Процедура УдалитьЭлементыГруппыОтбора(Знач ОбластьУдаления, Знач ИмяПоля = Неопределено, Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив; // Массив из ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных
	
	НайтиРекурсивно(ОбластьУдаления.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент.Родитель = Неопределено Тогда
			ОбластьУдаления.Элементы.Удалить(Элемент);
		Иначе
			Элемент.Родитель.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                     например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
	Знач ИмяПоля,
	Знач ПравоеЗначение = Неопределено,
	Знач ВидСравнения = Неопределено,
	Знач Представление = Неопределено,
	Знач Использование = Неопределено,
	Знач РежимОтображения = Неопределено,
	Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
	ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
		ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - значение отбора.
//       Необязательный. Значение по умолчанию Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - условие отбора.
//   Представление - Строка - представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если РежимОтображения = Неопределено Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Иначе
		ОтборДинамическогоСписка = ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор;
	КонецЕсли;
	
	УстановитьЭлементОтбора(
	ОтборДинамическогоСписка,
	ИмяПоля,
	ПравоеЗначение,
	ВидСравнения,
	Представление,
	Использование,
	РежимОтображения,
	ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Удалить элемент группы отбора динамического списка.
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - реквизит формы, для которого требуется установить отбор.
//  ИмяПоля         - Строка - имя поля компоновки (не используется для групп).
//  Представление   - Строка - представление поля компоновки.
//
Процедура УдалитьЭлементыГруппыОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля = Неопределено, Представление = Неопределено) Экспорт
	
	УдалитьЭлементыГруппыОтбора(
	ДинамическийСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
	ИмяПоля,
	Представление);
	
	УдалитьЭлементыГруппыОтбора(
	ДинамическийСписок.КомпоновщикНастроек.Настройки.Отбор,
	ИмяПоля,
	Представление);
	
КонецПроцедуры

// Установить или обновить значение параметра ИмяПараметра динамического списка Список.
//
// Параметры:
//  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
//  ИмяПараметра    - Строка             - имя параметра динамического списка.
//  Значение        - Произвольный        - новое значение параметра.
//  Использование   - Булево             - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметраКомпоновкиДанных = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		Если Использование И ЗначениеПараметраКомпоновкиДанных.Значение <> Значение Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение = Значение;
		КонецЕсли;
		Если ЗначениеПараметраКомпоновкиДанных.Использование <> Использование Тогда
			ЗначениеПараметраКомпоновкиДанных.Использование = Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Служебная процедура для поиска в коллекциях.
//
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет поиск элемента отбора в коллекции по заданному представлению.
//
// Параметры:
//  КоллекцияЭлементов - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                                  например, Список.Отбор.Элементы или группа в отборе.
//  Представление - Строка - представление группы.
// 
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент отбора.
//
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

#КонецОбласти
