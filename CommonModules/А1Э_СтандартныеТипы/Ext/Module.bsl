
#Область ПриведениеКТипу 

Функция НаправлениеСортировкиПолучить(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("НаправлениеСортировки") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Нрег = Лев(НРЕГ(Идентификатор), 4);
		Если Нрег = "возр" Тогда
			Возврат НаправлениеСортировки.Возр;
		ИначеЕсли Нрег = "убыв" Тогда
			Возврат НаправлениеСортировки.Убыв;
		КонецЕсли;
	КонецЕсли;
	А1Э_Служебный.СлужебноеИсключение("Не удалось сопоставить значение стандартного типа <НаправлениеСортировки> идентификатору " + Идентификатор);
КонецФункции

Функция ТипНабораДанныхСКДПолучить(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Нрег = Нрег(Идентификатор);
		Если Нрег = "объект" Тогда
			Возврат Тип("НаборДанныхОбъектСхемыКомпоновкиДанных");
		ИначеЕсли Нрег = "запрос" Тогда
			Возврат Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
		ИначеЕсли Нрег = "объединение" Тогда
			Возврат Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных");
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверный идентификатор типа набора данных СКД!");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Тип") Тогда
		Если Идентификатор = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")
			Или Идентификатор = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
			Или Идентификатор = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
			Тогда
			Возврат Идентификатор;
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверный идентификатор типа набора данных СКД!");
		КонецЕсли;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "ТипНабораДанныхСКДПолучить", Идентификатор, "Строка,Тип");
	КонецЕсли;
КонецФункции

Функция НастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек) Экспорт
	Если ТипЗнч(КоллекцияНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек.Настройки;
	ИначеЕсли ТипЗнч(КоллекцияНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("КоллекцияНастроек", "А1Э_СтандартныеТипы.НастройкиКомпоновкиДанныхПолучить", КоллекцияНастроек, "КомпоновщикНастроекКомпоновкиДанных,НастройкиКомпоновкиДанных"); 
	КонецЕсли;
КонецФункции

Функция ПользовательскиеНастройкиКомпоновкиДанныхПолучить(КоллекцияНастроек) Экспорт
	Если ТипЗнч(КоллекцияНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(КоллекцияНастроек) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат КоллекцияНастроек;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("КоллекцияНастроек", "А1Э_СтандартныеТипы.ПользовательскиеНастройкиКомпоновкиДанныхПолучить", КоллекцияНастроек, "КомпоновщикНастроекКомпоновкиДанных,ПользовательскиеНастройкиКомпоновкиДанных"); 
	КонецЕсли;	
КонецФункции

Функция ВидСравненияКомпоновкиДанныхПолучить(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат ВидСравненияКомпоновкиДанных[Идентификатор];
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ВидСравненияКомпоновкиДанныхПолучить", Идентификатор, "ВидСравненияКомпоновкиДанных,Строка");
	КонецЕсли;	
КонецФункции

Функция ОписаниеТиповПолучить(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("ОписаниеТипов") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Тип") Тогда
		МассивТипов = А1Э_Массивы.Создать(Идентификатор);
		Возврат Новый ОписаниеТипов(МассивТипов);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПоложениеДвоеточия = СтрНайти(Идентификатор, ":");
		Если ПоложениеДвоеточия = 0 Тогда
			Возврат Новый ОписаниеТипов(СтрокаКИдентификаторуСсылки(Идентификатор));
		КонецЕсли;
		Тип = ВРЕГ(Лев(Идентификатор, ПоложениеДвоеточия - 1));
		Если Тип = "СТРОКА" Тогда
			Возврат А1Э_Строки.ОписаниеТипа(А1Э_Числа.ВЧисло(Сред(Идентификатор, ПоложениеДвоеточия + 1)));
		ИначеЕсли Тип = "ЧИСЛО" Тогда
			ДанныеЧисла = Сред(Идентификатор, ПоложениеДвоеточия + 1);
			ДанныеЧислаМассивом = А1Э_Строки.Разделить(ДанныеЧисла, "/");
			КоличествоЗнаков = А1Э_Числа.ВЧисло(ДанныеЧислаМассивом[0]);
			КоличествоЗнаковДроби = ?(ДанныеЧислаМассивом.Количество() > 1, А1Э_Числа.ВЧисло(ДанныеЧислаМассивом[1]), 0);
			Возврат А1Э_Числа.ОписаниеТипа(КоличествоЗнаков, КоличествоЗнаковДроби);
		ИначеЕсли Тип = "ДАТА" Тогда
			Возврат А1Э_Даты.ОписаниеТипа(Сред(Идентификатор, ПоложениеДвоеточия + 1));
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверный идентификатор типа " + Идентификатор + "!");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Массив") Тогда
		Возврат Новый ОписаниеТипов(Идентификатор);
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ОписаниеТиповПолучить", Идентификатор, "ОписаниеТипов,Тип,Строка");
	КонецЕсли;
КонецФункции

Функция УИДПолучить(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Возврат Идентификатор;
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Длина = СтрДлина(Идентификатор);
		Если Длина = 36 Тогда
			Возврат Новый УникальныйИдентификатор(Идентификатор);
		ИначеЕсли Длина = 32 Тогда
			Возврат А1Э_Строки.УИДПоНепрерывному(Идентификатор);
		Иначе
			А1Э_Служебный.СлужебноеИсключение("Неверная длина строки, которая должна быть уникальным идентификатором! Ожидается 36 символов (стандартное представление УИД) или 32 символа (непрерывное представление)!");
		КонецЕсли;		
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.УИДПолучить", Идентификатор, "УникальныйИдентификатор,Строка");
	КонецЕсли;
	
КонецФункции

Функция ТипПолучить(Знач Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Тип(СтрокаКИдентификаторуСсылки(Идентификатор));
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Тип") Тогда
		Возврат Идентификатор;
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", ИмяМодуля() + ".ТипПолучить", Идентификатор, "Строка,Тип");
	КонецЕсли;		
КонецФункции

// Получает Тип(<ТипМетаданных>Ссылка.<ИмяМетаданных>). Если метаданные отсутствуют в конфигурации, возвращает Неопределено.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных	 - Строка - "<ТипМетаданных>Ссылка.<ИмяМетаданных>"
// 
// Возвращаемое значение:
//   - Тип, Неопределено 
//
Функция ТипСсылкиБезопасно(ПолноеИмяОбъектаМетаданных) Экспорт
	ОбъектМетаданных = А1Э_Метаданные.ОбъектМетаданныхБезопасно(ПолноеИмяОбъектаМетаданных);
	Если ОбъектМетаданных = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	Возврат ТипПолучить(ПолноеИмяОбъектаМетаданных);
КонецФункции

#Если НЕ Клиент Тогда
	
	Функция ОбъектМетаданныхПолучить(Идентификатор) Экспорт
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
			Возврат Идентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда	
			ТипМетаданных = А1Э_Метаданные.ТипМетаданных(Идентификатор);
			Если ТипМетаданных <> Неопределено Тогда
				Возврат Метаданные[ТипМетаданных][Идентификатор];
			Иначе
				А1Э_Служебный.СлужебноеИсключение("Объект " + Идентификатор + " не найден в списке справочников и документов!");
			КонецЕсли;
		Иначе
			А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ОбъектМетаданныхПолучить()", Идентификатор, "ОбъектМетаданных,Строка");
		КонецЕсли;
	КонецФункции
	
	Функция ПустаяСсылкаПолучить(Идентификатор) Экспорт
		ОбъектМетаданных = ОбъектМетаданныхПолучить(Идентификатор);
		Возврат ПредопределенноеЗначение(ОбъектМетаданных.ПолноеИмя() +".ПустаяСсылка");
	КонецФункции 
	
	// Возвращает объект типа <ПользовательИнформационнойБазы>. Вызывает исключение в случае ошибки поиска. 
	//
	// Параметры:
	//  Идентификатор	 - Строка,СправочникСсылка.Пользователи,ПользовательИнформационнойБазы,Неопределено	- если неопределено, возвращает текущего.
	// 
	// Возвращаемое значение:
	//   - ПользовательИнформационнойБазы.
	//
	Функция ПользовательИБПолучить(Идентификатор) Экспорт
		Тип = ТипЗнч(Идентификатор);
		Если Идентификатор = Неопределено Тогда
			Возврат ПользователиИнформационнойБазы.ТекущийПользователь();
		ИначеЕсли Тип = Тип("ПользовательИнформационнойБазы") Тогда
			Возврат Идентификатор; 
		ИначеЕсли А1Э_Общее.РавноОдномуИз(Тип, Тип("Строка"), Тип("УникальныйИдентификатор")) Тогда
			ПользовательИБ = ?(Тип = Тип("Строка"), ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор), ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор));
			Если ПользовательИБ = Неопределено Тогда
				А1Э_Служебный.СлужебноеИсключение("Не удалось найти пользователя ИБ, соответствующего идентификатору " + Идентификатор + "!");
			КонецЕсли;
			Возврат ПользовательИБ;
		ИначеЕсли Тип = Тип("Справочник.Пользователи") Тогда
			Если НЕ А1Э_Общее.Свойство(Идентификатор, "ИдентификаторПользователяИБ") Тогда
				А1Э_Служебный.СлужебноеИсключение("В справочнике <Пользователи> отсутствует реквизит ИдентификаторПользователяИБ!");
			КонецЕсли;
			Возврат ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор.ИдентификаторПользователяИБ);
		Иначе
			А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", ИмяМодуля() + ".ПользовательИБПолучить", Идентификатор, "Строка,УникальныйИдентификатор,СправочникСсылка.Пользователи,Неопределено"); 
		КонецЕсли;
	КонецФункции 
	
#КонецЕсли
#Если Клиент Тогда
	
	Функция ОписаниеОповещенияПолучить(Идентификатор, Модуль = Неопределено, Контекст = Неопределено) Экспорт
		Если ТипЗнч(Идентификатор) = Тип("ОписаниеОповещения") Тогда
			Возврат Идентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
			Возврат Новый ОписаниеОповещения(Идентификатор, Модуль, Контекст);
		Иначе
			А1Э_Служебный.ИсключениеНеверныйТип("Идентификатор", "А1Э_СтандартныеТипы.ОписаниеОповещенияПолучить", Идентификатор, "ОписаниеОповещения,Строка");
		КонецЕсли;	
	КонецФункции 
	
	Функция РежимДиалогаВыбораФайлаПолучить(Идентификатор) Экспорт
		Если ТипЗнч(Идентификатор) = Тип("РежимДиалогаВыбораФайла") Тогда
			Возврат Идентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
			Возврат РежимДиалогаВыбораФайла[Идентификатор];
		ИначеЕсли Идентификатор = Неопределено Тогда
			Возврат РежимДиалогаВыбораФайла.Открытие;
		КонецЕсли;
		А1Э_Служебный.СлужебноеИсключение("Не удалось сопоставить значение стандартного типа <РежимДиалогаВыбораФайла> идентификатору " + Идентификатор);
	КонецФункции 
	
#КонецЕсли
#КонецОбласти 

// Превращает строку в идентификатор для подстановки в структуры, имена колонок и т. д.
//
// Параметры:
//  Строка				 - Строка - строка, на основе которой будет создан идентификатор.
//  ЗначениеПоУмолчанию	 - Строка, Неопределено - если получившийся идентификатор пустой, то будет возвращено это значение. Если Неопределено, будет вызвано исключение.
// 
// Возвращаемое значение:
//  Идентификатор - Строка
//
Функция Идентификатор(Строка, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Идентификатор = "";
	Сч = 0;
	ПервыйСимвол = Истина;
	Пока Сч < СтрДлина(Строка) Цикл
		Сч = Сч + 1;
		Символ = Сред(Строка, Сч, 1);
		Если А1Э_Строки.ЭтоСимволИдентификатора(Символ, ПервыйСимвол) Тогда
			Идентификатор = Идентификатор + Символ;
			ПервыйСимвол = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПервыйСимвол Тогда
		Возврат Идентификатор;
	Иначе
		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			ВызватьИсключение "Не удалось создать идентификатор для строки <" + Строка + ">";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ИдентификаторБезПовторений(Идентификатор, КоличестваИдентификаторов) Экспорт   
	#Если Сервер И НЕ Сервер Тогда
		КоличестваИдентификаторов = Новый Соответствие;		
	#КонецЕсли 
	КоличествоПовторений = ?(КоличестваИдентификаторов[Идентификатор] = Неопределено, 0, КоличестваИдентификаторов[Идентификатор]); 
	КоличестваИдентификаторов.Вставить(Идентификатор, КоличествоПовторений + 1);
	ИдентификаторБезПовторений = Идентификатор;
	Если КоличествоПовторений > 0 Тогда
		ИдентификаторБезПовторений = ИдентификаторБезПовторений + "_" + А1Э_Строки.ВСтроку(КоличествоПовторений);
	КонецЕсли;
	Возврат ИдентификаторБезПовторений;	
КонецФункции 

Функция ПустоеЗначение(Знач ОписаниеТипов) Экспорт
	ОписаниеТипов = ОписаниеТиповПолучить(ОписаниеТипов);
	МассивТипов = Новый Массив;
	Для Каждого Элемент Из ОписаниеТипов.Типы() Цикл
		Если Элемент <> Тип("Null") Тогда
			МассивТипов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Если МассивТипов.Количество() = 0 Тогда
		Возврат Null;
	ИначеЕсли МассивТипов.Количество() > 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПустоеЗначениеПоТипу(МассивТипов[0]);
	КонецЕсли;
КонецФункции

Функция ПустаяСсылка(Ссылка) Экспорт
	Возврат Новый(ТипЗнч(Ссылка));
КонецФункции

Функция Заполнено(Значение) Экспорт
	ТипЗначения = ТипЗнч(Значение);
	НормальныеТипы = А1Э_Массивы.Создать(Тип("Строка"), Тип("Число"), Тип("Дата"), Тип("Булево"), Тип("Массив"), Тип("Структура"));
	Если НормальныеТипы.Найти(ТипЗначения) <> Неопределено Тогда
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
	МутабельныеТипы = А1Э_Массивы.Создать(Тип("ЭлементСпискаЗначений"), Тип("Шрифт"), Тип("Цвет")); //Будет пополняться.
	Если МутабельныеТипы.Найти(ТипЗначения) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		Возврат ЗначениеЗаполнено(Значение);
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

Функция Примитивный(Значение) Экспорт 
	Если ТипЗнч(Значение) = Тип("Строка") Или ТипЗнч(Значение) = Тип("Число") Или ТипЗнч(Значение) = Тип("Дата") Или ТипЗнч(Значение) = Тип("Булево") Тогда
		Возврат Истина;
	ИначеЕсли Значение = Неопределено Или Значение = NULL Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция МассивТипов(Знач Ссылки) Экспорт
	Ссылки = А1Э_Массивы.Массив(Ссылки);
	МассивТипов = Новый Массив;
	Для Каждого Ссылка Из Ссылки Цикл
		МассивТипов.Добавить(ТипЗнч(Ссылка));
	КонецЦикла;
	Возврат А1Э_Массивы.Свернуть(МассивТипов);
КонецФункции 

// Для совместимости с 8.3.13 и младше
// 
// Возвращаемое значение:
//   - 
//
Функция ФормаКлиентскогоПриложения() Экспорт
	Инфо = Новый СистемнаяИнформация;
	Если Инфо.ВерсияПриложения > "8.3.14" Тогда
		Возврат Тип("ФормаКлиентскогоПриложения");
	Иначе
		Возврат Тип("УправляемаяФорма");
	КонецЕсли;
КонецФункции

#Если НЕ Клиент Тогда
	
Функция ЭтоСсылка(Значение) Экспорт
	//Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)); - не работает на ссылки из расширений
	Если Примитивный(Значение) Или А1Э_Структуры.ЯвляетсяСтруктурой(Значение) Или А1Э_Структуры.ЯвляетсяСоответствием(Значение) Тогда Возврат Ложь; КонецЕсли;
	Если ТипЗнч(Значение) = Тип("ДанныеФормыСтруктура") Тогда Возврат Ложь; КонецЕсли;
	
	Кореллятор = Новый Структура("Ссылка,ВерсияДанных,ДополнительныеСвойства", Null, Null, Null);
	ЗаполнитьЗначенияСвойств(Кореллятор, Значение);
	Возврат Кореллятор.Ссылка <> Null И Кореллятор.ВерсияДанных <> Null И Кореллятор.ДополнительныеСвойства = Null; 
КонецФункции

Функция ПолноеИмяТипа(Тип) Экспорт
	Возврат ПустоеЗначениеПоТипу(Тип).Метаданные().ПолноеИмя();	
КонецФункции

#КонецЕсли
 
#Область Служебно

Функция ПустоеЗначениеПоТипу(Тип)
	Если Тип = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли Тип = Тип("Число") Тогда
		Возврат 0;
	ИначеЕсли Тип = Тип("Дата") Тогда
		Возврат '00010101000000';
	ИначеЕсли Тип = Тип("Булево") Тогда
		Возврат Ложь;
	Иначе  
		Возврат Новый(Тип);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СтрокаКИдентификаторуСсылки(Знач Строка)
	А1Э_Строки.Подставить(Строка, "Справочник.", "СправочникСсылка.");
	А1Э_Строки.Подставить(Строка, "Справочники.", "СправочникСсылка.");
	
	А1Э_Строки.Подставить(Строка, "Документ.", "ДокументСсылка.");
	А1Э_Строки.Подставить(Строка, "Документы.", "ДокументСсылка.");

	А1Э_Строки.Подставить(Строка, "Перечисление.", "ПеречислениеСсылка.");
	А1Э_Строки.Подставить(Строка, "Перечисления.", "ПеречислениеСсылка.");
	
	А1Э_Строки.Подставить(Строка, "ПланВидовХарактеристик.", "ПланВидовХарактеристикСсылка.");
	А1Э_Строки.Подставить(Строка, "ПланыВидовХарактеристик.", "ПланВидовХарактеристикСсылка.");
	
	Возврат Строка;
КонецФункции

Функция ИдентификаторСсылкиКСтроке(Знач Идентификатор)
	А1Э_Строки.Подставить(Идентификатор, "СправочникСсылка.", "Справочник.");
	А1Э_Строки.Подставить(Идентификатор, "ДокументСсылка.", "Документ.");
	А1Э_Строки.Подставить(Идентификатор, "ПеречислениеСсылка.", "Перечисление.");

	Возврат Идентификатор;
КонецФункции

#КонецОбласти

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_СтандартныеТипы";
КонецФункции
