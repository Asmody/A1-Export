#Если Клиент Тогда
	
	// Открывает универсальную форму. Объекты этой формы 
	//
	// Параметры:
	//  Заголовок						 - Строка - заголовок формы.
	//  ИмяФункцииПриСозданииНаСервере	 - Строка - полное имя серверной функции, которая будет выполнена.
	//  Параметры						 - Структура - параметры открытия формы. 
	// 
	// Возвращаемое значение:
	//   - Неопределено
	//
	Функция Открыть(Заголовок, ИмяФункцииПриСозданииНаСервере, Знач Параметры = Неопределено, Знач Владелец = Неопределено, Знач Уникальность = Истина, Знач Окно = Неопределено, Знач НавигационнаяСсылка = Неопределено, Знач ОповещениеОЗакрытии = Неопределено, Знач РежимОткрытия = Неопределено) Экспорт
		Если РежимОткрытия = Неопределено Тогда РежимОткрытия = РежимОткрытияОкнаФормы.Независимый; КонецЕсли;
		
		РабочиеПараметры = А1Э_Структуры.СкопироватьВШаблон(Параметры,
		"А1_ЗаголовокФормы", Заголовок,
		"А1_ПриСозданииНаСервере", ИмяФункцииПриСозданииНаСервере,
		);
		ОткрытьФорму("Обработка.А1Э_Формы.Форма.УниверсальнаяФорма", РабочиеПараметры, Владелец, Уникальность, Окно, НавигационнаяСсылка, ОповещениеОЗакрытии, РежимОткрытия);
	КонецФункции
	
#КонецЕсли

#Область ПерехватыУниверсальнойФормы

Функция НастройкиМеханизма() Экспорт
	Настройки = А1Э_Механизмы.НовыйНастройкиМеханизма();
	
	Настройки.Обработчики.Вставить("ФормаПриСозданииНаСервере", Истина);
	
	Настройки.ПорядокВыполнения = -10000000;
	
	Возврат Настройки;
КонецФункции

#Если НЕ Клиент Тогда
	
	// Обработчик ПриСозданииНаСервере Универсальной Формы.
	//
	// Параметры:
	//  Форма				 - ФормаКлиентскогоПриложения - 
	//  Отказ				 - Булево - 
	//  СтандартнаяОбработка - Булево - 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ФормаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт  
		А = 1;
		ИнициализироватьФормуПриНеобходимости(Форма);
		
		Если Форма.Параметры.Свойство("А1_ЗаголовокФормы") Тогда
			Форма.Заголовок = Форма.Параметры.А1_ЗаголовокФормы;
			Форма.АвтоЗаголовок = Ложь;
		КонецЕсли;
		
		Если Форма.Параметры.Свойство("А1_ПриСозданииНаСервере") Тогда
			А1Э_Общее.РезультатПроцедуры(Форма.Параметры.А1_ПриСозданииНаСервере, Форма, Отказ, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецФункции
	
	// Добавляет реквизиты и элементы с функционалом Универсальной Формы.
	//
	// Параметры:
	//  Форма						 - ФормаКлиентскогоПриложения - 
	//  МассивОписанийОбъектовФормы	 - Массив - элементы: см. А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	// 
	// Возвращаемое значение:
	//   - Неопределено
	//
	Функция ДобавитьРеквизитыИЭлементы(Форма, МассивОписанийОбъектовФормы) Экспорт
		ИнициализироватьФормуПриНеобходимости(Форма);
		
		МассивРеквизитов = Новый Массив;
		Для Каждого ОписаниеРеквизита Из МассивОписанийОбъектовФормы Цикл
			А1Э_Формы.ДобавитьРеквизитВМассивПоОписанию(Форма, МассивРеквизитов, ОписаниеРеквизита);
		КонецЦикла;
		Форма.ИзменитьРеквизиты(МассивРеквизитов);
		
		Для Каждого ОписаниеРеквизита Из МассивОписанийОбъектовФормы Цикл
			А1Э_Формы.ОбработатьРеквизит(Форма, ОписаниеРеквизита);	
		КонецЦикла;
		
		Для Каждого ОписаниеКоманды Из МассивОписанийОбъектовФормы Цикл
			СоздатьКомандуПоОписанию(Форма, ОписаниеКоманды);
		КонецЦикла;
		
		Для Сч = 0 По МассивОписанийОбъектовФормы.Количество() - 1 Цикл
			ОписаниеЭлементаФормы = МассивОписанийОбъектовФормы[Сч]; 
			СоздатьЭлементПоОписанию(Форма, ОписаниеЭлементаФормы);
			СоздатьКнопкуПоОписанию(Форма, ОписаниеЭлементаФормы);
		КонецЦикла;
		
	КонецФункции
	
	// Создает элемент Универсальной Формы.
	//
	// Параметры:
	//  Форма					 - ФормаКлиентскогоПриложения - 
	//  ОписаниеЭлементаФормы	 - Структура - см. А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	// 
	// Возвращаемое значение:
	//   - ЭлементФормы
	//
	Функция СоздатьЭлементПоОписанию(Форма, ОписаниеЭлементаФормы)
		ЭлементФормы = А1Э_Формы.СоздатьЭлементПоОписанию(Форма, ОписаниеЭлементаФормы);
		Если ЭлементФормы = Неопределено Тогда Возврат Неопределено КонецЕсли;
		
		ДобавитьДействияУниверсальнойФормы(Форма, ЭлементФормы, ОписаниеЭлементаФормы);
		
		Возврат ЭлементФормы;
	КонецФункции
	
	// Создает команду Универсальной Формы.
	//
	// Параметры:
	//  Форма			 - ФормаКлиентскогоПриложения - 
	//  ОписаниеКоманды	 - Структура - см. А1Э_Формы.НовыйОписаниеКомандыКнопки()
	// 
	// Возвращаемое значение:
	//   - КомандаФормы 
	//
	Функция СоздатьКомандуПоОписанию(Форма, ОписаниеКоманды)
		Команда = А1Э_Формы.СоздатьКомандуПоОписанию(Форма, ОписаниеКоманды);
		Если Команда = Неопределено Тогда Возврат Неопределено КонецЕсли;
		
		ВидКоманды = А1Э_Структуры.ЗначениеСвойства(ОписаниеКоманды.Параметры, "ВидКоманды");
		Если ВидКоманды = "НаСервере" Тогда
			Команда.Действие = "А1_ОбработчикУниверсальнойФормы__ВыполнениеКомандыНаСервере";
		Иначе
			Команда.Действие = "А1_ОбработчикУниверсальнойФормы__ВыполнениеКоманды";
		КонецЕсли;
		Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд.Вставить(ОписаниеКоманды.Имя, ОписаниеКоманды.Действие);
		
		Возврат Команда;
	КонецФункции 
	
	// Функция - Создать кнопку по описанию
	//
	// Параметры:
	//  Форма					 - ФормаКлиентскогоПриложения - 
	//  ОписаниеЭлементаФормы	 - Структура - см. А1Э_Формы.НовыйОписаниеКомандыКнопки()  
	// 
	// Возвращаемое значение:
	//   - ЭлементФормы 
	//
	Функция СоздатьКнопкуПоОписанию(Форма, ОписаниеЭлементаФормы)
		Кнопка = А1Э_Формы.СоздатьКнопкуПоОписанию(Форма, ОписаниеЭлементаФормы);
		Если Кнопка = Неопределено Тогда Возврат Неопределено КонецЕсли;
		
		ДобавитьДействияУниверсальнойФормы(Форма, Кнопка, ОписаниеЭлементаФормы);
		
		Возврат Кнопка;
	КонецФункции
	
	// Функция - Добавить действия универсальной формы
	//
	// Параметры:
	//  Форма					 - ФормаКлиентскогоПриложения - 
	//  ЭлементФормы			 - ЭлементФормы - 
	//  ОписаниеЭлементаФормы	 - Структура - см. А1Э_Формы.НовыйОписаниеРеквизитаЭлемента() 
	// 
	// Возвращаемое значение:
	//   - Неопределено 
	//
	Функция ДобавитьДействияУниверсальнойФормы(Форма, ЭлементФормы, ОписаниеЭлементаФормы) 
		Если А1Э_Структуры.ЗначениеСвойства(Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов, ЭлементФормы.Имя) = Неопределено Тогда
			Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов.Вставить(ЭлементФормы.Имя, Новый Структура);
		КонецЕсли;
		
		Для Каждого Действие Из ОписаниеЭлементаФормы.Действия Цикл
			Если ЭтоСтандартноеСобытиеЭлемента(Действие.Ключ) Тогда
				ЭлементФормы.УстановитьДействие(Действие.Ключ, "А1_ОбработчикУниверсальнойФормы__" + Действие.Ключ);
			КонецЕсли;
			Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов[ЭлементФормы.Имя].Вставить(Действие.Ключ, Обработчики(Действие.Значение));
		КонецЦикла;
	КонецФункции
	
#КонецЕсли

// Определяет, является ли событие элемента стандартным событием платформы (ПриИзменении).  
// Позволяет отфильтровать произвольные события (обработчики формы, компонентов)
//
// Параметры:
//  ИмяСобытия	 - Строка - 
// 
// Возвращаемое значение:
//   - 
//
Функция ЭтоСтандартноеСобытиеЭлемента(ИмяСобытия) Экспорт
	Возврат НЕ ЭтоСобытиеФормы(ИмяСобытия) И НЕ ЭтоСобытиеКомпонента(ИмяСобытия); 
КонецФункции 

// Добавляет реквизиты для хранения обработчиков Универсальной Формы.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - 
// 
// Возвращаемое значение:
//   - Неопределено
//
Функция ИнициализироватьФормуПриНеобходимости(Форма) Экспорт 
	Если Инициализирована(Форма) Тогда Возврат Ложь; КонецЕсли;
	#Если Клиент Тогда
		А1Э_Служебный.СлужебноеИсключение("Инициализация универсальной формы на клиенте невозможна!");
	#Иначе
		МассивОписаний = Новый Массив;
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, "А1_УниверсальнаяФорма__ОбработчикиЭлементов", "");
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, "А1_УниверсальнаяФорма__ОбработчикиКоманд", "");
		А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, "А1_УниверсальнаяФорма__ОбработчикиОжидания", "");
		А1Э_Формы.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);		
		
		Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов = Новый Структура;
		Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд = Новый Структура;
		Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания = А1Э_Структуры.Создать(
		"Обработчики", Новый Соответствие,
		"Интервалы", А1Э_Структуры.СоздатьСоответствие(Истина, 0, Ложь, 0)); //Ключ соответствия - признак однократности обработчиков ожидания.
	#КонецЕсли
КонецФункции

// Возвращает инициализированность Универсальной Формы.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - 
// 
// Возвращаемое значение:
//   - 
//
Функция Инициализирована(Форма) Экспорт
	Возврат А1Э_Общее.Свойство(Форма, "А1_УниверсальнаяФорма__ОбработчикиЭлементов");
КонецФункции

#КонецОбласти 

#Область СобытияФормыДляЭлементов 

// Проверяет, является ли действие событие событием формы (в отличие от события элемента).
//
// Параметры:
//  ИмяДействия	 - Строка - 
// 
// Возвращаемое значение:
//   - Неопределено
//
Функция ЭтоСобытиеФормы(ИмяДействия) Экспорт 
	Возврат СтрНачинаетсяС(Нрег(ИмяДействия), "форма");
КонецФункции

// Обрабатывает событие для объекта формы.
//
// Параметры:
//  ИмяОбработчика	 - Строка - 
//  Форма			 - ФормаКлиентскогоПриложения - 
//  П1				 -  - 
//  П2				 -  - 
//  П3				 -  - 
//  П4				 -  - 
//  П5				 -  - 
//  П6				 -  - 
//  П7				 -  - 
// 
// Возвращаемое значение:
//   -  
//
Функция ВыполнитьОбработчикиСобытияДляОбъектовФормы(ИмяОбработчика, Форма, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null) Экспорт
	Если ТипЗнч(Форма) <> А1Э_СтандартныеТипы.ФормаКлиентскогоПриложения() Тогда Возврат Неопределено КонецЕсли;
	Если НЕ А1Э_Общее.Свойство(Форма, "А1_УниверсальнаяФорма__ОбработчикиЭлементов") Тогда Возврат Неопределено; КонецЕсли;
	
	Для Каждого Пара Из Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов Цикл
		ВыполнитьОбработчикСобытияОбъектаФормыСлужебно(Пара.Значение, ИмяОбработчика, Пара.Ключ, Форма, П1, П2, П3, П4, П5, П6, П7);
	КонецЦикла;
КонецФункции 

Функция ВыполнитьОбработчикСобытияОбъектаФормы(ИмяОбработчика, ИмяОбъектаФормы, Форма, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null) Экспорт 
	ВсеОбработчикиОбъектаФормы = Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов[ИмяОбъектаФормы];
	ВыполнитьОбработчикСобытияОбъектаФормыСлужебно(ВсеОбработчикиОбъектаФормы, ИмяОбработчика, ИмяОбъектаФормы, Форма, П1, П2, П3, П4, П5, П6, П7); 
КонецФункции

Функция ВыполнитьОбработчикСобытияОбъектаФормыСлужебно(ВсеОбработчикиОбъектаФормы, ИмяОбработчика, ИмяОбъектаФормы, Форма, П1, П2, П3, П4, П5, П6, П7) 
	Если НЕ ВсеОбработчикиОбъектаФормы.Свойство(ИмяОбработчика) Тогда Возврат Неопределено; КонецЕсли;
	
	Для Каждого Обработчик Из ВсеОбработчикиОбъектаФормы[ИмяОбработчика] Цикл
		А1Э_Общее.РезультатФункции(Обработчик.Имя, ИмяОбъектаФормы, Форма, П1, П2, П3, П4, П5, П6, П7);
	КонецЦикла;
КонецФункции 

#КонецОбласти

#Область УниверсальныеОбработчики

// Добавляет обработчик к коллекции действий
//
// Параметры:
//  Действия	 - Структура -  
//  ИмяДействия	 - Строка - имя действия, вроде "ПриИзменении" 
//  Обработчик	 - Строка - полное имя Функции в общем модуле или модуле менеджера, или имя локальной функции формы. 
//  Индекс		 - Число - индекс для вставки (определяет порядок выполнения). По умолчанию добавляет в конец.  
// 
// Возвращаемое значение:
//   - Неопределено 
//
Функция ДобавитьОбработчикКДействиям(Действия, Знач ИмяДействия, Знач Обработчик, Знач Индекс = Неопределено) Экспорт
	ПроверитьДействие(Действия, ИмяДействия);
	ДобавитьВставитьОбработчик(Действия[ИмяДействия], Обработчик, Индекс);
КонецФункции

// Добавляет обработчик из модуля к коллекции действий. Предполагает, что имя действия равно имени процедуры. 
//
// Параметры:
//  Действия	 - Структура - 
//  ИмяМодуля	 - Строка - имя модуля, в котором расположен обработчик. 
//  ИмяДействия	 - Строка - имя действия, оно же имя функции в модуле.
//  Индекс		 - Число - индекс для вставки (определяет порядок выполнения). По умолчанию добавляет в конец.
// 
// Возвращаемое значение:
//   - Неопределено
//
Функция ДобавитьОбработчикМодуляКДействиям(Действия, Знач ИмяМодуля, Знач ИмяДействия, Знач Индекс = Неопределено) Экспорт 
	ТипДействия = А1Э_Строки.Перед(ИмяДействия, ":");
	Возврат ДобавитьОбработчикКДействиям(Действия, ТипДействия, ИмяМодуля + "." + ИмяДействия, Индекс); 
КонецФункции

// Добавляет универсальный обработчик к действиям элемента формы. Автоматически трансформирует существующие обработчики в универсальные.  
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения - 
//  Элемент		 - ЭлементФормы - 
//  ИмяДействия	 - Строка - имя действия, вроде "ПриИзменении" 
//  Обработчик	 - Строка - полное имя Функции в общем модуле или модуле менеджера, или имя локальной функции формы. 
//  Индекс		 - Число - индекс для вставки (определяет порядок выполнения). По умолчанию добавляет в конец.  
// 
// Возвращаемое значение:
//   - Неопределено
//
Функция ДобавитьОбработчикЭлементаФормы(Форма, Элемент, Знач ИмяДействия, Знач Обработчик, Знач Индекс = Неопределено) Экспорт 
	ИнициализироватьФормуПриНеобходимости(Форма);
	ИмяЭлемента = А1Э_Формы.ИмяЭлемента(Элемент);
	Если НЕ Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов.Свойство(ИмяЭлемента) Тогда
		Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов.Вставить(ИмяЭлемента, Новый Структура);
		НеобходимаПривязка = Истина;
	КонецЕсли;
	Действия = Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов[ИмяЭлемента];
	РезультатПроверки = ПроверитьДействие(Действия, ИмяДействия);
	Если РезультатПроверки = Истина Тогда НеобходимаПривязка = Истина КонецЕсли;
	
	Если НеобходимаПривязка = Истина Тогда
		#Если Клиент Тогда
			А1Э_Служебный.СлужебноеИсключение("Привязка универсального обработчика к элементу возможна только на сервере!");
		#Иначе
			ЭлементФормы = А1Э_Формы.ЭлементФормы(Форма, Элемент);
			ЭлементФормы.УстановитьДействие(ИмяДействия, "А1_ОбработчикУниверсальнойФормы__" + ИмяДействия);
		#КонецЕсли
	КонецЕсли;
	ДобавитьВставитьОбработчик(Действия[ИмяДействия], Обработчик, Индекс);
КонецФункции

Функция УбратьОбработчикиСобытийФормы(Действия) Экспорт 
	МассивУдаления = Новый Массив;
	Для Каждого Пара Из Действия Цикл
		Если СтрНачинаетсяС(Пара.Ключ, "Форма") Тогда
			МассивУдаления.Добавить(Пара.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ключ Из МассивУдаления Цикл
		Действия.Удалить(Ключ);
	КонецЦикла;
КонецФункции

Функция ДобавитьДействиеКомандыФормы(Форма, Команда, Знач Обработчик, Знач Индекс = Неопределено) Экспорт
	ДобавитьДействиеКомандыФормыСлужебно(Форма, Команда, Обработчик, Индекс);	
КонецФункции 

Функция ЗаменитьДействиеКомандыФормы(Форма, Команда, Знач Обработчик) Экспорт
	ДобавитьДействиеКомандыФормыСлужебно(Форма, Команда, Обработчик, Неопределено, Истина);
КонецФункции

#Если Клиент Тогда
	
	Функция ВыполнитьАсинхронныйОбработчик(ИндексОбработчика, Событие, ИмяФункции, Форма, Элемент, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт
		А1Э_Общее.РезультатФункции(ИмяФункции, АсинхронныйКонтекст(ИндексОбработчика, Событие), Форма, Элемент, П1, П2, П3, П4, П5);
	КонецФункции 
	
	Функция ЗавершитьАсинхронныйОбработчик(АсинхронныйКонтекстИлиКонтейнер, Форма = Неопределено, Элемент = Неопределено, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт 
		Если А1Э_Структуры.Класс(АсинхронныйКонтекстИлиКонтейнер) = "АсинхронныйКонтейнер" Тогда
			АсинхронныйКонтейнер = АсинхронныйКонтекстИлиКонтейнер;
		Иначе
			АсинхронныйКонтейнер = АсинхронныйКонтейнер(АсинхронныйКонтекстИлиКонтейнер, Форма, Элемент, П1, П2, П3, П4, П5);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершенияАсинхронногоОбработчика(АсинхронныйКонтейнер));
	КонецФункции
	
	Функция ОповещениеЗавершенияАсинхронногоОбработчика(АсинхронныйКонтейнер) Экспорт 
		Возврат Новый ОписаниеОповещения("А1_ОбработчикУниверсальнойФормы__ДействиеЗавершение", АсинхронныйКонтейнер.Форма, АсинхронныйКонтейнер);
	КонецФункции
	
	Функция АсинхронныйКонтейнер(АсинхронныйКонтекст, Форма, Элемент, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт
		Контейнер = А1Э_Структуры.Создать(
		"Класс", "АсинхронныйКонтейнер",
		"АсинхронныйКонтекст", АсинхронныйКонтекст,
		"Форма", Форма,
		"Элемент", Элемент);
		А1Э_Структуры.ДобавитьКлючиИЗначения(Контейнер, "П1", П1, "П2", П2, "П3", П3, "П4", П4, "П5", П5);
		Возврат Контейнер;
	КонецФункции
	
	Функция АсинхронныйКонтекст(ИндексОбработчика, Событие = Неопределено) Экспорт
		Возврат А1Э_Структуры.Создать(
		"Событие", Событие,
		"СледующийИндекс", ИндексОбработчика + 1); 
	КонецФункции
	
#КонецЕсли

// Возвращает модуль обработчика (или Неопределено если это локальный обработчик).
//
// Параметры:
//  ИмяФункции	 - Строка - 
// 
// Возвращаемое значение:
//   - ОбщийМодуль, Неопределено
//
Функция МодульОбработчика(ИмяФункции) Экспорт
	ПоложениеТочки = СтрНайти(ИмяФункции, ".", НаправлениеПоиска.СКонца);
	Если ПоложениеТочки = 0 Тогда Возврат Неопределено; КонецЕсли;
	Возврат Вычислить(Лев(ИмяФункции, ПоложениеТочки - 1));
КонецФункции 

// Создает строку выполнения обработчика (для оператора Вычислить)
//
// Параметры:
//  ИмяФункции	 - Строка - 
//  П1			 - 	 - 
//  П2			 - 	 - 
//  П3			 - 	 - 
//  П4			 - 	 - 
//  П5			 - 	 - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция СтрокаВыполненияОбработчика1_1_1(Знач ИмяФункции, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт 
	ПоложениеТочки = СтрНайти(ИмяФункции, ".", НаправлениеПоиска.СКонца);
	Если ПоложениеТочки <> 0 Тогда
		//Мы заменяем имя модуля на переменную А1Э_Модуль, которая рассчитывается в А1_ОбработчикУниверсальнойФормы__ДействиеПродолжение.
		//Это сделано для того, чтобы не было конфликта между именем модуля и именем локальной переменной формы.
		ИмяФункции = "А1Э_Модуль." + Сред(ИмяФункции, ПоложениеТочки + 1);
	КонецЕсли;
	Возврат СтрокаВыполненияОбработчика(ИмяФункции, П1, П2, П3, П4, П5);
КонецФункции 

// Создает строку для выполнения обработчика асинхронно.
//
// Параметры:
//  ИмяФункции	 - Строка - 
//  П1			 -  - 
//  П2			 -  - 
//  П3			 -  - 
//  П4			 -  - 
//  П5			 -  - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция СтрокаВыполненияОбработчикаАсинхронно1_1_1(Знач ИмяФункции, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт
	СтрокаВыполнения = СтрокаВыполненияОбработчика1_1_1(ИмяФункции, П1, П2, П3, П4, П5);
	Возврат СтрЗаменить(СтрокаВыполнения, "(", "(АсинхронныйКонтекст, ");
КонецФункции

// Старый вариант генерации строки выполнения (без А1Э_Модуль). Оставлен для обратной совместимости.
//
// Параметры:
//  ИмяФункции	 - Строка - 
//  П1			 -  - 
//  П2			 -  - 
//  П3			 -  - 
//  П4			 -  - 
//  П5			 -  - 
// 
// Возвращаемое значение:
//   - Строка
//
Функция СтрокаВыполненияОбработчика(ИмяФункции, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт 
	СтрокаВыполнения = А1Э_Общее.СтрокаВыполнения(ИмяФункции, П1, П2, П3, П4, П5);
	Если П1 = Null Тогда
		Подстановка = "(Элемент";
	Иначе
		Подстановка = "(Элемент, ";
	КонецЕсли;
	СтрокаВыполнения = СтрЗаменить(СтрокаВыполнения, "(", Подстановка); 
	Если СтрНайти(ИмяФункции, ".") <> 0 Тогда
		СтрокаВыполнения = СтрЗаменить(СтрокаВыполнения, "(", "(ЭтаФорма, ");
	КонецЕсли;
	Возврат СтрокаВыполнения;
КонецФункции

// Проверяет, должен ли обработчик выполняться на клиенте (синхронно).
//
// Параметры:
//  Обработчик	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция НаКлиенте(Обработчик) Экспорт
	Возврат ВРЕГ(Обработчик.Вид) = "НАКЛИЕНТЕ";	
КонецФункции

// Проверяет, должен ли обработчик выполняться на клиенте (асинхронно). 
//
// Параметры:
//  Обработчик	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция НаКлиентеАсинхронно(Обработчик) Экспорт
	Возврат ВРЕГ(Обработчик.Вид) = "НАКЛИЕНТЕАСИНХРОННО";
КонецФункции

// Проверяет, должен ли обработчик выполняться на сервере (синхронно).
//
// Параметры:
//  Обработчик	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция НаСервере(Обработчик) Экспорт
	Возврат ВРЕГ(Обработчик.Вид) = "НАСЕРВЕРЕ";	
КонецФункции 

// Получает все обработчики элемента формы или все действия команды.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - 
//  ЭлементКоманда	 - ЭлементФормы, КомандаФормы - 
//  Событие			 - Строка,Неопределено - не указывается если передана КомандаФормы. 
// 
// Возвращаемое значение:
//   - Массив
//
Функция ОбработчикиОбъекта(Форма, ЭлементКоманда, Событие = Неопределено) Экспорт
	Если Событие = Неопределено Тогда
		//Это команда
		ОбработчикиЭлемента = Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд;
		Имя = ЭлементКоманда.Имя;
	Иначе
		ОбработчикиЭлемента = А1Э_Структуры.ЗначениеСвойства(Форма.А1_УниверсальнаяФорма__ОбработчикиЭлементов, ЭлементКоманда.Имя);
		Если ОбработчикиЭлемента = Неопределено Тогда Возврат Неопределено КонецЕсли;
		Имя = Событие;
	КонецЕсли;
	
	ДанныеОбработчиков = А1Э_Структуры.ЗначениеСвойства(ОбработчикиЭлемента, Имя);
	
	Возврат Обработчики(ДанныеОбработчиков); 
КонецФункции

Функция Обработчики(ДанныеОбработчиков) Экспорт
	Обработчики = А1Э_Массивы.Массив(ДанныеОбработчиков);
	
	Для Сч = 0 По Обработчики.Количество() - 1 Цикл
		Обработчики[Сч] = Обработчик(Обработчики[Сч]);
	КонецЦикла;
	
	Возврат Обработчики; 
КонецФункции

Функция Обработчик(ДанныеОбработчика) Экспорт
	Если ТипЗнч(ДанныеОбработчика) = Тип("Структура") Тогда 
		Возврат ДанныеОбработчика 
	ИначеЕсли ТипЗнч(ДанныеОбработчика) = Тип("Строка") Тогда
		ПоРазделителю = А1Э_Строки.ПередПосле(ДанныеОбработчика, ":");
		Возврат А1Э_Структуры.Создать(
		"Имя", ПоРазделителю.Перед,
		"Вид", А1Э_Общее.НепустоеЗначение(ПоРазделителю.После, "НаКлиенте"));
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("ДанныеОбработчика", "А1Э_УниверсальнаяФорма.Обработчик", ДанныеОбработчика, "Структура,Строка");
	КонецЕсли;
КонецФункции

Функция ПроверитьДействие(Действия, Знач ИмяДействия) 
	НеобходимаПривязка = Ложь;
	Если Действия = Неопределено Тогда
		Действия = Новый Структура;
		НеобходимаПривязка = Истина;
	КонецЕсли;
	Если НЕ Действия.Свойство(ИмяДействия) Тогда
		Действия.Вставить(ИмяДействия, Новый Массив);
		НеобходимаПривязка = Истина;
	КонецЕсли;
	Если ТипЗнч(Действия[ИмяДействия]) <> Тип("Массив") Тогда
		Действия.Вставить(ИмяДействия, Обработчики(Действия[ИмяДействия]));
	КонецЕсли;
	Если НЕ ЭтоСтандартноеСобытиеЭлемента(ИмяДействия) Тогда
		НеобходимаПривязка = Ложь;
	КонецЕсли;
	Возврат НеобходимаПривязка;
КонецФункции

Функция ДобавитьВставитьОбработчик(Коллекция, Обработчик, Индекс = Неопределено)
	Если Индекс = Неопределено Тогда
		Коллекция.Добавить(Обработчик(Обработчик));
	Иначе
		Коллекция.Вставить(Индекс, Обработчик(Обработчик));
	КонецЕсли;
КонецФункции

Функция ДобавитьДействиеКомандыФормыСлужебно(Форма, Команда, Обработчик, Индекс = Неопределено, Замещать = Ложь);  
	ИнициализироватьФормуПриНеобходимости(Форма);
	ИмяКоманды = А1Э_Формы.ИмяКоманды(Команда);
	Если НЕ Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд.Свойство(ИмяКоманды) Тогда
		КоллекцияДействий = Новый Массив;
		Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд.Вставить(ИмяКоманды, КоллекцияДействий);
		НеобходимаПривязка = Истина;
	Иначе
		МассивКоманд = Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд[ИмяКоманды];
	КонецЕсли;
	Если НеобходимаПривязка = Истина Тогда
		#Если Клиент Тогда
			А1Э_Служебный.СлужебноеИсключение("Привязка универсального обработчика к элементу возможна только на сервере!");
		#Иначе
			КомандаФормы = А1Э_Формы.КомандаФормы(Форма, Команда);
			Если НЕ Замещать Тогда
				ДобавитьВставитьОбработчик(КоллекцияДействий, КомандаФормы.Действие);
			КонецЕсли;
			КомандаФормы.Действие = "А1_ОбработчикУниверсальнойФормы__ВыполнениеКоманды";
		#КонецЕсли
	КонецЕсли;
	ДобавитьВставитьОбработчик(КоллекцияДействий, Обработчик, Индекс);
КонецФункции

#КонецОбласти

#Область ОбработчикиОжидания
#Если Клиент Тогда
	
	Функция ПодключитьУниверсальныйОбработчикОжидания(Форма, ИмяФункции, Интервал, Однократно = Ложь) Экспорт 
		ИнициализироватьФормуПриНеобходимости(Форма);
		Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания.Обработчики.Вставить(ИмяФункции, НовыйОписаниеОбработчикаОжидания(ИмяФункции, Интервал, Однократно));
		ОбновитьОбработчикиОжиданияУниверсальнойФормы(Форма);
	КонецФункции
	
	Функция ОтключитьУниверсальныйОбработчикОжидания(Форма, ИмяФункции) Экспорт
		Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания.Обработчики.Удалить(ИмяФункции);
		ОбновитьОбработчикиОжиданияУниверсальнойФормы(Форма);
	КонецФункции
	
	Функция ВыполнитьОбработчикиОжидания(Форма) Экспорт
		Момент = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Обработчики = Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания.Обработчики;
		ВыполненныеОднократно = Новый Массив;
		Для Каждого Пара Из Обработчики Цикл
			ОписаниеОбработчика = Пара.Значение;
			Если Момент < ОписаниеОбработчика.ВремяИзменения + ОписаниеОбработчика.Интервал Тогда Продолжить; КонецЕсли;
			А1Э_Общее.РезультатФункции(ОписаниеОбработчика.ИмяФункции, Форма);
			
			ОписаниеОбработчика.ВремяИзменения = Момент;
			Если ОписаниеОбработчика.Однократно = Истина Тогда
				ВыполненныеОднократно.Добавить(Пара.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если ВыполненныеОднократно.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
		Для Каждого ИмяФункции Из ВыполненныеОднократно Цикл
			Обработчики.Удалить(ИмяФункции);
		КонецЦикла;
		
		ОбновитьОбработчикиОжиданияУниверсальнойФормы(Форма, Истина);	
	КонецФункции 
	
	Функция НовыйОписаниеОбработчикаОжидания(ИмяФункции, Интервал, Однократно)
		Возврат А1Э_Структуры.Создать(
		"ИмяФункции", ИмяФункции,
		"Интервал", Интервал * 1000,
		"Однократно", Однократно = Истина,
		"ВремяИзменения", ТекущаяУниверсальнаяДатаВМиллисекундах())
	КонецФункции 
	
	Функция ОбновитьОбработчикиОжиданияУниверсальнойФормы(Форма, ТолькоОднократные = Ложь)
		Обработчики = Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания.Обработчики;
		Постоянные = Новый Массив;
		Однократные = Новый Массив;
		Для Каждого Пара Из Обработчики Цикл
			ОписаниеОбработчика = Пара.Значение;
			Если ОписаниеОбработчика.Однократно Тогда
				Однократные.Добавить(ОписаниеОбработчика);
			Иначе
				Постоянные.Добавить(ОписаниеОбработчика);
			КонецЕсли;
		КонецЦикла;
		ИзменитьСостояниеОбработчиков(Форма, Однократные, Истина);
		Если ТолькоОднократные Тогда Возврат Неопределено; КонецЕсли;
		ИзменитьСостояниеОбработчиков(Форма, Постоянные, Ложь);
	КонецФункции
	
	Функция ИзменитьСостояниеОбработчиков(Форма, ОписанияОбработчиков, Однократно)  
		
		Если ОписанияОбработчиков.Количество() = 0 Тогда
			ИзменитьСостояниеОбработчика(Форма, 0, Однократно);
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущийИнтервал = Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания.Интервалы[Однократно];
		НовыйИнтервал = НовыйИнтервал(ОписанияОбработчиков, Однократно);		
		Если ТекущийИнтервал = НовыйИнтервал Тогда Возврат Неопределено; КонецЕсли;
		
		ИзменитьСостояниеОбработчика(Форма, НовыйИнтервал, Однократно);
	КонецФункции
	
	Функция НовыйИнтервал(ОписанияОбработчиков, Однократно)
		Если Однократно Тогда
			Возврат НовыйИнтервалОднократных(ОписанияОбработчиков);
		Иначе
			Возврат НовыйИнтервалПостоянных(ОписанияОбработчиков);
		КонецЕсли;
		
	КонецФункции
	
	Функция НовыйИнтервалОднократных(ОписанияОбработчиков)
		БлижайшееВремяВыполнения = ВремяВыполнения(ОписанияОбработчиков[0]);
		Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
			ВремяВыполнения = ВремяВыполнения(ОписаниеОбработчика);
			Если ВремяВыполнения < БлижайшееВремяВыполнения Тогда 
				БлижайшееВремяВыполнения = ВремяВыполнения;
			КонецЕсли;
		КонецЦикла;
		НовыйИнтервал = БлижайшееВремяВыполнения - ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если НовыйИнтервал < 100 Тогда
			НовыйИнтервал = 100;
		КонецЕсли;
		Возврат НовыйИнтервал;
	КонецФункции
	
	Функция ВремяВыполнения(ОписаниеОбработчика)
		Возврат ОписаниеОбработчика.ВремяИзменения + ОписаниеОбработчика.Интервал; 
	КонецФункции
	
	Функция НовыйИнтервалПостоянных(ОписанияОбработчиков)
		Интервалы = Новый Массив;
		Для Каждого ОписаниеОбработчика Из ОписанияОбработчиков Цикл
			Интервалы.Добавить(ОписаниеОбработчика.Интервал);
		КонецЦикла;
		Возврат А1Э_Числа.НаибольшийОбщийДелитель(Интервалы);
	КонецФункции
	
	Функция ИзменитьСостояниеОбработчика(Форма, Интервал, Однократно)
		Суффикс = ?(Однократно, "Однократные", "Постоянные");
		ИмяФункции = "А1_ОбработчикУниверсальнойФормы__ОбработчикОжидания_" + Суффикс;
		Если Интервал = 0 Тогда
			Форма.ОтключитьОбработчикОжидания(ИмяФункции);
		Иначе
			Форма.ПодключитьОбработчикОжидания(ИмяФункции, (Цел(Интервал / 100) + 1)/10, Однократно);
		КонецЕсли;
		Форма.А1_УниверсальнаяФорма__ОбработчикиОжидания.Интервалы.Вставить(Однократно, Интервал);
	КонецФункции 
#КонецЕсли
#КонецОбласти

#Область Компоненты

// Возвращает имя компонента по элементу компонента или его имени. 
// Рассчитывает на конвенцию, по которой имена элементов компонента представляют собой ИмяКомпонента + "___" + ИмяЭлемента.
//
// Параметры:
//  Идентификатор	 - ЭлементФормы,Строка - 
// 
// Возвращаемое значение:
//   - Строка 
//
Функция ИмяКомпонента(Идентификатор) Экспорт
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		ИдентификаторСтрока = Идентификатор.Имя;
	Иначе
		ИдентификаторСтрока = Идентификатор;
	КонецЕсли;
	Разделитель = "___";
	Позиция = СтрНайти(ИдентификаторСтрока, Разделитель, НаправлениеПоиска.СКонца); 
	Если Позиция = 0 Тогда
		Возврат ИдентификаторСтрока;
	КонецЕсли;
	Возврат Лев(ИдентификаторСтрока, Позиция - 1); 
КонецФункции

Функция НастройкиКомпонента(Форма, ИмяКомпонента) Экспорт 
	Возврат Форма[ИмяНастроекКомпонента(ИмяКомпонента)]; 
КонецФункции

Функция НастройкиКомпонентаСуществуют(Форма, ИмяКомпонента) Экспорт 
	Возврат А1Э_Общее.Свойство(Форма, ИмяНастроекКомпонента(ИмяКомпонента)); 
КонецФункции

Функция ВставитьВНастройкиКомпонента(Форма, ИмяКомпонента, ДобавляемаяСтруктура) Экспорт 
	Если НЕ НастройкиКомпонентаСуществуют(Форма, ИмяКомпонента) Тогда
		МассивОписаний = Новый Массив;
		А1Э_УниверсальнаяФорма.ДобавитьОписаниеНастроекКомпонента(МассивОписаний, ИмяКомпонента, ДобавляемаяСтруктура);
		А1Э_УниверсальнаяФорма.ДобавитьРеквизитыИЭлементы(Форма, МассивОписаний);
	Иначе
		Настройки = НастройкиКомпонента(Форма, ИмяКомпонента);
		А1Э_Общее.ПроверитьТип(Настройки, "Структура");
		А1Э_Общее.ПроверитьТип(ДобавляемаяСтруктура, "Структура");
		А1Э_Структуры.СкопироватьСвойства(Настройки, ДобавляемаяСтруктура);
	КонецЕсли;
КонецФункции

Функция ДобавитьОписаниеНастроекКомпонента(МассивОписаний, ИмяКомпонента, ЗначениеНастроек) Экспорт
	Возврат А1Э_Формы.ДобавитьОписаниеРеквизита(МассивОписаний, ИмяНастроекКомпонента(ИмяКомпонента), "", , ,
	А1Э_Структуры.Создать(
	"ЗначениеРеквизита", ЗначениеНастроек));
КонецФункции 

Функция ИмяНастроекКомпонента(ИмяКомпонента) Экспорт
	Возврат ИмяКомпонента + "___Настройки"; 
КонецФункции

Функция ЭтоСобытиеКомпонента(ИмяСобытия) Экспорт
	Возврат СтрНачинаетсяС(НРег(ИмяСобытия), "компонент");
КонецФункции

Функция УстановитьНастройкиКомпонента(Форма, ИмяКомпонента, ЗначениеНастроек) Экспорт
	Форма[ИмяНастроекКомпонента(ИмяКомпонента)] = ЗначениеНастроек;
КонецФункции

#КонецОбласти

#Область АсинхронныеКоманды
#Если Клиент Тогда
	
	Функция ЗаписатьПриНеобходимости(АсинхронныйКонтекст, Форма, Команда) Экспорт
		А1Э_Формы.ЗаписатьСПредупреждениемПриНеобходимости(Форма, "ЗавершитьАсинхронныйОбработчикКоманды", А1Э_Структуры.Создать(
		"Модуль", ЭтотОбъект,
		"АсинхронныйКонтейнер",  АсинхронныйКонтейнер(АсинхронныйКонтекст, Форма, Команда),
		));
	КонецФункции
	
	Функция ПровестиПриНеобходимости(АсинхронныйКонтекст, Форма, Команда) Экспорт
		А1Э_Формы.ПровестиСПредупреждениемПриНеобходимости(Форма, "ЗавершитьАсинхронныйОбработчикКоманды", А1Э_Структуры.Создать(
		"Модуль", ЭтотОбъект,
		"АсинхронныйКонтейнер",  АсинхронныйКонтейнер(АсинхронныйКонтекст, Форма, Команда),
		"Проведение", Истина,
		));
	КонецФункции
	
	Функция ЗавершитьАсинхронныйОбработчикКоманды(Результат, Контекст) Экспорт
		ЗавершитьАсинхронныйОбработчик(Контекст.АсинхронныйКонтейнер);
	КонецФункции 
	
#КонецЕсли
#КонецОбласти 

#Область Устарело
#Если Клиент Тогда
	
	Функция ВыполнитьОбработчикЭлемента(Форма, Элемент, Событие, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт
		Обработчики = ОбработчикиОбъекта(Форма, Элемент, Событие);
		Если Обработчики.Количество() = 0 Тогда Возврат Неопределено КонецЕсли;
		А1Э_Общее.РезультатФункции(Обработчики[0].Имя, Форма, Элемент, П1, П2, П3, П4, П5);
	КонецФункции 
	
	Функция ВыполнитьОбработчикКоманды(Форма, Команда) Экспорт
		Обработчики = ОбработчикиОбъекта(Форма, Команда);
		Если Обработчики.Количество() = 0 Тогда Возврат Неопределено КонецЕсли;
		А1Э_Общее.РезультатФункции(Обработчики[0].Имя, Форма, Команда);
	КонецФункции
	
	Функция ОповещениеЗавершенияКомандыНаКлиентеНаСервере(Форма, ИдентификаторКоманды) Экспорт
		Возврат Новый ОписаниеОповещения("А1_ОбработчикУниверсальнойФормы__ВыполнениеКомандыНаКлиентеНаСервере_Завершение", Форма, Новый Структура("ИмяКоманды", А1Э_Формы.ИмяКоманды(ИдентификаторКоманды)));
	КонецФункции
	
	Функция ЗавершитьКоманду(Форма, ИдентификаторКоманды) Экспорт
		ВыполнитьОбработкуОповещения(ОповещениеЗавершенияКомандыНаКлиентеНаСервере(Форма, ИдентификаторКоманды));
	КонецФункции 
	
#КонецЕсли

#Если НЕ Клиент Тогда
	
	Функция ВыполнитьОбработчикКомандыСервер(Форма, ИмяКоманды) Экспорт
		ПроцедураОбработчика = А1Э_Структуры.ЗначениеСвойства(Форма.А1_УниверсальнаяФорма__ОбработчикиКоманд, ИмяКоманды);
		Если ПроцедураОбработчика = Неопределено Тогда Возврат Неопределено КонецЕсли;
		
		А1Э_Общее.РезультатФункции(ПроцедураОбработчика, Форма, ИмяКоманды);	
	КонецФункции
	
#КонецЕсли

Функция ВставитьОбработчикВДействия(Действия, Знач ИмяДействия, Знач Индекс, Знач Обработчик) Экспорт 
	ПроверитьДействие(Действия, ИмяДействия);
	Действия[ИмяДействия].Вставить(Индекс, Обработчик(Обработчик));
КонецФункции

Функция СтрокаВыполненияОбработчикаАсинхронно(ИмяФункции, П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт
	СтрокаВыполнения = СтрокаВыполненияОбработчика(ИмяФункции, П1, П2, П3, П4, П5);
	Возврат СтрЗаменить(СтрокаВыполнения, "(", "(АсинхронныйКонтекст, ");
КонецФункции 

#КонецОбласти 
