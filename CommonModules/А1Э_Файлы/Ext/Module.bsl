Функция ЛичнаяВременнаяПапка(ПовтИсп = Истина) Экспорт
	Если ПовтИсп = Истина Тогда
		Возврат А1Э_ПовторноеИспользование.РезультатФункции(ИмяМодуля() + ".ЛичнаяВременнаяПапка", Ложь);
	КонецЕсли;
	WSH = Новый COMОбъект("Wscript.shell");
	Путь = "" + WSH.ExpandEnvironmentStrings("%temp%");
	Путь = А1Э_Строки.ЗавершитьПодстрокой(Путь, "\");
	Возврат Путь;
КонецФункции

Функция ПолучитьПутьКФайлу(Файл, Расширение = "") Экспорт
	Если ТипЗнч(Файл) = Тип("Строка") Тогда
		Возврат Файл;
	ИначеЕсли ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
		Возврат ПоместитьФайлВоВременнуюПапку(Файл, Расширение);
	Иначе
		А1Э_Служебный.ИсключениеНеверныйТип("Файл", "ПолучитьПутьКФайлу", Файл, "Строка, ДвоичныеДанные");
	КонецЕсли;
	
КонецФункции

Функция ПоместитьФайлВоВременнуюПапку(ДвоичныеДанные, Расширение) Экспорт
	
	Попытка
		ПолныйПутьКФайлу = ПутьКНовомуВременномуФайлу(Расширение); 
		ДвоичныеДанные.Записать(ПолныйПутьКФайлу);				
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		А1Э_Служебный.СлужебноеИсключение("Не удалось записать файл " + ОписаниеОшибки);      
	КонецПопытки;            
	
	Возврат ПолныйПутьКФайлу;
КонецФункции

Функция ПутьКНовомуВременномуФайлу(Расширение) Экспорт
	ПутьКВременнойПапке = А1Э_Файлы.ЛичнаяВременнаяПапка();
	Если ЗначениеЗаполнено(ПутьКВременнойПапке) Тогда 
		ПолныйПутьКФайлу = ПутьКВременнойПапке + "ВременныйФайл" + Новый УникальныйИдентификатор + "." + Расширение;
		Возврат ПолныйПутьКФайлу;
	Иначе
		А1Э_Служебный.СлужебноеИсключение("Не удалось получить путь ко временной папке!");
	КонецЕсли;
КонецФункции 

Функция ФайлСуществует(ПутьКФайлу) Экспорт
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
КонецФункции

Функция СложитьПути(П1, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null, П10 = Null) Экспорт
	Результат = А1Э_Строки.Обрубить(П1, "\");
	Если П2 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П2);
	Если П3 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П3);
	Если П4 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П4);
	Если П5 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П5);
	Если П6 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П6);
	Если П7 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П7);
	Если П8 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П8);
	Если П9 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П9);
	Если П10 = Null Тогда Возврат Результат; КонецЕсли;
	Результат = Результат + "\" + ПутьБезКрайнихСлэшэй(П10);
	
	Возврат Результат;
КонецФункции

Функция ПутьБезКрайнихСлэшэй(Путь)
	Результат = Путь;
	Если СтрНачинаетсяС(Результат, "\") Тогда
		Результат = Сред(Результат, 2);
	КонецЕсли;
	Результат = А1Э_Строки.Обрубить(Результат, "\");
	Возврат Результат;
КонецФункции

#Если НЕ Клиент Тогда
	
	Функция Хэш(Файл, ХэшФункция = Неопределено) Экспорт  
		Если ХэшФункция = Неопределено Тогда
			ХэшФункция = ХешФункция.SHA256;
		КонецЕсли;
		Хэширование = Новый ХешированиеДанных(ХэшФункция);
		Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
			Хэширование.Добавить(Файл);
		Иначе //Файл - это путь к файлу.
			Хэширование.ДобавитьФайл(Файл);
		КонецЕсли;
		Если ХэшФункция = ХешФункция.CRC32 Тогда
			Возврат Хэширование.ХешСумма
		Иначе
			Возврат Base64Строка(Хэширование.ХешСумма);
		КонецЕсли;
	КонецФункции
	
#КонецЕсли

#Если Клиент Тогда
	
	#Область ПоказатьВыборФайла
	// Открывает диалог выбора файла асинхронно. В веб-клиенте устанавливает и подключает расширение для работы с файлами при необходимости.
	//
	// Параметры:
	//  ИмяПроцедуры - Строка - имя экспортной процедуры, в которую будет передано управление после успешного подключения. 
	//  Модуль		 - ОбщийМодуль, Форма - модуль или форма, в которых расположена процедура
	//  Контекст	 - Произвольный - будет передан во второй параметр вызванной процедуры. 
	//		кроме того, ключи Режим, ПолноеИмяФайла, Заголовок, Фильтр, Расширение влияют на поведение диалога выбора файла. 
	//      по умолчинию используется режим "Открытие".
	// Возвращаемое значение:
	//   - 
	//
	Функция ПоказатьВыборФайла(ИмяПроцедуры, Модуль, Знач Контекст = Неопределено) Экспорт 
		ВнутреннийКонтекст = А1Э_Структуры.Создать(
		"ВнешнееОповещение", Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, Контекст),
		"Контекст", Контекст,
		);
		А1Э_Файлы.ПодключитьРасширение("__ПоказатьВыборФайла_ПослеПодключенияРасширения", ЭтотОбъект, ВнутреннийКонтекст);
	КонецФункции 
	
	Функция __ПоказатьВыборФайла_ПослеПодключенияРасширения(Результат, ВнутреннийКонтекст) Экспорт
		ДанныеДиалога = А1Э_Общее.ЗначенияСвойств(ВнутреннийКонтекст.Контекст, "Режим,ПолноеИмяФайла,Заголовок,Фильтр,Расширение");
		Если НЕ ЗначениеЗаполнено(ДанныеДиалога.Режим) Тогда
			ДанныеДиалога.Режим = "Открытие";
		КонецЕсли;
		ДанныеДиалога.Режим = А1Э_СтандартныеТипы.РежимДиалогаВыбораФайлаПолучить(ДанныеДиалога.Режим);
		
		Диалог = Новый ДиалогВыбораФайла(ДанныеДиалога.Режим);
		ЗаполнитьЗначенияСвойств(Диалог, ДанныеДиалога, , "Режим");
		Диалог.Показать(ВнутреннийКонтекст.ВнешнееОповещение);
	КонецФункции
	
	#КонецОбласти 
	
	#Область ПодключитьРасширение
	
	// Подключает расширение для работы с файлами. Если подключение не удалось, вызывает исключение.
	// Вне веб-клиента немедленно передает управление в указанную процедуру.
	//
	// Параметры:
	//  ИмяПроцедуры - Строка - имя экспортной процедуры, в которую будет передано управление после успешного подключения. 
	//  Модуль		 - ОбщийМодуль, Форма - модуль или форма, в которых расположена процедура
	//  Контекст	 - Произвольный - будет передан во второй параметр вызванной процедуры. 
	// 
	// Возвращаемое значение:
	//   - 
	//
	Функция ПодключитьРасширение(ИмяПроцедуры, Модуль, Контекст = Неопределено) Экспорт
		Контекст = А1Э_Структуры.Создать(
		"ВнешнееОповещение", Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, Контекст),
		);
		#Если НЕ ВебКлиент Тогда
			ВыполнитьОбработкуОповещения(Контекст.ВнешнееОповещение, Истина);
		#Иначе
			НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("__ПодключитьРасширение_ПослеПервогоПодключения", ЭтотОбъект, Контекст));
		#КонецЕсли
	КонецФункции 
	
	Процедура __ПодключитьРасширение_ПослеПервогоПодключения(Результат, Контекст) Экспорт
		Если Результат = Истина Тогда
			ВыполнитьОбработкуОповещения(Контекст.ВнешнееОповещение, Истина);
			Возврат;
		КонецЕсли;
		НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("__ПодключитьРасширение_ПослеУстановки", ЭтотОбъект, Контекст));
	КонецПроцедуры
	
	Процедура __ПодключитьРасширение_ПослеУстановки(Контекст) Экспорт 
		НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("__ПодключитьРасширение_ПослеВторогоПодключения", ЭтотОбъект, Контекст)); 
	КонецПроцедуры
	
	Процедура __ПодключитьРасширение_ПослеВторогоПодключения(Результат, Контекст) Экспорт
		Если Результат = Истина Тогда
			ВыполнитьОбработкуОповещения(Контекст.ВнешнееОповещение, Истина);
			Возврат;
		КонецЕсли;
		А1Э_Служебный.СлужебноеИсключение("Не удалось подключить расширение по работе с файлами!");
	КонецПроцедуры

	#КонецОбласти 
	
	Функция Открыть(АдресВХранилище, ИмяФайла = "Файл") Экспорт
		#Если ВебКлиент Тогда
			ПолучитьФайл(АдресВХранилище, ИмяФайла);
		#Иначе
			ЧастиИмени = А1Э_Строки.ПередПослеСКонца(ИмяФайла, ".");
			ИмяБезРасширения = ЧастиИмени.Перед;
			Расширение = ЧастиИмени.После;
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
			ПолучитьИзВременногоХранилища(АдресВХранилище).Записать(ИмяВременногоФайла);
			Попытка
				ЗапуститьПриложение(ИмяВременногоФайла);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Сообщить("Ошибка при открытии файла: " + ОписаниеОшибки);
			КонецПопытки;
		#КонецЕсли
	КонецФункции 
#КонецЕсли

Функция ИмяМодуля() Экспорт
	Возврат "А1Э_Файлы";
КонецФункции 